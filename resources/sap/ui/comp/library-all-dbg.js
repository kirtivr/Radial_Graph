// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.comp.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.filterbar.FilterBarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterBarRenderer",['jquery.sap.global', 'sap/ui/layout/GridRenderer'],
	function(jQuery, GridRenderer) {
	"use strict";


	
	/**
	 * @class FilterBar renderer.
	 * @static
	 */
	var FilterBarRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FilterBarRenderer.render = function(oRm, oControl) {
		GridRenderer.render.call("", oRm, oControl);
	};
	

	return FilterBarRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/filterbar/FilterBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.comp.
 */
jQuery.sap.declare('sap.ui.comp.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/library",['jquery.sap.global', 'sap/ui/core/Core', 'sap/ui/core/library', 'sap/ui/fl/library'],
	function(jQuery, Core, library1, library2) {
	"use strict";

	/**
	 * SAPUI5 library with comp controls.
	 *
	 * @namespace
	 * @name sap.ui.comp
	 * @public
	 */
	
	
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.comp",
		version: "1.28.1",
		dependencies : ["sap.ui.core","sap.ui.fl"],
		types: [
			"sap.ui.comp.smartfield.ControlType",
			"sap.ui.comp.smartfield.DisplayBehaviour",
			"sap.ui.comp.smartfield.JSONType",
			"sap.ui.comp.smarttable.TableType"
		],
		interfaces: [],
		controls: [
			"sap.ui.comp.filterbar.FilterBar",
			"sap.ui.comp.navpopover.NavigationPopover",
			"sap.ui.comp.navpopover.SmartLink",
			"sap.ui.comp.odata.FieldSelector",
			"sap.ui.comp.smartfield.SmartField",
			"sap.ui.comp.smartfield.SmartLabel",
			"sap.ui.comp.smartfilterbar.SmartFilterBar",
			"sap.ui.comp.smartform.Group",
			"sap.ui.comp.smartform.GroupElement",
			"sap.ui.comp.smartform.SmartForm",
			"sap.ui.comp.smartform.flexibility.DialogContent",
			"sap.ui.comp.smartform.flexibility.FieldList",
			"sap.ui.comp.smartform.flexibility.FieldListNode",
			"sap.ui.comp.smartform.flexibility.Input",
			"sap.ui.comp.smarttable.SmartTable",
			"sap.ui.comp.smartvariants.SmartVariantManagement",
			"sap.ui.comp.smartvariants.SmartVariantManagementUi2",
			"sap.ui.comp.transport.TransportDialog",
			"sap.ui.comp.valuehelpdialog.ValueHelpDialog",
			"sap.ui.comp.variants.EditableVariantItem",
			"sap.ui.comp.variants.VariantManagement"
		],
		elements: [
			"sap.ui.comp.filterbar.FilterGroupItem",
			"sap.ui.comp.filterbar.FilterItem",
			"sap.ui.comp.navpopover.LinkData",
			"sap.ui.comp.navpopover.SemanticObjectController",
			"sap.ui.comp.smartfield.Configuration",
			"sap.ui.comp.smartfilterbar.ControlConfiguration",
			"sap.ui.comp.smartfilterbar.GroupConfiguration",
			"sap.ui.comp.smartfilterbar.SelectOption",
			"sap.ui.comp.smartform.Layout",
			"sap.ui.comp.smartvariants.PersonalizableInfo",
			"sap.ui.comp.variants.VariantItem"
		]
	});
	
	/**
	 * The available control types.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.ControlType = {
	
		/**
		 * The SmartField chooses the control.
		 * @public
		 */
		auto : "auto",
	
		/**
		 * The SmartField uses a drop down list box.
		 * @public
		 */
		dropDownList : "dropDownList",
	
		/**
		 * The SmartField displays an input field.
		 * @public
		 */
		input : "input",
	
		/**
		 * The SmartField displays a date picker.
		 * @public
		 */
		datePicker : "datePicker",
		
		/**
		 * The SmartField displays a check box.
		 * @public
		 */
		checkBox : "checkBox" 
	
	};
	/**
	 * The different options to define display behavior for a SmartField.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.DisplayBehaviour = {
	
		/**
		 * The SmartField chooses the display behavior.
		 * @public
		 */
		auto : "auto",
	
		/**
		 * Only the description is displayed for available values.
		 * @public
		 */
		descriptionOnly : "descriptionOnly",
	
		/**
		 * Description and ID are displayed for available values.
		 * @public
		 */
		descriptionAndId : "descriptionAndId",
	
		/**
		 * ID and description are displayed for available values.
		 * @public
		 */
		idAndDescription : "idAndDescription",
	
		/**
		 * Shows the ID only.
		 * @public
		 */
		idOnly : "idOnly"
	
	};
	/**
	 * Enumeration of the different data types supported by the SmartField, if it is using a JSON model.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.JSONType = {
	
		/**
		 * The JavaScript primary type String
		 * @public
		 */
		String : "String",
	
		/**
		 * The JavaScript Date Object
		 * @public
		 */
		Date : "Date",
	
		/**
		 * Float type
		 * @public
		 */
		Float : "Float",
	
		/**
		 * Integer type
		 * @public
		 */
		Integer : "Integer",
	
		/**
		 * Boolean Type
		 * @public
		 */
		Boolean : "Boolean",
	
		/**
		 * Date Time Type
		 * @public
		 */
		DateTime : "DateTime"
	
	};
	/**
	 * 
	 * Provides enumeration sap.ui.comp.smarttable.TableType
	 * A subset of table types that fit to a simple API returning one string.
	 * 
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smarttable.TableType = {
	
		/**
		 * A table (sap.ui.table.Table) control shall be created as the content of the SmartTable, if no table already exists (default)
		 * @public
		 */
		Table : "Table",
	
		/**
		 * A responsive table (sap.m.Table) control that can be used on mobile devices shall be created as the content of the SmartTable, if no table already exists
		 * @public
		 */
		ResponsiveTable : "ResponsiveTable",
	
		/**
		 * An analytical table (sap.ui.table.AnalyticalTable) control shall be created as the content of the SmartTable, if no table already exists
		 * @public
		 */
		AnalyticalTable : "AnalyticalTable",
	
		/**
		 * A tree table (sap.ui.table.TreeTable) control shall be created as the content of the SmartTable, if no table already exists (TODO)
		 * @public
		 */
		TreeTable : "TreeTable"
	
	};

	return sap.ui.comp;	

}, /* bExport= */ true);

}; // end of sap/ui/comp/library.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.LinkData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.LinkData.
jQuery.sap.declare('sap.ui.comp.navpopover.LinkData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/LinkData",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new navpopover/LinkData.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Stores display text together with a navigation target hyperlink.
	 * @extends sap.ui.core.Element
	 *
	 * @author Benjamin Spieler
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.LinkData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var LinkData = Element.extend("sap.ui.comp.navpopover.LinkData", /** @lends sap.ui.comp.navpopover.LinkData.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Text which can be displayed on the UI
			 * @since 1.28.0
			 */
			text : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Destination link for a navigation operation.
			 * @since 1.28.0
			 */
			href : {type : "string", group : "Misc", defaultValue : null}
		}
	}});
	

	return LinkData;

}, /* bExport= */ true);

}; // end of sap/ui/comp/navpopover/LinkData.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.NavigationPopover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.NavigationPopover.
jQuery.sap.declare('sap.ui.comp.navpopover.NavigationPopover'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CustomListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/NavigationPopover",['jquery.sap.global', 'sap/m/CustomListItem', 'sap/m/Link', 'sap/m/MessageBox', 'sap/m/Popover', 'sap/ui/comp/library', 'sap/ui/core/Title', 'sap/ui/layout/form/SimpleForm'],
	function(jQuery, CustomListItem, Link, MessageBox, Popover, library, Title, SimpleForm) {
	"use strict";


	
	/**
	 * Constructor for a new navpopover/NavigationPopover.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The NavigationPopover allows navigating to different destinations by providing links on a popover
	 * @extends sap.m.Popover
	 *
	 * @author Benjamin Spieler, Franz Müller
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.NavigationPopover
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var NavigationPopover = Popover.extend("sap.ui.comp.navpopover.NavigationPopover", /** @lends sap.ui.comp.navpopover.NavigationPopover.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * popover title
			 * @since 1.28.0
			 */
			title : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * the name of the semantic object
			 * @since 1.28.0
			 */
			semanticObjectName : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * describes the semantic attributes. The attribute has to be a map
			 * @since 1.28.0
			 */
			semanticAttributes : {type : "object", group : "Misc", defaultValue : null},
	
			/**
			 * The application state key passed to retrieve the navigation targets.
			 * @since 1.28.0
			 */
			appStateKey : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Sets the visible text for the main navigation. If empty, the navigationPopover will try to get the Id from the given sourceObject.
			 */
			mainNavigationId : {type : "string", group : "Misc", defaultValue : null}
		},
		aggregations : {
	
			/**
			 * A list of available actions shown to the user. An action entry contains a text string and a href string.
			 * @since 1.28.0
			 */
			availableActions : {type : "sap.ui.comp.navpopover.LinkData", multiple : true, singularName : "availableAction"}, 
	
			/**
			 * The main navigation displayed first on the popover.
			 * @since 1.28.0
			 */
			mainNavigation : {type : "sap.ui.comp.navpopover.LinkData", multiple : false},
			
			/**
			 * The navigation target leading to the current application.
			 * @since 1.28.0
			 */
			ownNavigation : {type : "sap.ui.comp.navpopover.LinkData", multiple : false}
		},
		associations : {
	
			/**
			 * source control for which the popup should be displayed
			 * @since 1.28.0
			 */
			source : {type : "sap.ui.core.Control", multiple : false}, 
	
			/**
			 * ExtraContent is displayed between the main navigation and the additional available links.
			 * @since 1.28.0
			 */
			extraContent : {type : "sap.ui.core.Control", multiple : false}, 
	
			/**
			 * The parent component.
			 */
			component : {type : "sap.ui.core.Element", multiple : false}
		},
		events : {
	
			/**
			 * the navigation targets were obtained
			 * @since 1.28.0
			 */
			targetsObtained : {}, 
	
			/**
			 * Event is triggerd when a link is pressed.
			 * @since 1.28.0
			 */
			navigate : {}
		}
	}});
	
	
	
	NavigationPopover.prototype.init = function() {
		Popover.prototype.init.call(this);
	
		this.addStyleClass("navigationPopover");
	
		this.setContentWidth("380px");
		this.setHorizontalScrolling(false);
		this.setPlacement("Horizontal");
		
		this._oHeaderForm = new SimpleForm({
			maxContainerCols: 1,
			visible: true
		});		 
		
		this._oMainNavigationText = new Title();		
		this._oMainNavigationLink = new Link();
		this._oMainNavigationLink.attachPress(jQuery.proxy(this._onLinkPress, this));
		
		this._oHeaderForm.addContent(this._oMainNavigationText);	
		this._oHeaderForm.addContent(this._oMainNavigationLink);
	
		this._oForm = new SimpleForm({
			maxContainerCols: 1,
			visible: false
		});	
	
		this._oNavigationList = new sap.m.List({
			showSeparators: "None"
		});
	
		this._oForm.addContent(new Title({
			text: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_LINKLIST_TEXT")
		}));
		this._oForm.addContent(this._oNavigationList);
	
		this.addContent(this._oHeaderForm);	
		this.addContent(this._oForm);
	};
	
	NavigationPopover.prototype.addAvailableAction = function(oLinkData) {
		this.addAggregation("availableActions", oLinkData);
	};
	
	/**
	 * creates the link controls and sets them into the popover's content
	 * 
	 * @private
	 */
	NavigationPopover.prototype._createLinks = function() {
		var i;
		var oLink;
		var sValue;		
		var sHref;
		var oLinkData;
		var oComponent = this._getComponent();
		var oXApplNavigation = this._getNavigationService();				
	
		this._oNavigationList.removeAllItems();
			
		sValue = this.getMainNavigationId();
		if (!sValue){
			var oSmartLink = this._getSourceControl();
			if (oSmartLink) {
				sValue = oSmartLink.getSemanticObjectValue();
			}
		}
		
		this._oMainNavigationText.setText(sValue);	
	
		var oMainNav = this.getMainNavigation();
		if (oMainNav) {
			sHref = oMainNav.getHref();
			if (sHref) {
				this._oHeaderForm.removeStyleClass("navpopoversmallheader");			
				this._oMainNavigationLink.setText(oMainNav.getText());	
				
				if (oXApplNavigation){
					sHref = oXApplNavigation.hrefForExternal({ target : { shellHash : sHref} }, oComponent);
				}
				this._oMainNavigationLink.setHref(sHref);
				this._oMainNavigationLink.setVisible(true);			
			} else {
				this._oHeaderForm.addStyleClass("navpopoversmallheader");
				this._oMainNavigationLink.setText("");
				this._oMainNavigationLink.setVisible(false);
			}		
		}
	
		var aActions = this.getAvailableActions();
		if (aActions) {
			for (i = 0; i < aActions.length; i++) {
				oLink = new Link();
				oLinkData = aActions[i];				
								
				if (oLinkData) {					
					oLink.setText(oLinkData.getText());
					oLink.attachPress(jQuery.proxy(this._onLinkPress, this));
					
					sHref = oLinkData.getHref();
					if (oXApplNavigation){
						sHref = oXApplNavigation.hrefForExternal({ target : { shellHash : sHref} }, oComponent);
					}
					oLink.setHref(sHref);
				}				
	
				this._oNavigationList.addItem(new CustomListItem({
					content: oLink
				}));
			}
		}
	
		this._setListVisibility();
	};
	
	NavigationPopover.prototype.insertAvailableAction = function(oLinkData, iIndex) {
		this.insertAggregation("availableActions", oLinkData, iIndex);
	};
	
	NavigationPopover.prototype.removeAvailableAction = function(oLinkData) {
		var iIndexOfRemovedItem;
	
		if (typeof (oLinkData) === "number") { // oLinkData can also be an index to be removed
			iIndexOfRemovedItem = oLinkData;
		} else {
			iIndexOfRemovedItem = this.getAvailableActions().indexOf(oLinkData);
		}
	
		if (iIndexOfRemovedItem >= 0) {
			this._oNavigationList.removeItem(iIndexOfRemovedItem);
		}
	
		var oReturnValue = this.removeAggregation("availableActions", oLinkData);
		this._setListVisibility();
		return oReturnValue;
	};
	
	NavigationPopover.prototype.removeAllAvailableActions = function() {
		this._oNavigationList.removeAllItems();
		this.removeAllAggregation("availableActions");
		this._setListVisibility();
	};
	
	/**
	 * sets the visibility of the link list depending on the number of available links (0 = invisible)
	 * 
	 * @private
	 */
	NavigationPopover.prototype._setListVisibility = function() {
		var iAvailableActions = this.getAvailableActions().length;
		this._oForm.setVisible(iAvailableActions > 0);
	};	
	
	/**
	 * EventHandler for all link press on this popover
	 * 
	 * @param {object}
	 *            oEvent - the event parameters
	 *
	 * @private
	 */
	NavigationPopover.prototype._onLinkPress = function(oEvent){
		var oSource = oEvent.getSource();
		this.fireNavigate({text: oSource.getText(), href: oSource.getHref()});		
	};
	
	NavigationPopover.prototype.setSemanticObjectName = function(sSemanticalObject) {
		this.setProperty("semanticObjectName", sSemanticalObject);
	
		this.removeAllAvailableActions();
		this.setMainNavigation(null);
	};
	
	/**
	 * retrieve the navigation service
	 * 
	 * @private
	 * @returns {object} the navigation service
	 */
	NavigationPopover.prototype._getNavigationService = function() {
		return sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
	};
	
	/**
	 * retrieve the url service
	 * 
	 * @private
	 * @returns {object} the url service
	 */
	NavigationPopover.prototype._getUrlService = function() {
		return sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("URLParsing");
	};
	
	/**
	 * determines the potential navigation targets for the semantical object and visualize the popover
	 * 
	 * @public
	 * @param {string}
	 *            sSemanticalObject name of the semantical object
	 */
	NavigationPopover.prototype.retrieveNavTargets = function() {
		var sSemanticalObject = this.getSemanticObjectName();
		var mSemanticAttributes = this.getSemanticAttributes();
		var sAppStateKey = this.getAppStateKey();
		this._retrieveNavTargets(sSemanticalObject, mSemanticAttributes, sAppStateKey);
	};
	
	/**
	 * determines the potential navigation targets for the semantical object and visualize the popover
	 * 
	 * @private
	 * @param {string}
	 *            sSemanticalObject name of the semantical object
	 * @param {map}
	 *            mSemanticAttributes map of (name, values) pair for to fine-tune the result
	 * @param {string}
	 *            sAppStateKey Application state key
	
	 */
	NavigationPopover.prototype._retrieveNavTargets = function(sSemanticalObject, mSemanticAttributes, sAppStateKey) {
	
		var that = this;
	
		this.setMainNavigation(null);
		this.removeAllAvailableActions();
	
		var oXApplNavigation = this._getNavigationService();
		if (!oXApplNavigation) {
			jQuery.sap.log.error("Service 'CrossApplicationNavigation' could not be obtained");
			
			//still fire targetsObtained event: easier for testing and the eventhandlers still could provide static links
			this.fireTargetsObtained();
			return;
		}
			
		var bIgnoreFormFactor = false;

		var oComponent = this._getComponent();				
		
		var oPromise = oXApplNavigation.getSemanticObjectLinks(sSemanticalObject, mSemanticAttributes, bIgnoreFormFactor, oComponent, sAppStateKey);
		oPromise.fail(jQuery.proxy(function() {
			// Reset actions
			jQuery.sap.log.error("'getSemanticObjectLinks' failed");
		}, this));
	
		oPromise.done(jQuery.proxy(function(aLinks) {
			var i, sId, sText;
			var oURLParsing, oShellHash;
			var oLinkData;
			var bHasFactSheet = false;			
	
			if (aLinks && aLinks.length) {
				oURLParsing = that._getUrlService();
				
				var sCurrentHash = oXApplNavigation.hrefForExternal();
	
				for (i = 0; i < aLinks.length; i++) {
					sId = aLinks[i].intent; 
					
					sText = aLinks[i].text;
					
					oLinkData = new sap.ui.comp.navpopover.LinkData({
						text: sText,
						href: sId
					});
					
					if (sId.indexOf(sCurrentHash) === 0) {
	                    // Prevent current app from being listed
	                    // NOTE: If the navigation target exists in
	                    // multiple contexts (~XXXX in hash) they will all be skipped
						this.setOwnNavigation(oLinkData);
	                    continue;
	                }	
						
					// Check if a FactSheet exists for this SemanticObject (to skip the first one found)
					oShellHash = oURLParsing.parseShellHash(sId);
					if (oShellHash.action && (oShellHash.action === 'displayFactSheet') && !bHasFactSheet) {
						// Prevent this first FactSheet from being listed --> TODO why ?
						oLinkData.setText(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_FACTSHEET"));
						that.setMainNavigation(oLinkData);
						bHasFactSheet = true;
					} else {
						that.addAvailableAction(oLinkData);
					}
				}
			}
	
			that.fireTargetsObtained();
	
		}, this));
	
	};
	
	/**
	 * returns the component object
	 * 
	 * @private
	 * 
	 * @returns {object} the component
	 * 	
	 */
	NavigationPopover.prototype._getComponent = function(){
		var oComponent = this.getComponent();
		if (typeof oComponent === "string"){
			oComponent = sap.ui.getCore().getComponent(oComponent);
		}
		return oComponent;
	};	
	
	/**
	 * displays the popover. This method should be called, once all navigation targets are adapted by the application
	 * 
	 * @public
	 */
	NavigationPopover.prototype.show = function() {
	
		var oSourceControl = this._getSourceControl();
		if (!oSourceControl) {
			jQuery.sap.log.error("no source assigned");
			return;
		}
	
		var oMainNav = this.getMainNavigation();
		var aActions = this.getAvailableActions();
		if (!(oMainNav && (oMainNav.getHref())) && !(aActions && (aActions.length > 0))) { // if no fact sheet exists and no actions, then the popup does not make
																							// sense:
			jQuery.sap.log.error("no navigation targets found");
	
			MessageBox.show(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_DETAILS_NAV_NOT_POSSIBLE"), {
				icon: MessageBox.Icon.ERROR,
				title: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_MSG_NAV_NOT_POSSIBLE"),
				styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
			});
	
			return;
		}
	
		this._createLinks();
	
		this.openBy(oSourceControl);
	};
	
	/**
	 * retrieves the control for which the popover should be displayed
	 * 
	 * @private
	 * @returns { sap.ui.core.Control} returns the source control
	 */
	NavigationPopover.prototype._getSourceControl = function() {
		var oSourceControl = null;
		var sControlId = this.getSource();
	
		if (sControlId) {
			oSourceControl = sap.ui.getCore().getControl(sControlId);
		}
	
		return oSourceControl;
	};
	
	NavigationPopover.prototype.setExtraContent = function(oControl){
		var oOldContent = this.getExtraContent();
		if (oOldContent && oControl && oOldContent === oControl.getId()){
			return;
		}
		
		if (oOldContent){
			var oOldControl = sap.ui.getCore().getControl(oOldContent);
			this.removeContent(oOldControl);
		} 
		
		this.setAssociation("extraContent", oControl);
		
		if (oControl){
			this.insertContent(oControl, 1);
		}
	};

	return NavigationPopover;

}, /* bExport= */ true);

}; // end of sap/ui/comp/navpopover/NavigationPopover.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.NavigationPopoverRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.navpopover.NavigationPopoverRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.PopoverRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/NavigationPopoverRenderer",['jquery.sap.global', 'sap/m/PopoverRenderer'],
	function(jQuery, PopoverRenderer) {
	"use strict";


	/**
	 * @class NavigationPopover renderer. 
	 * @static
	 */
	var NavigationPopoverRenderer =  sap.ui.core.Renderer.extend(PopoverRenderer);

	return NavigationPopoverRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/navpopover/NavigationPopoverRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SemanticObjectController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.SemanticObjectController.
jQuery.sap.declare('sap.ui.comp.navpopover.SemanticObjectController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SemanticObjectController",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new navpopover/SemanticObjectController.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The SemanticObjectController allows to register against semantic object navigation events as well as define semantic objects which should be ignored.
	 * @extends sap.ui.core.Element
	 *
	 * @author Benjamin Spieler
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.SemanticObjectController
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SemanticObjectController = Element.extend("sap.ui.comp.navpopover.SemanticObjectController", /** @lends sap.ui.comp.navpopover.SemanticObjectController.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Comma separated list of semantic objects which should not be displayed as link.
			 * 
			 * Note that No validation will be done here, please ensure you do not add spaces or special characters here!
			 * @since 1.28.0
			 */
			ignoredFields : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * if set to true, the SemanticObjectController will retrieve all navigation targets once in order to initially deactivate links for which no targets exist.
			 * @since 1.28.0
			 */
			prefetchNavigationTargets : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Map containing the relations between fields and their semantic object.
			 * @since 1.28.0
			 */
			fieldSemanticObjectMap : {type : "object", group : "Misc", defaultValue : null},
	
			/**
			 * The entity set name. If this name is not set, the SemanticObjectController tries to retrieve the name from a parent.
			 * 
			 * Note that this is not a dynamic UI5 property
			 * @since 1.28.0
			 */
			entitySet : {type : "string", group : "Misc", defaultValue : null}
		},
		events : {
	
			/**
			 * Event is triggered after navigation targets for a semantic object have been retrieved. Event can be used to change the navigation targets.
			 * @since 1.28.0
			 */
			navigationTargetsObtained : {}, 
	
			/**
			 * Event is fired before the semantic object navigation popup opens and before navigation targets are getting retrieved. Event can be used to set the required business attributes.
			 * @since 1.28.0
			 */
			beforePopoverOpens : {}, 
	
			/**
			 * Event is fired when an inplace navigation is triggered.
			 * @since 1.28.0
			 */
			navigate : {}, 
	
			/**
			 * Event is fired if the SemanticObjectController's prefechtNavigationTargets property is set to true and the navigation targets have been fetched successfully.
			 * @since 1.28.0
			 */
			prefetchDone : {}
		}
	}});
	
	SemanticObjectController.prototype.init = function() {
		this._proxyOnBeforePopoverOpens = jQuery.proxy(this._onBeforePopoverOpens, this);
		this._proxyOnTargetsObtained = jQuery.proxy(this._onTargetsObtained, this);
		this._proxyOnNavigate = jQuery.proxy(this._onNavigate, this);
		this._aRegisteredControls = [];
	};
	
	/**
	 * Adds the given control from the SemanticObjectControler and registers all relevant events
	 * 
	 * @param {sap.ui.comp.navpopover.SmartLink} oSemanticSmartControl the SmartLink which should be added.
	 * @public
	 */
	SemanticObjectController.prototype.registerControl = function(oSemanticSmartControl) {
		if (oSemanticSmartControl.attachBeforePopoverOpens && !oSemanticSmartControl.hasListeners("beforePopoverOpens")) {
			oSemanticSmartControl.attachBeforePopoverOpens(this._proxyOnBeforePopoverOpens);
		}
		if (oSemanticSmartControl.attachNavigationTargetsObtained && !oSemanticSmartControl.hasListeners("navigationTargetsObtained")) {
			oSemanticSmartControl.attachNavigationTargetsObtained(this._proxyOnTargetsObtained);
		}
	
		if (oSemanticSmartControl.attachInnerNavigate && !oSemanticSmartControl.hasListeners("innerNavigate")) {
			oSemanticSmartControl.attachInnerNavigate(this._proxyOnNavigate);
		}
	
		this.setIgnoredState(oSemanticSmartControl);
		this._aRegisteredControls.push(oSemanticSmartControl);
	};
	
	/**
	 * Removes the given control from the SemanticObjectControler and unregisters all relevant events
	 * 
	 * @param {sap.ui.comp.navpopover.SmartLink} oSemanticSmartControl the SmartLink which should be removed.
	 * @public
	 */
	SemanticObjectController.prototype.unregisterControl = function(oSemanticSmartControl) {
		if (oSemanticSmartControl.detachBeforePopoverOpens) {
			oSemanticSmartControl.detachBeforePopoverOpens(this._proxyOnBeforePopoverOpens);
		}
		if (oSemanticSmartControl.detachNavigationTargetsObtained) {
			oSemanticSmartControl.detachNavigationTargetsObtained(this._proxyOnTargetsObtained);
		}
	
		if (oSemanticSmartControl.detachInnerNavigate) {
			oSemanticSmartControl.detachInnerNavigate(this._proxyOnNavigate);
		}
	
		this._aRegisteredControls.pop(oSemanticSmartControl);
	};
	
	/**
	 * Eventhandler before navigation popover opens
	 * 
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onBeforePopoverOpens = function(oEvent) {
		var oParameters = oEvent.getParameters();
	
		if (this.hasListeners("beforePopoverOpens")) {
			this.fireBeforePopoverOpens({
				semanticObject: oParameters.semanticObject,
				semanticAttributes: oParameters.semanticAttributes,
				setSemanticAttributes: oParameters.setSemanticAttributes,
				setAppStateKey: oParameters.setAppStateKey,
				originalId: oParameters.originalId,
				open: oParameters.open
			});
		} else {
			oParameters.open();
		}
	};
	
	/**
	 * Eventhandler after navigation targets have been retrieved.
	 * 
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onTargetsObtained = function(oEvent) {
		var oParameters = oEvent.getParameters();
		if (this.hasListeners("navigationTargetsObtained")) {
			var oSource = oEvent.getSource();
			this.fireNavigationTargetsObtained({
				semanticObject: oSource.getSemanticObject(),
				semanticAttributes: oSource.getSemanticAttributes(),
				actions: oParameters.actions,
				mainNavigation: oParameters.mainNavigation,
				ownNavigation: oParameters.ownNavigation,
				originalId: oParameters.originalId,
				show: oParameters.show
			});
		} else {
			oParameters.show();
		}
	};
	
	/**
	 * Eventhandler after navigation has been triggered.
	 * 
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onNavigate = function(oEvent) {
		var oParameters = oEvent.getParameters();
		this.fireNavigate({
			text: oParameters.text,
			href: oParameters.href,
			originalId: oParameters.originalId,
			semanticObject: oParameters.semanticObject,
			semanticAttributes: oParameters.semanticAttributes
		});
	};
	
	/**
	 * Checks if the given SmartLink should be enabled or disabled and sets the state
	 * 
	 * @param {sap.ui.comp.navpopover.SmartLink} oSmartLink the SmartLink which should be enabled or disabled.
	 * @public
	 */
	SemanticObjectController.prototype.setIgnoredState = function(oSmartLink) {
		var bIsIgnored = this._fieldIsIgnored(oSmartLink.getFieldName()) || !this._linkIsAvailable(oSmartLink.getSemanticObject());
		oSmartLink.setIgnoreLinkRendering(bIsIgnored);
	};
	
	/**
	 * Checks if the given fieldname is within the ignored list
	 * 
	 * @param {string} sFieldName the fieldname.
	 * @returns {boolean} true if the field is ignored
	 * @private
	 */
	SemanticObjectController.prototype._fieldIsIgnored = function(sFieldName) {
		if (this._aIgnoredSegmanticObjects) {
			return this._aIgnoredSegmanticObjects.indexOf(sFieldName) > -1;
		}
		return false;
	};
	
	/**
	 * Checks if the given semantic object name has a navigation link
	 * 
	 * @param {string} sSemanticObject the SemanticObject.
	 * @returns {boolean} true if the semantic object has known navigation links
	 * @private
	 */
	SemanticObjectController.prototype._linkIsAvailable = function(sSemanticObject) {
		if (this._oAvailableLinks) {
			if (!this._oAvailableLinks[sSemanticObject]) {
				return false;
			}
		}
		return true;
	};
	
	SemanticObjectController.prototype.setIgnoredFields = function(sIgnoredFields) {
		if (sIgnoredFields) {
			this._aIgnoredSegmanticObjects = sIgnoredFields.split(",");
		} else {
			this._aIgnoredSegmanticObjects = null;
		}
	
		this.setProperty("ignoredFields", sIgnoredFields);
	
		this._evaluateEnableState();
	};
	
	SemanticObjectController.prototype.setPrefetchNavigationTargets = function(bPrefetch) {
		this.setProperty("prefetchNavigationTargets", bPrefetch);
	
		if (bPrefetch) {
			this._prefetchNavigationTargets();
		} else {
			this._oAvailableLinks = null;
			this._evaluateEnableState();
		}
	};
	
	SemanticObjectController.prototype.getFieldSemanticObjectMap = function() {
		var oMap = this.getProperty("fieldSemanticObjectMap");
		if (!oMap) {
			var sEntitySet = this.getEntitySet();
	
			if (!sEntitySet) {
				jQuery.sap.log.warning("FieldSemanticObjectMap is not set on SemanticObjectController, retrieval without EntitySet not possible");
				return null;
			}
	
			var oModel = this.getModel();
			jQuery.sap.require("sap.ui.comp.odata.MetadataAnalyser");
			var oMetadataAnalyzer = new sap.ui.comp.odata.MetadataAnalyser(oModel);
			oMap = oMetadataAnalyzer.getFieldSemanticObjectMap(sEntitySet);
	
			if (oMap) {
				this.setProperty("fieldSemanticObjectMap", oMap, true);
			}
		}
	
		return oMap;
	};
	
	SemanticObjectController.prototype.getEntitySet = function() {
		var sEntitySet = this.getProperty("entitySet");
	
		if (!sEntitySet) {
	
			var oParent = this.getParent();
			while (oParent) {
				if (oParent.getEntitySet) {
					sEntitySet = oParent.getEntitySet();
					if (sEntitySet) {
						this.setProperty("entitySet",sEntitySet, true);
						break;
					}
				}
	
				oParent = oParent.getParent();
			}
		}
	
		return sEntitySet;
	};
	
	/**
	 * Retrieves all navigation targets to identify semantic objects for which a link should be displayed
	 * 
	 * @private
	 */
	SemanticObjectController.prototype._prefetchNavigationTargets = function() {
		var fGetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
		if (!fGetService) {
			return;
		}
	
		this._oAvailableLinks = {};
		var oCrossAppNav = fGetService("CrossApplicationNavigation");
		var oURLParsing = fGetService("URLParsing");
		var oPromise = oCrossAppNav.getSemanticObjectLinks('');
	
		oPromise.fail(jQuery.proxy(function() {
			// activate links by removing empty AvailableLinks map
			this._oAvailableLinks = null;
			jQuery.sap.log.error("'getSemanticObjectLinks' failed");
			this._evaluateEnableState();
		}, this));
	
		oPromise.done(jQuery.proxy(function(aLinks) {
			var i, iLength;
			iLength = aLinks.length;
			for (i = 0; i < iLength; i++) {
				var sId = aLinks[i].intent;
				var oShellHash = oURLParsing.parseShellHash(sId);
				if (oShellHash && oShellHash.semanticObject) {
					this._addActionToSemanticObject(oShellHash.semanticObject, oShellHash.action);				
				}
			}
			this._evaluateEnableState();
			this.firePrefetchDone({
				semanticObjects: this._oAvailableLinks
			});
		}, this));
	};
	
	/**
	 * adds the given action to the action list of the given semantic object
	 * @param {string} sSemanticObject the SemanticObject.
	 * @param {string} sAction the Action.
	 *
	 * @private
	 */
	SemanticObjectController.prototype._addActionToSemanticObject = function(sSemanticObject, sAction) {
		if (!this._oAvailableLinks[sSemanticObject]){
			this._oAvailableLinks[sSemanticObject] = [];
		}
		
		this._oAvailableLinks[sSemanticObject].push(sAction);
	};
	
	/**
	 * Loops over all registered controls and evaluates if their enabled or not
	 * 
	 * @private
	 */
	SemanticObjectController.prototype._evaluateEnableState = function() {
		var i;
		var iLength = this._aRegisteredControls.length;
		for (i = 0; i < iLength; i++) {
			this.setIgnoredState(this._aRegisteredControls[i]);
		}
	};
	

	return SemanticObjectController;

}, /* bExport= */ true);

}; // end of sap/ui/comp/navpopover/SemanticObjectController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SmartLink') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.SmartLink.
jQuery.sap.declare('sap.ui.comp.navpopover.SmartLink'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SmartLink",['jquery.sap.global', 'sap/m/Link', 'sap/ui/comp/library', './NavigationPopover'],
	function(jQuery, Link, library, NavigationPopover) {
	"use strict";


	
	/**
	 * Constructor for a new navpopover/SmartLink.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The SmartLink control uses a semantic object to display a Navigation Popover for further navigation steps.
	 * @extends sap.m.Link
	 *
	 * @author Benjamin Spieler
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.SmartLink
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartLink = Link.extend("sap.ui.comp.navpopover.SmartLink", /** @lends sap.ui.comp.navpopover.SmartLink.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * The semantic object which is used to fill the navigation popover.
			 * @since 1.28.0
			 */
			semanticObject : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The semantic object controller controls events for several smartlinks. If the controller is not manually set, the SmartLink tries to find a SemanticObjectController in the parent hierarchy.
			 * @since 1.28.0
			 */
			semanticObjectController : {type : "any", group : "Misc", defaultValue : null},
	
			/**
			 * The metadata fieldname for this SmartLink.
			 * @since 1.28.0
			 */
			fieldName : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The semantic objects's display name.
			 * @since 1.28.0
			 */
			semanticObjectLabel : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Function which enables the SmartLink to create an alternative control which is displayed if no navigation targets are available.
			 * @since 1.28.0
			 */
			createControlCallback : {type : "object", group : "Misc", defaultValue : null},
	
			/**
			 * If set to false, the SmartLink will not map the field of it's on SemanticObject within the semantic attributes. This enables the usage of several SmartLinks on the same SemanticObject.
			 */
			mapFieldToSemanticObject : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * If this property is set to true, the link itself will not be rendered, instead the control provided via the innerControl aggregation or the createControlCallback property will be rendered.
			 * @since 1.28.0
			 */
			ignoreLinkRendering : {type : "boolean", group : "Misc", defaultValue : false}
		},
		aggregations : {
	
			/**
			 * Inner control which is created if SmartLink is disabled (eg. no navigation targets are available)
			 * @since 1.28.0
			 */
			innerControl : {type : "sap.ui.core.Control", multiple : false}
		},
		events : {
	
			/**
			 * Event is fired before the navigation popover opens and before navigation targets are getting retrieved. Event can be used to set the required business attributes.
			 * @since 1.28.0
			 */
			beforePopoverOpens : {}, 
	
			/**
			 * Event is fired after the navigation targets have been obtained. Event can be used to provided additional parameters for the targets.
			 * @since 1.28.0
			 */
			navigationTargetsObtained : {}, 
	
			/**
			 * Event is called when a link on the popover was clicked.
			 * @since 1.28.0
			 */
			innerNavigate : {}
		}
	}});
	
	
	SmartLink.prototype.init = function() {
		// sap.m.Link.prototype.init.call(this);
		this.attachPress(this._linkPressed);
		this.addStyleClass("sapUiCompSmartLink");
		this._oSemanticAttributes = null;
	};
	
	/**
	 * Eventhandler for link's press event
	 * 
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SmartLink.prototype._linkPressed = function(oEvent) {
		if (this._processingLinkPressed){
			return; //avoid multiple link press events while data is still fetched
		}
		
		if (this.getIgnoreLinkRendering()){
			return;	//actual link is not rendered -> ignore press event
		}
		
		this._processingLinkPressed = true;
	
		var sAppStateKey;
		this._calculateSemanticAttributes();
		
		var that = this;
		var fOpen = function() {
			that._createPopover();
	
			if (that._oSemanticAttributes) {			
				that._oPopover.setSemanticAttributes(that._oSemanticAttributes);
			}
			
			if (sAppStateKey){
				that._oPopover.setAppStateKey(sAppStateKey);
			}
	
			that._oPopover.retrieveNavTargets();
		};
	
		if (this.hasListeners("beforePopoverOpens")) {
			this.fireBeforePopoverOpens({
				semanticObject: this.getSemanticObject(),
				semanticAttributes: that._oSemanticAttributes,
				setSemanticAttributes: function(oMap) {
					that._oSemanticAttributes = oMap;
				},
				setAppStateKey: function(sKey){
					sAppStateKey = sKey;
				},
				originalId: this.getId(),
				open: fOpen
			});
		} else {
			fOpen();
		}
	};
	
	/**
	 * Eventhandler for NavigationPopover's targetObtained event, exposes event or - if not registered - directly opens the dialog
	 * 
	 * @private
	 */
	SmartLink.prototype._onTargetsObtainedOpenDialog = function() {
		var that = this;
	
		if (!this._oPopover.getMainNavigation()) { // main navigation could not be resolved, so only set link text as MainNavigation
			this._oPopover.setMainNavigation(new sap.ui.comp.navpopover.LinkData({
				text: this.getText()
			}));
		}
	
		this.fireNavigationTargetsObtained({
			actions: this._oPopover.getAvailableActions(),
			mainNavigation: this._oPopover.getMainNavigation(),
			ownNavigation: this._oPopover.getOwnNavigation(),
			semanticObject: this.getSemanticObject(),
			semanticAttributes: this.getSemanticAttributes(),
			originalId: this.getId(),
			show: function(sMainNavigationId, oMainNavigation, aAvailableActions, oExtraContent) {			
				if (sMainNavigationId != null && typeof sMainNavigationId === "string"){
					that._oPopover.setMainNavigationId(sMainNavigationId);
				} else {
					oExtraContent = aAvailableActions;
					aAvailableActions = oMainNavigation;
					oMainNavigation = sMainNavigationId;				
				}
				
				if (oMainNavigation) {
					that._oPopover.setMainNavigation(oMainNavigation);
				}
	
				if (aAvailableActions) {
					that._oPopover.removeAllAvailableActions();
					if (aAvailableActions && aAvailableActions.length) {
						var i, length = aAvailableActions.length;
						for (i = 0; i < length; i++) {
							that._oPopover.addAvailableAction(aAvailableActions[i]);
						}
					}
				}
	
				if (oExtraContent) {
					that._oPopover.setExtraContent(oExtraContent);
				}
	
				that._oPopover.show();
				that._processingLinkPressed = false;
			}
		});
	
		if (!this.hasListeners("navigationTargetsObtained")) {
			this._oPopover.show();
			this._processingLinkPressed = false;
		}
	};
	
	/**
	 * Eventhandler for NavigationPopover's navigate event, exposes event
	 * 
	 * @param {object} oEvent - the event parameters
	 * @private
	 */
	SmartLink.prototype._onInnerNavigate = function(oEvent) {
		var aParameters = oEvent.getParameters();
		this.fireInnerNavigate({
			text: aParameters.text,
			href: aParameters.href,
			originalId: this.getId(),
			semanticObject: this.getSemanticObject(),
			semanticAttributes: this.getSemanticAttributes()
		});
	};
	
	/**
	 * Creates the NavigationPopover.
	 * 
	 * @private
	 */
	SmartLink.prototype._createPopover = function() {
		if (!this._oPopover) {
			var oComponent = this._getComponent();
			this._oPopover = new NavigationPopover({
				title: this.getSemanticObjectLabel(),
				semanticObjectName: this.getSemanticObject(),
				targetsObtained: jQuery.proxy(this._onTargetsObtainedOpenDialog, this),
				navigate: jQuery.proxy(this._onInnerNavigate, this),
				component: oComponent
			});
	
			this._oPopover.setSource(this);
		}
	};
	
	/**
	 * Finds the parental component.
	 * 
	 * @private
	 * @returns {sap.ui.core.Component} the found parental component or null
	 */
	SmartLink.prototype._getComponent = function() {	
		var oParent = this.getParent();
		while (oParent) {
			
			if (oParent instanceof sap.ui.core.Component){
				return oParent;
			}
			oParent = oParent.getParent();
		}
	
		return null;
	};
	
	/**
	 * Gets the current binding context and creates a copied map where all empty and unnecessary data is deleted from.
	 * 
	 * @private
	 */
	SmartLink.prototype._calculateSemanticAttributes = function() {
		var oResult = null;
		var oContext = this.getBindingContext();
		if (oContext) {
			oResult = {};
			var oSourceObject = oContext.getObject(oContext.getPath());
			var oKey, oValue;		
			var that = this;
			var fMap;
			
			if (this.getMapFieldToSemanticObject()){  //map all available fields to their semanticObjects
				fMap = function(oKey){
					return that._mapFieldToSemanticObject(oKey);
				};
			} else {										//map all available fields to their semanticObjects excluding SmartLink's own SemanticObject
				var sSemanticObject = this.getSemanticObject();
				fMap = function(oKey){
					var sFoundSemanticObject = that._mapFieldToSemanticObject(oKey);
					if (sFoundSemanticObject === sSemanticObject){
						return oKey;
					}
					return sFoundSemanticObject;
				};
			}
	
			// copy the source object and ignore empty values / metadata
			for (oKey in oSourceObject) {
				if (oKey !== "__metadata") {
					oValue = oSourceObject[oKey];
					if (oValue) {
						oKey = fMap(oKey);
						oResult[oKey] = oValue;
					}
				}
			}
		}
	
		this._oSemanticAttributes = oResult;
	};
	
	/**
	 * Gets the semantic object calculated at the last Link press event
	 * 
	 * @returns {object} Map containing the copy of the available binding context.
	 * @public
	 */
	SmartLink.prototype.getSemanticAttributes = function() {
		if (this._oSemanticAttributes === null) {
			this._calculateSemanticAttributes();
		}
		return this._oSemanticAttributes;
	};
	
	/**
	 * Maps the given field to the corresponding semantic object if available
	 * 
	 * @param {string} oField - the field name which should be mapped to a semantic object;
	 * @returns {string} The corresponding semantic object, or if semantic object is not available, the original field.
	 * @private
	 */
	SmartLink.prototype._mapFieldToSemanticObject = function(oField) {
		var oSOController = this.getSemanticObjectController();
		if (oSOController) {
			var oMap = oSOController.getFieldSemanticObjectMap();
			if (oMap) {
				var oSemanticObject = oMap[oField];
				if (oSemanticObject) {
					return oSemanticObject;
				}
			}
		}
		return oField;
	};
	
	SmartLink.prototype.setFieldName = function(sFieldName) {
		this.setProperty("fieldName", sFieldName);
	
		var oSemanticController = this.getSemanticObjectController();
		if (oSemanticController) {
			oSemanticController.setIgnoredState(this);
		}
	};
	
	SmartLink.prototype.setSemanticObjectController = function(oController) {
		var oOldController = this.getProperty("semanticObjectController");
		if (oOldController) {
			oOldController.unregisterControl(this);
		}
	
		this.setProperty("semanticObjectController", oController, true);
	
		if (oController) {
			oController.registerControl(this);
		}
	};
	
	SmartLink.prototype.getSemanticObjectController = function() {
		var oController = this.getProperty("semanticObjectController");
	
		if (!oController) {
	
			var oParent = this.getParent();
			while (oParent) {
				if (oParent.getSemanticObjectController) {
					oController = oParent.getSemanticObjectController();
					if (oController) {
						this.setSemanticObjectController(oController);
						break;
					}
				}
	
				oParent = oParent.getParent();
			}
		}
	
		return oController;
	};
	
	/**
	 * Gets the current value assigned to the field with the SmartLink's semantic object name.
	 * 
	 * @returns {object} The semantic object's value.
	 * @public
	 */
	SmartLink.prototype.getSemanticObjectValue = function() {
		var oSemanticAttributes = this.getSemanticAttributes();
		if (oSemanticAttributes) {
			var sSemanticObjectName = this.getSemanticObject();
			return oSemanticAttributes[sSemanticObjectName];
		}
	
		return null;
	};
	
	SmartLink.prototype.setText = function(sText) {
		if (this._isRenderingInnerControl()) {
			//SmartLink renders inner control => overwrite base setText as it changes the DOM directly
			this.setProperty("text", sText, true);	
		} else {
			Link.prototype.setText.call(this, sText);
		}
	};
	
	SmartLink.prototype._isRenderingInnerControl = function() {
		return this.getIgnoreLinkRendering() && this._getInnerControl() != null;
	};
	
	/**
	 * Gets the inner control which is provided by the CreateControlCallback
	 * 
	 * @returns {sap.ui.core.Control} The control.
	 * @private
	 */
	SmartLink.prototype._getInnerControl = function() {
		var oInnerControl = this.getAggregation("innerControl");
		if (!oInnerControl) {
			var fCreate = this.getCreateControlCallback();
			if (fCreate) {
				oInnerControl = fCreate();
				this.setAggregation("innerControl", oInnerControl, true);
			}
		}
	
		return oInnerControl;
	};
	
	/**
	 * Gets the inner control's value
	 * 
	 * @returns {object} the value
	 * @public
	 */
	SmartLink.prototype.getInnerControlValue = function() {
		var oInnerControl = this._getInnerControl();
		
		if (oInnerControl && oInnerControl.getText){		
			return oInnerControl.getText();
		}
		
		if (oInnerControl && oInnerControl.getValue){		
			return oInnerControl.getValue();
		}
		
		return null;
	};
	
	/**
	 * Called before rendering
	 * 
	 */
	SmartLink.prototype.onBeforeRendering = function() {
		//if link should not be rendered, but no inner control is available, deactivate SmartLink
		if (this.getIgnoreLinkRendering() && this._getInnerControl() == null){
			this.setEnabled(false);
		} else {
			this.setEnabled(true);
		}
	
		//ensure that the semantic object controller exists
		this.getSemanticObjectController();
	};
	
	SmartLink.prototype.exit = function() {				
		this.setSemanticObjectController(null); //disconnect from SemanticObjectController	
	};
	

	return SmartLink;

}, /* bExport= */ true);

}; // end of sap/ui/comp/navpopover/SmartLink.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SmartLinkRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.navpopover.SmartLinkRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.LinkRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SmartLinkRenderer",['jquery.sap.global', 'sap/m/LinkRenderer'],
	function(jQuery, LinkRenderer) {
	"use strict";


	/**
	 * @class SmartLink renderer. 
	 * @static
	 */
	var SmartLinkRenderer = {}; // = sap.ui.core.Renderer.extend(sap.m.LinkRenderer);
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should be rendered.
	 *            
	 * @public
	 */
	SmartLinkRenderer.render = function(oRm, oControl) {
		
		if (oControl.getIgnoreLinkRendering()){
			var oReplaceControl = oControl._getInnerControl();
			
			oRm.write("<div ");
			oRm.writeControlData(oControl);		
			oRm.writeClasses();
			oRm.write(">");
			
			oRm.renderControl(oReplaceControl);				
			
			oRm.write("</div>");	
		} else {
				LinkRenderer.render.call("", oRm, oControl);
			}
	};
	

	return SmartLinkRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/navpopover/SmartLinkRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class FieldSelector renderer.
	 * @static
	 */
	var FieldSelectorRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FieldSelectorRenderer.render = function(oRm, oControl) {

		// write the HTML into the render manager
		oRm.write("<span");
		oRm.writeControlData(oControl);
		// oRm.addClass("sapUiCompFieldSelector");
		oRm.writeClasses();
		oRm.write(">"); // span element
		var oContent = oControl.getContent();
		oRm.renderControl(oContent);
		oRm.write("</span>");
	};
	

	return FieldSelectorRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.MetadataAnalyser') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Analyses the OData service metadata doc ($metadata), having SAP-Annotations,
// to resolve all properties from entities, filterable properties, etc.
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.odata.MetadataAnalyser'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/MetadataAnalyser",['jquery.sap.global', 'sap/ui/model/odata/ODataModel'],
	function(jQuery, ODataModel) {
	"use strict";


	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 * 
	 * @constructor
	 * @public
	 * @param {String} oResourceRootUri - The URL of the resource or ODataModel
	 * @author Pavan Nayak
	 */
	var MetadataAnalyser = function(oResourceRootUri) {
		if (typeof oResourceRootUri === "object") {
			this.oModel = oResourceRootUri;
		} else {
			this._sResourceRootUri = oResourceRootUri;
		}
		this._oMetadata = null;
		if (!this.oModel && this._sResourceRootUri) {
			this.oModel = new ODataModel(this._sResourceRootUri);
		}
		if (this.oModel) {
			this._oMetadata = this.oModel.getServiceMetadata();
		}
		// This doesn't work yet, so we parse the above service metadata and get the annotations manually
		// this._aAnnotations = this.oModel.getServiceAnnotations();
	
		// store schema and namespace
		if (this._oMetadata && this._oMetadata.dataServices) {
			this._oSchemaDefinition = this._oMetadata.dataServices.schema[0];
		}
	
		this.util = {
			searchForKeyValue: MetadataAnalyser.searchForKeyValue,
			searchForAndGetAllKeyValue: MetadataAnalyser.searchForAndGetAllKeyValue,
			extractMatchingValue: MetadataAnalyser.extractMatchingValue
		};
	};
	
	// TODO: should we cache all these entity fields for future access?
	// this.mFilterFields[sEntityTypeName] = aFinalFilterableFields;
	
	/**
	 * Returns the namespace from the Schema
	 * 
	 * @returns {string} the namespace
	 * @public
	 */
	MetadataAnalyser.prototype.getNamespace = function() {
		if (this._oSchemaDefinition) {
			return this._oSchemaDefinition.namespace;
		}
	};
	
	/**
	 * Gets the specified attribute (sap:annotation) value from the default entity container
	 * 
	 * @param {String} sAttribute - The name of the attribute (sap:annotation) on the entity container
	 * @returns {String} The value of the specified attribute (if found)|null
	 * @public
	 */
	MetadataAnalyser.prototype.getEntityContainerAttribute = function(sAttribute) {
		var sAttributeValue = null, oResult;
		if (this._oSchemaDefinition && this._oSchemaDefinition.entityContainer[0] && this._oSchemaDefinition.entityContainer[0].extensions) {
			oResult = this.util.searchForKeyValue(this._oSchemaDefinition.entityContainer[0].extensions, "name", sAttribute);
			if (oResult) {
				sAttributeValue = oResult.value;
			}
		}
		return sAttributeValue;
	};
	
	/**
	 * Gets the specified label for an Entity with non annotation
	 * 
	 * @param {string} sEntityType - name of the entity set
	 * @returns {string} - value of the label (if found)|null
	 * @public
	 */
	MetadataAnalyser.prototype.getEntityLabelByEntityTypeName = function(sEntityType) {
		var oEntityDef = this._getEntityDefinition(sEntityType);
		if (oEntityDef) {
			var oResult = this.util.searchForKeyValue(oEntityDef.extensions, "name", "label");
			if (oResult) {
				return oResult.value;
			}
		}
	
		return "";
	};
	
	/**
	 * Gets the entity definition for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document (with or without namespace)
	 * @returns {Object} entity definition
	 * @private
	 */
	MetadataAnalyser.prototype._getEntityDefinition = function(sEntityTypeName) {
		var oEntityDef = null;
		if (sEntityTypeName) {
			sEntityTypeName = this.removeNamespace(sEntityTypeName);
			oEntityDef = this.util.searchForKeyValue(this._oSchemaDefinition.entityType, "name", sEntityTypeName);
		}
		return oEntityDef;
	};
	
	/**
	 * Removes the namespace from the specified string
	 * 
	 * @param {string} sString	String
	 * @returns {string} String without name space. If no name space was found, the original string will be returned.
	 * @public
	 */
	MetadataAnalyser.prototype.removeNamespace = function(sString) {
		var sNamespace, sResult;
	
		sNamespace = this.getNamespace();
		if (sString && (sString.indexOf(sNamespace + ".") === 0)) {
			sResult = sString.substring(sNamespace.length + 1);
		} else {
			sResult = sString;
		}
		return sResult;
	};
	
	/**
	 * Gets the entity type from the Entity name (EntitySet name)
	 * 
	 * @param {string} sEntitySetName - The entity name
	 * @returns {string} The entity type
	 * @private
	 */
	MetadataAnalyser.prototype.getEntityTypeNameFromEntitySetName = function(sEntitySetName) {
		var oEntitySet = null, sEntityTypeName = null;
		if (this._oSchemaDefinition && this._oSchemaDefinition.entityContainer && this._oSchemaDefinition.entityContainer[0] && this._oSchemaDefinition.entityContainer[0].entitySet) {
			oEntitySet = this.util.searchForKeyValue(this._oSchemaDefinition.entityContainer[0].entitySet, "name", sEntitySetName);
			if (oEntitySet) {
				sEntityTypeName = oEntitySet.entityType;
			}
		}
		return sEntityTypeName;
	};
	
	/**
	 * Gets the entity set from the Entity Type name (EntityType name)
	 * 
	 * @param {string} sEntityTypeName - The entity name
	 * @returns {string} The entitySet name
	 * @private
	 */
	MetadataAnalyser.prototype.getEntitySetNameFromEntityTypeName = function(sEntityTypeName) {
		var oEntityType, oEntitySet;
		// get entity type
		if (this._oSchemaDefinition && this._oSchemaDefinition.entityType) {
			oEntityType = this.util.searchForKeyValue(this._oSchemaDefinition.entityType, "name", sEntityTypeName);
			if (oEntityType) {
				// get entity set name
				oEntitySet = this.util.searchForKeyValue(this._oSchemaDefinition.entityContainer[0].entitySet, "entityType", oEntityType.entityType);
				if (oEntitySet) {
					return oEntitySet.name;
				}
			}
		}
	
		return null;
	};
	
	/**
	 * Gets the semantics from specified EntitySet Name
	 * 
	 * @private
	 * @param {string} sEntitySetName Entity set name
	 * @returns {string} the semantics of the Entity Set
	 */
	MetadataAnalyser.prototype._getEntitySetSemantics = function(sEntitySetName) {
		var oEntitySet = null, oResult, sSemantics = null;
		if (this._oSchemaDefinition && this._oSchemaDefinition.entityContainer && this._oSchemaDefinition.entityContainer[0] && this._oSchemaDefinition.entityContainer[0].entitySet) {
			oEntitySet = this.util.searchForKeyValue(this._oSchemaDefinition.entityContainer[0].entitySet, "name", sEntitySetName);
			if (oEntitySet) {
				oResult = this.util.searchForKeyValue(oEntitySet.extensions, "name", "semantics");
				if (oResult) {
					sSemantics = oResult.value;
				}
			}
		}
		return sSemantics;
	};
	
	/**
	 * Gets a collection of keys (field names) for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Array} Array of key names
	 * @public
	 */
	MetadataAnalyser.prototype.getKeysByEntitySetName = function(sEntitySetName) {
		var aKeys = null, sEntityTypeName = null;
		if (!this._oMetadata) {
			return undefined;
		}
		sEntityTypeName = this.getEntityTypeNameFromEntitySetName(sEntitySetName);
		if (sEntityTypeName) {
			aKeys = this.getKeysByEntityTypeName(sEntityTypeName);
		}
		return aKeys;
	};
	
	/**
	 * Gets a collection keys (field names) for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of key names
	 * @public
	 */
	MetadataAnalyser.prototype.getKeysByEntityTypeName = function(sEntityTypeName) {
		var aKeys = null, aPropertyRefs = null, iLen = 0, oEntityDef = null;
		if (!this._oMetadata) {
			return undefined;
		}
		oEntityDef = this._getEntityDefinition(sEntityTypeName);
		if (oEntityDef) {
			if (oEntityDef.key) {
				aPropertyRefs = oEntityDef.key.propertyRef;
				if (aPropertyRefs) {
					iLen = aPropertyRefs.length;
					aKeys = [];
					while (iLen--) {
						aKeys.push(aPropertyRefs[iLen].name);
					}
					aKeys = aKeys.reverse();
				}
			}
		}
		return aKeys;
	};
	
	/**
	 * Gets a collection of fields for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Array} Array of fields
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldsByEntitySetName = function(sEntitySetName) {
		var aFields = null, sEntityTypeName = null;
		if (!this._oMetadata) {
			return undefined;
		}
		sEntityTypeName = this.getEntityTypeNameFromEntitySetName(sEntitySetName);
		if (sEntityTypeName) {
			aFields = this.getFieldsByEntityTypeName(sEntityTypeName);
		}
		return aFields;
	};
	
	/**
	 * Gets a collection fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of fields
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldsByEntityTypeName = function(sEntityTypeName) {
		var oEntityDef;
		if (!this._oMetadata) {
			return undefined;
		}
		oEntityDef = this._getEntityDefinition(sEntityTypeName);
		return this._getFieldsByEntityDefinition(oEntityDef);
	};
	
	/**
	 * Gets a map with fields and their related semantic objects
	 * 
	 * @param {String} sEntitySetName - The entity set for which the map should be returned
	 * @returns {object} map between fields and semantic objects
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldSemanticObjectMap = function(sEntitySetName) {
		var oMap = {};
		var aODataFieldMetadata = this.getFieldsByEntitySetName(sEntitySetName);
		var i, iLen = aODataFieldMetadata.length;
		for (i = 0; i < iLen; i++) {
			var oField = aODataFieldMetadata[i];
			var mAnnotation = this.getSemanticObjectAnnotation(oField.fullName);
			if (mAnnotation && mAnnotation.semanticObject) {
				oMap[oField.name] = mAnnotation.semanticObject;
			}
		}
	
		return oMap;
	};
	
	/**
	 * Gets a collection fields for the specified entity definition
	 * 
	 * @param {Object} oEntityDef - The entity definition as specified in the metadata document
	 * @returns {Array} Array of fields
	 */
	MetadataAnalyser.prototype._getFieldsByEntityDefinition = function(oEntityDef) {
		var aFields = null, iLen = 0, oProperty, mResult, oResult;
		if (oEntityDef) {
			aFields = oEntityDef.property;
		}
		// Enrich the fields with necessary information as an attribute (easy access)
		if (aFields) {
			iLen = aFields.length;
			while (iLen--) {
				oProperty = aFields[iLen];
				mResult = this.util.extractMatchingValue(oProperty.extensions, "name", [
					"label", "quickinfo", "display-format", "aggregation-role", "unit", "semantics", "sortable", "filterable", "required-in-filter", "filter-restriction", "visible"
				]);
				if (mResult) {
					oResult = mResult["label"];
					if (oResult) {
						oProperty.fieldLabel = oResult.value;
					}
					oResult = mResult["quickinfo"];
					if (oResult) {
						oProperty.quickInfo = oResult.value;
					}
					oResult = mResult["display-format"];
					if (oResult) {
						oProperty.displayFormat = oResult.value;
					}
					oResult = mResult["aggregation-role"];
					if (oResult) {
						oProperty.aggregationRole = oResult.value;
					}
					oResult = mResult["unit"];
					if (oResult) {
						oProperty.unit = oResult.value;
					}
					oResult = mResult["semantics"];
					if (oResult) {
						oProperty.semantics = oResult.value;
					}
					oResult = mResult["filter-restriction"];
					if (oResult) {
						oProperty.filterRestriction = oResult.value;
					}
					// Set filterable and sortable attributes on the field
					oResult = mResult["sortable"];
					oProperty.sortable = oResult ? oResult.value !== "false" : true;
	
					oResult = mResult["filterable"];
					oProperty.filterable = oResult ? oResult.value !== "false" : true;
	
					oResult = mResult["required-in-filter"];
					oProperty.requiredField = oResult ? oResult.value === "true" : false;
	
					// Set the visible attribute on the field
					oResult = mResult["visible"];
					oProperty.visible = oResult ? oResult.value !== "false" : true;
					oProperty.entityName = oEntityDef.name;
					oProperty.fullName = this._getFullyQualifiedNameForField(oProperty.name, oEntityDef.name);
				}
			}
		}
		return aFields;
	};
	
	/**
	 * Gets a collection of all possible filterable fields for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Array} Array of overall filterable fields
	 * @public
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldsByEntitySetName = function(sEntitySetName) {
		var aFilterGroups = [], sEntityTypeName = null;
		if (!this._oMetadata) {
			return undefined;
		}
		sEntityTypeName = this.getEntityTypeNameFromEntitySetName(sEntitySetName);
		if (sEntityTypeName) {
			aFilterGroups = this.getAllFilterableFieldsByEntityTypeName(sEntityTypeName);
		}
		return aFilterGroups;
	};
	
	/**
	 * Gets a an Array of the names of all possible filterable fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of names of overall filterable fields
	 * @public
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldNamesByEntityTypeName = function(sEntityTypeName) {
		var aGroup, i, groupLength, j, fieldLength, aResult, oGroup;
	
		aResult = [];
		aGroup = this.getAllFilterableFieldsByEntityTypeName(sEntityTypeName);
		if (aGroup && aGroup.length) {
			groupLength = aGroup.length;
			for (i = 0; i < groupLength; i++) {
				oGroup = aGroup[i];
				if (oGroup.fields && oGroup.fields.length) {
					fieldLength = oGroup.fields.length;
					for (j = 0; j < fieldLength; j++) {
						aResult.push(oGroup.fields[j].name);
					}
				}
			}
		}
		return aResult;
	};
	
	/**
	 * Gets a collection of all possible filterable fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of overall filterable fields
	 * @public
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldsByEntityTypeName = function(sEntityTypeName) {
		var aFilterGroups = [], oEntityDef = null, aAssociations = null, iLen = 0, sSubEntityType = null;
		if (!this._oMetadata) {
			return undefined;
		}
		oEntityDef = this._getEntityDefinition(sEntityTypeName);
		if (oEntityDef) {
			// filterable fields from the main entity
			aFilterGroups.push(this._getFilterableFieldsFromEntityDefinition(oEntityDef));
	
			// filterable fields from associations which have 0..1 or 1 cardinality
			aAssociations = this._getFilterableAssociations(oEntityDef);
			iLen = aAssociations.length;
			while (iLen--) {
				sSubEntityType = aAssociations[iLen];
				oEntityDef = this._getEntityDefinition(sSubEntityType);
				aFilterGroups.push(this._getFilterableFieldsFromEntityDefinition(oEntityDef));
			}
		}
		return aFilterGroups;
	};
	
	/**
	 * Gets an Object containing collection of filterable fields that are directly under the specified entity type
	 * 
	 * @param {Object} oEntityDef - The entity type definition from the metadata document
	 * @returns {Object} Object containing array of filterable fields
	 * @private
	 */
	MetadataAnalyser.prototype._getFilterableFieldsFromEntityDefinition = function(oEntityDef) {
		var oFilterData = {}, aFields = [], aProperties = null, oProperty = null, i, iLen, oProp;
		if (!this._oMetadata || !oEntityDef) {
			return undefined;
		}
		// Set the name and label from entity into the field's group
		oProp = this.util.searchForKeyValue(oEntityDef.extensions, "name", "label");
		if (oProp) {
			oFilterData.groupLabel = oProp.value;
		}
		oFilterData.groupName = oEntityDef.name;
	
		aProperties = this._getFieldsByEntityDefinition(oEntityDef);
		iLen = aProperties.length;
	
		// Extract only filterable fields from all fields!
		for (i = 0; i < iLen; i++) {
			oProperty = aProperties[i];
			if (oProperty.filterable) {
				aFields.push(oProperty);
			}
		}
	
		oFilterData.fields = aFields;
		return oFilterData;
	};
	
	/**
	 * Returns the fully qualified name of a field which is e.g. "com.sap.GL.ZAF.GL_ACCOUNT/CompanyCode". Schema namespace, entity type name and field
	 * name.
	 * 
	 * @param {string} sFieldName - the name of the field/property
	 * @param {string} sEntityTypeName - the entity Type name under which the field/property is present
	 * @returns {string} - the fully qualified name
	 * @private
	 */
	MetadataAnalyser.prototype._getFullyQualifiedNameForField = function(sFieldName, sEntityTypeName) {
		var sNamespace, sResult;
		sNamespace = this.getNamespace();
		if (sNamespace) {
			sResult = sNamespace + "." + sEntityTypeName + "/" + sFieldName;
		} else {
			sResult = sEntityTypeName + "/" + sFieldName;
		}
		return sResult;
	};
	
	/**
	 * @param {string} sFullyQualifiedFieldName	Fully qualified name
	 * @returns {string} The field name without name space and without entity
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldNameByFullyQualifiedFieldName = function(sFullyQualifiedFieldName) {
		var sResult, nPos;
	
		sResult = this.removeNamespace(sFullyQualifiedFieldName);
		nPos = sResult.indexOf("/");
		sResult = sResult.substring(nPos + 1);
		return sResult;
	};
	
	/**
	 * Gets a collection of filterable associations under the specified entity type
	 * 
	 * @param {Object} oEntityDef - The entity type definition from the metadata document
	 * @returns {Array} Array of filterable associations
	 * @private
	 */
	MetadataAnalyser.prototype._getFilterableAssociations = function(oEntityDef) {
		var sNamespace, aFilterableAssociations = [], sRelationship = null, aNavigationProperties = null, oNavigationProperty = null;
		var iLen = 0, oAssociationDef = null, oToRoleDef = null;
		if (!this._oMetadata || !oEntityDef) {
			return undefined;
		}
		sNamespace = this.getNamespace();
		aNavigationProperties = oEntityDef.navigationProperty;
		if (aNavigationProperties && aNavigationProperties.length) {
			iLen = aNavigationProperties.length;
			while (iLen--) {
				oNavigationProperty = aNavigationProperties[iLen];
	
				// get the related association definition and the role specific definitions
				sRelationship = oNavigationProperty.relationship;
				if (sRelationship.indexOf(sNamespace + ".") === 0) {
					sRelationship = sRelationship.substring(sNamespace.length + 1);
				}
				oAssociationDef = this.util.searchForKeyValue(this._oSchemaDefinition.association, "name", sRelationship);
				if (!oAssociationDef) {
					continue;
				}
	
				// get the ToRole of the association definition
				oToRoleDef = this.util.searchForKeyValue(oAssociationDef.end, "role", oNavigationProperty.toRole);
				if (!oToRoleDef) {
					continue;
				}
	
				// check if the navigation property has cardinality 0..1 or 1
				if (oToRoleDef.multiplicity === "1" || oToRoleDef.multiplicity === "0..1") {
					aFilterableAssociations.push(oToRoleDef.type);
				}
			}
		}
		return aFilterableAssociations;
	};
	
	/**
	 * Retrieves the ValueList Annotation for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {Object} a Map of resolved ValueHelpList (if any) annotations
	 * @public
	 */
	MetadataAnalyser.prototype.getValueListAnnotation = function(sPath) {
		var mAnnotation = {
			additionalAnnotations: []
		}, aAnnotations, oAnnotations, oResolvedAnnotation, iLen = 0, i = 0, sParentFieldName = null;
		if (this._oSchemaDefinition && this._oSchemaDefinition.annotations) {
			// Get all matching annotations
			aAnnotations = this.util.searchForAndGetAllKeyValue(this._oSchemaDefinition.annotations, "target", sPath);
			sParentFieldName = this.getFieldNameByFullyQualifiedFieldName(sPath);
			if (aAnnotations) {
				iLen = aAnnotations.length;
				for (i = 0; i < iLen; i++) {
					oAnnotations = aAnnotations[i];
					// Check if term is correct
					if (oAnnotations && oAnnotations.annotation) {
						oResolvedAnnotation = this.util.searchForKeyValue(oAnnotations.annotation, "term", "com.sap.vocabularies.Common.v1.ValueList");
						if (oResolvedAnnotation) {
							this._enrichValueHelpAnnotation(oResolvedAnnotation, sParentFieldName);
							// Check if there is no qualifier --> the default/primaryValueListAnnotation
							if (!oAnnotations.qualifier && !mAnnotation.primaryValueListAnnotation) {
								mAnnotation.primaryValueListAnnotation = oResolvedAnnotation;
							} else {
								// Set the qualifier on the resolved annotation
								oResolvedAnnotation.qualifier = oAnnotations.qualifier;
								mAnnotation.additionalAnnotations.push(oResolvedAnnotation);
							}
						}
					}
				}
			}
		}
		return mAnnotation;
	};
	
	/**
	 * Retrieves the SemanticObject Annotation for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {Object} the resolved semanticObject annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getSemanticObjectAnnotation = function(sPath) {
		var aAnnotations, oAnnotations, oResolvedAnnotation, iLen = 0, i = 0, oResult;
		if (this._oSchemaDefinition && this._oSchemaDefinition.annotations) {
			// Get all matching annotations
			aAnnotations = this.util.searchForAndGetAllKeyValue(this._oSchemaDefinition.annotations, "target", sPath);
			if (aAnnotations) {
				iLen = aAnnotations.length;
				for (i = 0; i < iLen; i++) {
					oAnnotations = aAnnotations[i];
					// Check if term is correct
					if (oAnnotations && oAnnotations.annotation) {
						oResolvedAnnotation = this.util.searchForKeyValue(oAnnotations.annotation, "term", "com.sap.vocabularies.Common.v1.SemanticObject");
						if (oResolvedAnnotation) {
							oResult = this.util.searchForKeyValue(oResolvedAnnotation.extensions, "name", "String");
							if (oResult) {
								oResolvedAnnotation.semanticObject = oResult.value;
								break;
							}
						}
					}
				}
			}
		}
		return oResolvedAnnotation;
	};
	
	/**
	 * Enriches the provided Value Help annotation with key and other relevant information
	 * 
	 * @param {object} oAnnotation	Annotation object
	 * @param {string} sParentFieldName - the parent field name
	 * @private
	 */
	MetadataAnalyser.prototype._enrichValueHelpAnnotation = function(oAnnotation, sParentFieldName) {
		var mResult, oResult, aKeys = [], sKey, mInParams = {}, mOutParams = {}, bIsInParam, bIsOutParam, aFields = [], aValueListFields = [], aRecords, oProperty, sValueListProperty, sLocalDataProperty, oParam, iLen = 0, i = 0, iFieldLen = 0;
		if (oAnnotation && oAnnotation.record) {
			mResult = this.util.extractMatchingValue(oAnnotation.record.propertyValue, "property", [
				"CollectionPath", "Label", "SearchSupported", "Parameters"
			]);
			if (mResult) {
				oResult = mResult["SearchSupported"];
				oAnnotation.isSearchSupported = oResult ? oResult.bool === "true" : false;
				oResult = mResult["CollectionPath"];
				// Set the CollectionPath on the annotation
				if (oResult) {
					oAnnotation.valueListEntitySetName = oResult.string;
					oAnnotation.valueListEntityName = this.removeNamespace(this.getEntityTypeNameFromEntitySetName(oAnnotation.valueListEntitySetName));
					oAnnotation.semantics = this._getEntitySetSemantics(oAnnotation.valueListEntitySetName);
					aKeys = this.getKeysByEntityTypeName(oAnnotation.valueListEntityName);
					aFields = this.getFieldsByEntityTypeName(oAnnotation.valueListEntityName);
				}
	
				oResult = mResult["Label"];
				// Set the valueListTitle on the annotation
				if (oResult) {
					oAnnotation.valueListTitle = oResult.string;
				}
	
				// Get all the params to create mappings, fields, key etc
				oResult = mResult["Parameters"];
				if (aFields && oResult && oResult.collection) {
					aRecords = oResult.collection.record;
					iLen = aRecords.length;
				}
				// Loop through all the parameters/records
				for (i = 0; i < iLen; i++) {
					oParam = aRecords[i];
					sValueListProperty = undefined;
					sLocalDataProperty = undefined;
					// Each Parameter on the VL annotation has max 2 properties:
					// LocalDataProperty - Path to the property on the local entity that triggered the ValueList
					// ValueListProperty - Path to property in on the ValueList entity
					mResult = this.util.extractMatchingValue(oParam.propertyValue, "property", [
						"ValueListProperty", "LocalDataProperty"
					]);
					oProperty = mResult["ValueListProperty"];
					if (oProperty) {
						sValueListProperty = oProperty.string;
					}
					oProperty = mResult["LocalDataProperty"];
					if (oProperty) {
						sLocalDataProperty = oProperty.propertyPath;
					}
	
					bIsInParam = false;
					if (oParam.type === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || oParam.type === "com.sap.vocabularies.Common.v1.ValueListParameterIn") {
						bIsInParam = true;
					}
					bIsOutParam = false;
					if (oParam.type === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || oParam.type === "com.sap.vocabularies.Common.v1.ValueListParameterOut") {
						bIsOutParam = true;
					}
	
					// Mapping for In/InOut params
					if (bIsInParam) {
						mInParams[sLocalDataProperty] = sValueListProperty;
					}
	
					// Mapping for Out/InOut params
					if (bIsOutParam) {
						mOutParams[sLocalDataProperty] = sValueListProperty;
					}
	
					// For sFin/gateway; this apparently should form the columns/fields in the list!
					if (bIsOutParam || oParam.type === "com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly") {
						iFieldLen = aFields.length;
						while (iFieldLen--) {
							if (aFields[iFieldLen].name === sValueListProperty) {
								aValueListFields.push(aFields[iFieldLen]);
								break;
							}
						}
					}
					// The 1st InOut/Out param having the parent field as LocalDataProperty; should be the Key!
					if (!sKey && bIsOutParam && sLocalDataProperty === sParentFieldName) {
						sKey = sValueListProperty;
					}
				}
			}
			// Set the mappings, fields, keys, return key and corresponding description on the annotation
			oAnnotation.inParams = mInParams;
			oAnnotation.outParams = mOutParams;
			oAnnotation.fields = aFields;
			oAnnotation.valueListFields = aValueListFields;
			oAnnotation.keys = aKeys;
			oAnnotation.keyField = sKey;
			oAnnotation.descriptionField = this.getDescriptionFieldName(oAnnotation.keyField, oAnnotation.valueListEntitySetName);
		}
	};
	
	/**
	 * Gets the human readable text/description field's name from the specified Key field's name and entity name
	 * 
	 * @param {string|object} sKeyField - the name of the key field / oField - the field as present in the OData metadata
	 * @param {string} sEntityName - the name of the entity (required if the name of the field is passed as the 1st param)
	 * @returns {string} the description field name, if any
	 * @public
	 */
	MetadataAnalyser.prototype.getDescriptionFieldName = function(sKeyField, sEntityName) {
		var aFields, i = 0, iLength, oField, oResult, sDescriptionField;
		if (typeof sKeyField === "object") {
			oField = sKeyField;
		} else {
			aFields = this.getFieldsByEntitySetName(sEntityName);
			if (aFields) {
				iLength = aFields.length;
				for (i = 0; i < iLength; i++) {
					oField = aFields[i];
					if (oField.name === sKeyField) {
						// Found the specified field, exit loop
						break;
					}
				}
			}
		}
		if (oField) {
			oResult = this.util.searchForKeyValue(oField.extensions, "name", "text");
			if (oResult) {
				sDescriptionField = oResult.value;
			}
		}
		return sDescriptionField;
	};
	
	/**
	 * Returns whether Search query is supported for this value help annotation
	 * 
	 * @param {object} oAnnotation - ValueHelpAnnotation
	 * @returns {boolean} whether search query is supported
	 * @public
	 */
	MetadataAnalyser.prototype.getIsSearchSupported = function(oAnnotation) {
		var bIsSearchSupported, oProperty;
		bIsSearchSupported = false;
	
		if (oAnnotation && oAnnotation.record && oAnnotation.record.propertyValue) {
			oProperty = this.util.searchForKeyValue(oAnnotation.record.propertyValue, "property", "SearchSupported");
			if (oProperty && oProperty.bool === "true") {
				bIsSearchSupported = true;
			}
		}
	
		return bIsSearchSupported;
	};
	
	/**
	 * Retrieves the LineItem Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved LineItem annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getLineItemAnnotation = function(sPath) {
		var aAnnotations, oAnnotations, oResolvedAnnotation, iLen = 0, i = 0;
		if (this._oSchemaDefinition && this._oSchemaDefinition.annotations) {
			// Resolve the path
			sPath = this._getFullyQualifiedNameForEntity(sPath);
			// Get the matching annotations for the path
			aAnnotations = this.util.searchForAndGetAllKeyValue(this._oSchemaDefinition.annotations, "target", sPath);
			if (aAnnotations) {
				iLen = aAnnotations.length;
				for (i = 0; i < iLen; i++) {
					oAnnotations = aAnnotations[i];
					// Check if term is correct --> LineItem
					if (oAnnotations && oAnnotations.annotation) {
						oResolvedAnnotation = this.util.searchForKeyValue(oAnnotations.annotation, "term", "com.sap.vocabularies.UI.v1.LineItem");
						if (oResolvedAnnotation) {
							break;
						}
					}
				}
			}
			// Resolve the annotation data into easily accessible properties
			if (oResolvedAnnotation && oResolvedAnnotation.collection) {
				this._enrichAnnotationWithUIDataField(oResolvedAnnotation, oResolvedAnnotation.collection.record);
			}
		}
		return oResolvedAnnotation;
	};
	
	/**
	 * Retrieves an array of FieldGroup Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the entity type name -or- the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved array of FieldGroup annotations (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldGroupAnnotation = function(sPath) {
		var aAnnotations, oAnnotations, oAnnotation, mResult, oResult, aResolvedAnnotation, iLen = 0, i = 0;
		if (this._oSchemaDefinition && this._oSchemaDefinition.annotations) {
			// Resolve the path
			sPath = this._getFullyQualifiedNameForEntity(sPath);
			// Get the matching annotations for the path
			aAnnotations = this.util.searchForAndGetAllKeyValue(this._oSchemaDefinition.annotations, "target", sPath);
			if (aAnnotations) {
				iLen = aAnnotations.length;
				for (i = 0; i < iLen; i++) {
					oAnnotations = aAnnotations[i];
					// Check if term is correct --> FieldGroup
					if (oAnnotations && oAnnotations.annotation) {
						aResolvedAnnotation = this.util.searchForAndGetAllKeyValue(oAnnotations.annotation, "term", "com.sap.vocabularies.UI.v1.FieldGroup");
						if (aResolvedAnnotation) {
							break;
						}
					}
				}
			}
			// Resolve the annotation data into easily accessible properties
			if (aResolvedAnnotation) {
				iLen = aResolvedAnnotation.length;
				for (i = 0; i < iLen; i++) {
					oAnnotation = aResolvedAnnotation[i];
					// Set the groupName of the annotation
					oResult = this.util.searchForKeyValue(oAnnotation.extensions, "name", "Qualifier");
					if (oResult) {
						oAnnotation.groupName = oResult.value;
					}
					if (oAnnotation && oAnnotation.record && oAnnotation.record.propertyValue) {
						mResult = this.util.extractMatchingValue(oAnnotation.record.propertyValue, "property", [
							"Label", "Data"
						]);
						// Get the label for the group
						oResult = mResult["Label"];
						if (oResult) {
							// Assign the groupLabel to the annotation if it exists
							oAnnotation.groupLabel = oResult.string;
						}
						// Get the collection of UI fields
						oResult = mResult["Data"];
						if (oResult && oResult.collection) {
							this._enrichAnnotationWithUIDataField(oAnnotation, oResult.collection.record);
						}
					}
				}
			}
		}
		return aResolvedAnnotation;
	};
	
	/**
	 * Enriches the provided FieldGroup/LineItem annotation with UI.DataField attributes
	 * 
	 * @param {object} oAnnotation - the annotation that would be enriched
	 * @param {Array} aRecords - array of params having UI.DataField
	 * @private
	 */
	MetadataAnalyser.prototype._enrichAnnotationWithUIDataField = function(oAnnotation, aRecords) {
		var aFields = [], mLabels = {}, mResult, oProperty, sField, oParam, iLen = 0, i = 0;
		if (aRecords) {
			iLen = aRecords.length;
			aFields = [];
			mLabels = {};
			for (i = 0; i < iLen; i++) {
				oParam = aRecords[i];
				// Check if term is correct (TODO: Should be only "com.sap.vocabularies.UI.v1.DataField")
				if (oParam && (oParam.type === "UI.DataField" || oParam.type === "com.sap.vocabularies.UI.v1.DataField")) {
					sField = null;
					mResult = this.util.extractMatchingValue(oParam.propertyValue, "property", [
						"Value", "Label"
					]);
					oProperty = mResult["Value"];
					if (oProperty) {
						sField = oProperty.path;
						aFields.push(sField);
					}
					if (sField) {
						oProperty = mResult["Label"];
						if (oProperty && oProperty.string) {
							mLabels[sField] = oProperty.string;
						}
					}
				}
			}
	
			// Assign the resolved fields and labels to the annotation
			oAnnotation.fields = aFields;
			oAnnotation.labels = mLabels;
	
		}
	
	};
	
	/**
	 * Returns the fully qualified name of an entity which is e.g. "com.sap.GL.ZAF.GL_ACCOUNT" from the specified type name.
	 * 
	 * @param {string} sEntityTypeName - the entity Type name which needs to be converted
	 * @returns {string} - the fully qualified name for this entity
	 * @private
	 */
	MetadataAnalyser.prototype._getFullyQualifiedNameForEntity = function(sEntityTypeName) {
		var sNamespace, sResult;
		if (!sEntityTypeName) {
			return undefined;
		}
		sNamespace = this.getNamespace();
		if (sNamespace && !(sEntityTypeName.indexOf(sNamespace) > -1)) {
			sResult = sNamespace + "." + sEntityTypeName;
		} else {
			sResult = sEntityTypeName;
		}
		return sResult;
	};
	
	/**
	 * Search for and extract the first matching object values, for the specified key and search array, from the object array
	 * 
	 * @param {Object} aObjectArray - The array to search in
	 * @param {String} sKey - The key to search with
	 * @param {String} aSearchArray - Array of strings containing values that should be matched
	 * @returns {Object} - Map of objects with first match, if any
	 * @private
	 */
	MetadataAnalyser.extractMatchingValue = function(aObjectArray, sKey, aSearchArray) {
		var oResult = null, oObject, i, iLength, iSearchArrayLength;
		if (aObjectArray && aSearchArray) {
			iLength = aObjectArray.length;
			iSearchArrayLength = aSearchArray.length;
			oResult = {};
			for (i = 0; i < iLength; i++) {
				oObject = aObjectArray[i];
				if (aSearchArray.indexOf(oObject[sKey]) > -1) {
					if (!oResult[oObject[sKey]]) {
						oResult[oObject[sKey]] = oObject;
						iSearchArrayLength--;
					}
				}
				if (iSearchArrayLength === 0) {
					break;
				}
			}
		}
		return oResult;
	};
	
	/**
	 * Search for and return the first matching object, with the specified key and value, from the array
	 * 
	 * @param {Object} aObjectArray - The array to search in
	 * @param {String} sKey - The key to search with
	 * @param {String} sValue - The value to match with
	 * @returns {Object} - The first matching Object if any
	 * @private
	 */
	MetadataAnalyser.searchForKeyValue = function(aObjectArray, sKey, sValue) {
		var aResult = null, oResult = null;
		aResult = MetadataAnalyser.searchForAndGetAllKeyValue(aObjectArray, sKey, sValue);
		if (aResult && aResult.length) {
			oResult = aResult[0];
		}
		return oResult;
	};
	
	/**
	 * Search for and return all the matching objects, with the specified key and value, from the array
	 * 
	 * @param {Object} aObjectArray - The array to search in
	 * @param {String} sKey - The key to search with
	 * @param {String} sValue - The value to match with
	 * @returns {Array} - array of all the matching objects
	 * @private
	 */
	MetadataAnalyser.searchForAndGetAllKeyValue = function(aObjectArray, sKey, sValue) {
		var aResult = null;
		if (aObjectArray) {
			aResult = jQuery.grep(aObjectArray, function(a) {
				return a[sKey] === sValue;
			});
		}
		return aResult;
	};
	
	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	MetadataAnalyser.prototype.destroy = function() {
		this.oModel = null;
		this._oMetadata = null;
		this._oSchemaDefinition = null;
		this._sResourceRootUri = null;
		this.util = null;
		this.bIsDestroyed = true;
	};
	

	return MetadataAnalyser;

}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/MetadataAnalyser.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.Util') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * @namespace Provides utitlity functions for the personalization dialog
 * @name sap.ui.comp.personalization.Util
 * @author SAP SE
 * @version 1.28.1
 * @private
 * @since 1.25.0
 */
jQuery.sap.declare('sap.ui.comp.personalization.Util'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/Util",[
	'sap/ui/base/Object'
], function(BaseObject) {
	"use strict";
	var Util = {

		copy: function(oObject) {
			if (oObject instanceof Array) {
				return jQuery.extend(true, [], oObject);
			}
			return jQuery.extend(true, {}, oObject);
		},

		sort: function(sKeyName, aArray) {
			var aResult = this.copy(aArray);
			aResult.sort(function(a, b) {
				var aText = a[sKeyName].toLocaleLowerCase();
				var bText = b[sKeyName].toLocaleLowerCase();

				if (aText < bText) {
					return -1;
				}
				if (aText > bText) {
					return 1;
				}
				// a must be equal to b
				return 0;
			});
			return aResult;
		},

		semanticEqual: function(oItemA, oItemB) {
			if (!oItemA || !oItemB) {
				return false;
			}
			for ( var property in oItemA) {
				if (oItemB[property] === undefined || oItemA[property] !== oItemB[property]) {
					return false;
				}
			}
			return true;
		},

		/**
		 * @param {object}
		 * @returns {boolean} true if at least one property of oChangeType has 'ModelChanged' or 'TableChanged'.
		 */
		hasChangedType: function(oChangeType) {
			for ( var type in oChangeType) {
				if (oChangeType[type] === sap.ui.comp.personalization.Controller.ChangeType.ModelChanged || oChangeType[type] === sap.ui.comp.personalization.Controller.ChangeType.TableChanged) {
					return true;
				}
			}
			return false;
		},

		/**
		 * @param {object}
		 * @returns {boolean} true if at least one property of oChangeType has 'ModelChanged' or 'TableChanged'.
		 */
		isTrueForAll: function(oObjectOfBoolean) {
			for ( var type in oObjectOfBoolean) {
				if (oObjectOfBoolean[type] === false) {
					return false;
				}
			}
			return true;
		},

		/**
		 * @param {string} sKey
		 * @param {sap.ui.table.Column[] | sap.m.Column[]} aColumns
		 * @returns {sap.ui.table.Column | sap.m.Column}
		 */
		getColumn: function(sColumnKey, aColumns) {
			var oResultColumn = null;
			aColumns.some(function(oColumn) {
				if (this.getColumnKey(oColumn) === sColumnKey) {
					oResultColumn = oColumn;
					return true;
				}
			}, this);
			return oResultColumn;
		},

		/**
		 * @param {sap.m.P13nSortItem[]} aSortItems
		 * @param {string} sKey
		 * @returns {integer} Index of sKey or -1 if not found
		 */
		getIndexByKey: function(aModelItems, sColumnKey) {
			var iIndex = -1;
			aModelItems.some(function(oModelItem, i) {
				if (oModelItem.columnKey === sColumnKey) {
					iIndex = i;
					return true;
				}
			});
			return iIndex;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {string | null}
		 */
		getColumnKey: function(oColumn) {
			return this._getCustomProperty(oColumn, "columnKey") || oColumn.getId();
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {string | null}
		 */
		getColumnType: function(oColumn) {
			return this._getCustomProperty(oColumn, "type");
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {boolean}
		 */
		isGroupable: function(oColumn) {
			if (oColumn.getLeadingProperty && oColumn.getLeadingProperty()) {
				if (this._getCustomProperty(oColumn, "aggregationRole") !== "measure") {
					return true;
				}
			}
			if (this._getCustomProperty(oColumn, "leadingProperty")) {
				if (this._getCustomProperty(oColumn, "aggregationRole") !== "measure") {
					return true;
				}
			}

			if (oColumn instanceof sap.ui.table.Column) {
				return oColumn.getParent().getEnableGrouping();
			}
			
			return false;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {boolean}
		 */
		isSortable: function(oColumn) {
			if (oColumn.getSortProperty) {
				if (oColumn.getSortProperty()) {
					return true;
				}
			}
			if (this._getCustomProperty(oColumn, "sortProperty")) {
				return true;
			}
			return false;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {boolean}
		 */
		isFilterable: function(oColumn) {
			if (oColumn.getFilterProperty) {
				if (oColumn.getFilterProperty()) {
					return true;
				}
			}
			if (this._getCustomProperty(oColumn, "filterProperty")) {
				return true;
			}
			return false;
		},

		/**
		 * @param {sap.m.Column[] || sap.ui.table.Column[]} aColumns
		 * @returns {boolean} True if all columns support 'columnKey' or all columns do not support 'columnKey'. False in case of mixed situation.
		 */
		isConsistent: function(aColumns) {
			if (!aColumns || !aColumns.length) {
				return true;
			}
			var bConsistent = true;
			var bPersistentFirst = sap.ui.comp.personalization.Util.getColumnKey(aColumns[0]) !== aColumns[0].getId();
			aColumns.some(function(oColumn) {
				var bPersistentCurrent = sap.ui.comp.personalization.Util.getColumnKey(oColumn) !== oColumn.getId();
				if (bPersistentCurrent !== bPersistentFirst) {
					bConsistent = false;
					return true; // leave some()
				}
			});
			return bConsistent;
		},

		/**
		 * @param {string} sKeyName: property name for key
		 * @param {string} sKeyValue: kay value which is looking for
		 * @param {Array} aArray: array where the element with key value 'sKeyValue' is looking for
		 * @returns {object | null} either found array element or null if 'sKeyValue' does not exist in aArray
		 */
		getArrayElementByKey: function(sKeyName, sKeyValue, aArray) {
			if (!aArray || !aArray.length) {
				return null;
			}
			var oElement = null;
			aArray.some(function(oElement_) {
				if (oElement_[sKeyName] !== undefined && oElement_[sKeyName] === sKeyValue) {
					oElement = oElement_;
					return true;
				}
			});
			return oElement;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @param {string} sProperty
		 * @param {boolean} bParse
		 * @returns {object | null} either value of custom data property or null
		 */
		_getCustomProperty: function(oColumn, sProperty) {
			var oCustomData = this._getCustomData(oColumn);
			if (!oCustomData || !sProperty) {
				return null;
			}
			return oCustomData[sProperty];
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {object | null} either custom data object or null
		 */
		_getCustomData: function(oColumn) {
			if (!oColumn) {
				return null;
			}
			var oCustomData = oColumn.data("p13nData");
			if (typeof oCustomData === "string") {
				try {
					oCustomData = JSON.parse(oCustomData);
					oColumn.data("p13nData", oCustomData);
				} catch (oException) {
					// do not update the custom data, go ahead
				}
			}
			return oCustomData;
		}

	};
	return Util;
}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/Util.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.BindingUtil') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Utility to access control binding for SmartFieldControl.
 * 
 * @public
 * @name sap.ui.comp.smartfield.MetaData
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @returns {sap.ui.comp.smartfield.BindingUtil} the binding access class.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.BindingUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartfield/BindingUtil",[], function() { // EXC_JSHINT_002 //EXC_JSHINT_034 //EXC_JSHINT_037
	"use strict";

	/**
	 * @public
	 * @constructor
	 */
	var BindingUtil = function() {  //EXC_JSLINT_021
		//nothing to do here.
	};

	/**
	 * Converts binding information for a control property to its original form.
	 * 
	 * @param {object} oInfo the binding information from the control.
	 * @returns {object} conversion result.
	 * @public
	 */
	BindingUtil.prototype.toBinding = function(oInfo) {
		var oOut = {}, n, oPart, i, len, mNames = {
			model: true,
			formatter: true,
			mode: true,
			path: true
		};

		if (oInfo) {
			if (oInfo.parts && oInfo.parts.length) {
				len = oInfo.parts.length;
				oOut.parts = [];
			}
			
			for (i = 0; i < len; i++) {
				oPart = oInfo.parts[i];
				oOut.parts.push(oPart);
			}
			
			for (n in mNames) {
				if (oInfo[n]) {
					oOut[n] = oInfo[n];
				}
			}

			return oOut;			
		}

		return null;
	};

	/**
	 * Converts binding information for a control property to its original form.
	 * 
	 * @param {object} oInfo the binding information from the control.
	 * @returns {string} conversion result.
	 * @public
	 */
	BindingUtil.prototype.toBindingPath = function(oInfo) {
		var oOut, sOut = "", oPart, i, len;

		oOut = this.toBinding(oInfo);

		if (oOut) {
			if (oOut.model) {
				sOut = oOut.model + ">";
			}

			if (oOut.path) {
				sOut = sOut + oOut.path;
			} else if (oOut.parts && oOut.parts.length > 0) {
				len = oOut.parts.length;
				
				for (i = 0; i < len; i++) {
					oPart = oOut.parts[i];
					
					if (oPart.model) {
						sOut = sOut + oPart.model + ">";
					}
					
					sOut = sOut + oPart.path;
				}
			}
		}

		return sOut;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	BindingUtil.prototype.destroy = function() { //EXC_JSLINT_021
		//nothing to do here.
	};

	return BindingUtil;
}, true);

}; // end of sap/ui/comp/smartfield/BindingUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.Configuration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.Configuration.
jQuery.sap.declare('sap.ui.comp.smartfield.Configuration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/Configuration",["jquery.sap.global", "sap/ui/comp/library", "sap/ui/core/Element"], function(jQuery, library, Element) {
	"use strict";
	
	/**
	 * Constructor for a new smartfield/Configuration.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The configuration allows to further define the behaviour of a SmartField.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.Configuration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Configuration = Element.extend("sap.ui.comp.smartfield.Configuration", /** @lends sap.ui.comp.smartfield.Configuration.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * By default the SmartField chooses the controls it hosts on either OData meta data or JSON meta data. This property allows to overwrite the default behaviour.
			 */
			controlType : {type : "sap.ui.comp.smartfield.ControlType", group : "Misc", defaultValue : null},
	
			/**
			 * The property specifies how availble values are presented.
			 */
			displayBehaviour : {type : "sap.ui.comp.smartfield.DisplayBehaviour", group : "Misc", defaultValue : null}
		}
	}});
	

	return Configuration;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfield/Configuration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.FieldControl') ) {

/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Field Control Implementation for SmartField Control. The implementation operates on OData meta data, so an instance of
 * <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * @public
 * @name sap.ui.comp.smartfield.FieldControl
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.comp.smartfield.BindingUtil} BindingUtil a reference to the binding utility implementation.
 * @param {sap.ui.model.ParseException} ParseException a reference to the parse exception implementation.
 * @returns {sap.ui.comp.smartfield.FieldControl} the field control class.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.FieldControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/FieldControl",[	"jquery.sap.global", "sap/ui/comp/smartfield/BindingUtil", "sap/ui/model/ParseException" ], function(jQuery, BindingUtil, ParseException) { // EXC_JSHINT_002 //EXC_JSHINT_034 //EXC_JSHINT_037
	"use strict";

	/**
	 * @public
	 * @constructor
	 * @param {sap.ui.core.Control} oParent the parent control.
	 */
	var FieldControl = function(oParent) {
		this._oBinding = new BindingUtil();
		this._oParent = oParent;
	};

	/**
	 * Returns formatter functions for the given control properties. The formatters use the given control property and its subordinate attributes.
	 * Each formatter consists of two function, one to calculate a binding path, which is optional, and the formatter function itself.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {map} mBindings the names of the properties to be bound, e.g. "enabled", "mandatory" and "visible".
	 * @returns {map} formatter functions for the given control properties.
	 * @public
	 */
	FieldControl.prototype.getControlProperties = function(oMetaData, mBindings) {
		var sMethod, n, oResult = {};

		if (oMetaData && mBindings) {
			for (n in mBindings) { // EXC_JSHINT_041
				sMethod = "_get" + n.substring(0, 1).toUpperCase() + n.substring(1);

				if (this[sMethod]) {
					oResult[n] = this[sMethod](oMetaData, this._oParent.getBindingInfo(n));
				}
			}
		}

		return oResult;
	};

	/**
	 * Returns formatter functions for the <code>enabled</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oBindingInfo the current binding of the property.
	 * @returns {object} formatter function for the given control attribute.
	 * @private
	 */
	FieldControl.prototype._getEnabled = function(oMetaData, oBindingInfo) {
		var bParent, len = 0, iPropertyPos = -1, iEntitySetPos = -1, iBindingPos = -1, oProperties, that = this;
		
		//get entity set properties.
		oProperties = this._getAttributes(oMetaData.entitySet, "extensions", {
			"updatable": true,
			"updatable-path": true
		});
		
		//if the field is not bound, use the initial value from the parent control.
		if (!oBindingInfo) {
			bParent = this._oParent.getEnabled();
		}
		
		return {
			path: function() {
				var aPaths = [];
				
				//if field-control is statically disabled, return an empty path array.
				if (!that._getEnabledStatic(oProperties, oMetaData)) {
					return aPaths;
				}
				
				//check for field-control on property level and set position.
				if (oMetaData.property.extensions["sap:field-control"]) {
					aPaths.push(that._toPath(oMetaData, oMetaData.property.extensions["sap:field-control"]));
					iPropertyPos = len;
					len++;
				}

				//check for field-control on entity set level and set position, 
				if (oProperties["updatable-path"]) {
					aPaths.push(oProperties["updatable-path"]);
					iEntitySetPos = len;
					len++;
				}

				//check for binding info and set position.
				if (oBindingInfo) {
					aPaths.push(that._oBinding.toBindingPath(oBindingInfo));
					iBindingPos = len;
					len++;
				}

				return aPaths;
			},
			formatter: function(p1, p2, p3) { // EXC_JSHINT_002
				var aArgs = [];
				
				//check the static values.
				if (!that._getEnabledStatic(oProperties, oMetaData)) {
					return false;
				}
				
				//get the values to compare.
				if (iPropertyPos > -1) {
					aArgs.push(arguments[iPropertyPos] !== 1);
				}
				
				if (iEntitySetPos > -1) {
					aArgs.push(!!arguments[iEntitySetPos]);
				}
				
				// check for binding, in case of no binding, use value from parent
				if (iBindingPos > -1) {
					aArgs.push(!!arguments[iBindingPos]);
				} else {
					aArgs.push(bParent);
				}
				
				return that._compare(aArgs, false, true);
			}
		};
	};

	/**
	 * Returns static value for the <code>enabled</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 * 
	 * @param {object} oProperties the meta data from the entity set.
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @returns {boolean} static value for the <code>enabled</code> property of a control.
	 * @private
	 */
	FieldControl.prototype._getEnabledStatic = function(oProperties, oMetaData) {
		if (oProperties.updatable === "false") {
			return false;
		}

		if (oMetaData.property.extensions["sap:updatable"] === "false") {
			return false;
		}	
		
		return true;		
	};
	
	/**
	 * Compares the boolean values from field control evaluation. First the values are compared to <code>bPessimist</code>.
	 * If this comparison does not evaluate to <code>true</code>, <code>bDefault</code> is returned.
	 * 
	 * @param {array} aArgs values to be compared.
	 * @param {boolean} bPessimist first operand.
	 * @param {boolean} bDefault second operand.
	 * @returns {boolean} comparison result.
	 * @private
	 */
	FieldControl.prototype._compare = function(aArgs, bPessimist, bDefault) {
		var i, len = aArgs.length;
		
		for (i = 0; i < len; i++) {
			if (aArgs[i] === bPessimist) {
				return bPessimist;
			}
		}
		
		return bDefault;
	};
	
	/**
	 * Returns formatter functions for the <code>visible</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oBindingInfo the current binding of the property.
	 * @returns {object} formatter function for the given control attribute.
	 * @private
	 */
	FieldControl.prototype._getVisible = function(oMetaData, oBindingInfo) {
		var bParent, len = 0, iBindingPos = -1, iPropertyPos = -1, that = this;
		
		//if the field is not bound, use the initial value from the parent control.
		if (!oBindingInfo) {
			bParent = this._oParent.getVisible();
		}
		
		return {
			path: function() {
				var aPaths = [];
				
				//check for field-control on entity set level and set position.
				if (oMetaData.property.extensions["sap:field-control"]) {
					aPaths.push(that._toPath(oMetaData, oMetaData.property.extensions["sap:field-control"]));
					iPropertyPos = len;
					len++;
				}

				//check for binding info and set position.
				if (oBindingInfo) {
					aPaths.push(that._oBinding.toBindingPath(oBindingInfo));
					iBindingPos = len;
					len++;
				}
				
				if (len > 0) {
					return aPaths;
				}
				
				return [ "" ];
			}, 
			formatter: function(p1, p2) { // EXC_JSHINT_002
				var aArgs = [];
				
				// check for at least one binding path.
				if (len > 0) {
					//check for field-control being switched on.
					if (iPropertyPos > -1) {
						aArgs.push(arguments[iPropertyPos] !== 0);
					}
						
					// check for binding, in case of no binding, use value from parent
					if (iBindingPos > -1) {
						aArgs.push(!!arguments[iBindingPos]);
					} else {
						aArgs.push(bParent);
					}
						
					return that._compare(aArgs, false, true);
				}
				
				//no field control, so check for visible on property.
				if (oMetaData.property.extensions["sap:visible"]) {
					return (oMetaData.property.extensions["sap:visible"] === "true");
				}

				return true;		
			}
		};
	};

	/**
	 * Returns formatter functions for the <code>mandatory</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oBindingInfo the current binding of the property.
	 * @returns {object} formatter function for the given control attribute.
	 * @private
	 */
	FieldControl.prototype._getMandatory = function(oMetaData, oBindingInfo) {
		var bParent, len = 0, iBindingPos = -1, iPropertyPos = -1, that = this;
		
		//if the field is not bound, use the initial value from the parent control.
		if (!oBindingInfo) {
			bParent = this._oParent.getMandatory();
		}
		
		return {
			path: function() {
				var aPaths = [];
				
				//check for field-control on entity set level and set position.
				if (oMetaData.property.extensions["sap:field-control"]) {
					aPaths.push(that._toPath(oMetaData, oMetaData.property.extensions["sap:field-control"]));
					iPropertyPos = len;
					len++;
				}

				//check for binding info and set position.
				if (oBindingInfo) {
					aPaths.push(that._oBinding.toBindingPath(oBindingInfo));
					iBindingPos = len;
					len++;
				}
				
				if (len > 0) {
					return aPaths;
				}
				
				return [ "" ];
			},
			formatter: function(p1, p2) {  // EXC_JSHINT_002				
				var aArgs = [];
				
				// check for at least one binding path,
				// in that case field-control is active;
				// otherwise use nullable.
				if (len > 0) {
					if (iPropertyPos > -1) {
						aArgs.push(arguments[iPropertyPos] === 7);
					}
						
					// check for binding, in case of no binding, use value from parent
					if (iBindingPos > -1) {
						aArgs.push(!!arguments[iBindingPos]);
					} else {
						aArgs.push(bParent);
					}
						
					return that._compare(aArgs, true, false);
				}
				
				// no field control, so check for nullable.
				// default for nullable is true, so it has to be set to false to make a property mandatory.
				if (oMetaData.property.property.nullable && oMetaData.property.property.nullable === "false") {
					return true;
				}
				
				// default is false
				return false;
			}
		};
	};

	/**
	 * Constructs a binding path for a formatter from the <code>value</code> attribute of a JSON property.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oProperty the property.
	 * @returns {string} binding path for an attribute.
	 * @private
	 */
	FieldControl.prototype._toPath = function(oMetaData, oProperty) {
		if (oMetaData.property.complex) {
			return oMetaData.path.replace(oMetaData.property.property.name, oProperty);
		}
		
		return oProperty;
	};
	
	/**
	 * Returns the requested attributes from the given object and subordinate data structure, which has to be an <code>array</code>.
	 * 
	 * @param {object} oObject the object to be analyzed.
	 * @param {string} sArray the name of the <code>array</code> to be analyzed.
	 * @param {map} mParams the requested attributes.
	 * @returns {map} the requested attributes.
	 * @private
	 */
	FieldControl.prototype._getAttributes = function(oObject, sArray, mParams) {
		var oResult = {}, n, count = 0, len, oAttr;

		if (oObject && sArray && mParams) {
			len = oObject[sArray].length;

			for (n in mParams) {
				if (mParams[n]) {
					count++;
				}
			}

			while (len--) {
				if (count === 0) {
					return oResult;
				}

				oAttr = oObject[sArray][len];

				if (mParams[oAttr.name]) {
					oResult[oAttr.name] = oAttr.value;
					count--;
				}
			}
		}

		return oResult;
	};

	/**
	 * Returns a function to check whether a field is a mandatory field.
	 * 
	 * @param {object} oProperty the meta data to execute the check.
	 * @returns {object} the check function, can be <code>null</code>.
	 * @public
	 */
	FieldControl.prototype.getMandatoryCheck = function(oProperty) {
		var fReturn, that = this;
		
		if (oProperty) {
			switch (oProperty.property.type) {
				case "Edm.DateTimeOffset":
				case "Edm.DateTime":
				case "Edm.String":
					fReturn = function(sValue) {
						if (that._oParent.getMandatory() && !sValue) {
							throw new ParseException(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("VALUEHELPVALDLG_FIELDMESSAGE"));
						}
					};
					break;
				case "Edm.Decimal":
				case "Edm.Double":
				case "Edm.Float":
				case "Edm.Single":
				case "Edm.Int16":
				case "Edm.Int32":
				case "Edm.Int64":
				case "Edm.Byte":
				case "Edm.SByte":
					fReturn = function(sValue) {
						if (that._oParent.getMandatory() && (sValue === null || sValue === undefined)) {
							throw new ParseException(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("VALUEHELPVALDLG_FIELDMESSAGE"));
						}
					};
					break;
				default:
					break;
			}
		}
		
		return fReturn;
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	FieldControl.prototype.destroy = function() {
		if (this._oBinding) {
			this._oBinding.destroy();
		}
		
		this._oBinding = null;
		this._oParent = null;
	};

	return FieldControl;
}, true);

}; // end of sap/ui/comp/smartfield/FieldControl.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.JSONTypes') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Utility class to access data types, if the SmartField uses a JSON model.
 * 
 * @public
 * @name sap.ui.comp.smartfield.JSONTypes
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.model.type.Boolean} BooleanType a reference to the boolean type implementation.
 * @param {sap.ui.model.type.Date} DateType a reference to the date type implementation.
 * @param {sap.ui.model.type.Float} FloatType a reference to the float type implementation.
 * @param {sap.ui.model.type.Integer} IntegerType a reference to the integer type implementation.
 * @param {sap.ui.model.type.String} StringType a reference to the string type implementation.
 * @returns {sap.ui.comp.smartfield.JSONTypes} the new instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.JSONTypes'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Boolean'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Integer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.String'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/JSONTypes",[	"jquery.sap.global", "sap/ui/model/type/Boolean", "sap/ui/model/type/Date", "sap/ui/model/type/Float", "sap/ui/model/type/Integer", "sap/ui/model/type/String" ], function(jQuery, BooleanType, DateType, FloatType, IntegerType, StringType) { // EXC_JSHINT_002 //EXC_JSHINT_034 //EXC_JSHINT_037
	"use strict";

	/**
	 * @public
	 * @constructor
	 */
	var JSONTypes = function() { // EXC_JSLINT_021
		//nothing to do here.
	};

	/**
	 * Returns an instance of a sub-class of <code>sap.ui.model.Type</code> depending on the OData property's EDM type.
	 * 
	 * @param {sType} sType the name of the type to be created.
	 * @returns {sap.ui.model.Type} an instance of a sub-class of <code>sap.ui.model.Type</code>.
	 * @public
	 */
	JSONTypes.prototype.getType = function(sType) {
		if (sType) {
			switch (sType) {
				case "Boolean":
					return new BooleanType();
				case "Date":
					return new DateType();
				case "Float":
					return new FloatType();
				case "Integer":
					return new IntegerType();
				default:
					return new StringType();
			}
		}

		return null;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	JSONTypes.prototype.destroy = function() { // EXC_JSLINT_021
		//nothing to do here.
	};

	return JSONTypes;
}, true);

}; // end of sap/ui/comp/smartfield/JSONTypes.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataHelper') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Utility class to access OData Meta Data.
 * 
 * @public
 * @name sap.ui.comp.smartfield.ODataHelper
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.comp.odata.MetadataAnalyser} MData a reference to the meta data analyzer implementation.
 * @returns {sap.ui.comp.smartfield.ODataHelper} the new instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataHelper",[	"jquery.sap.global", "sap/ui/comp/odata/MetadataAnalyser" ], function(jQuery, MData) { // EXC_JSHINT_002
	"use strict";

	/**
	 * @public
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used.
	 */
	var ODataHelper = function(oModel) { // EXC_JSLINT_021
		if (oModel) {
			this._oMeta = oModel.getMetaModel();
			this.oAnalyzer = new MData(oModel);
		}
	};

	/**
	 * Checks whether the current path contains a sequence of navigation properties and corrects the current meta data accordingly.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.entityType the OData entity type definition.
	 * @param {object} oMetaData.typecount the index of the entity type in the meta model.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oObjectBinding an optional object binding.
	 * @returns {boolean} <code>true</code>, if a sequence of navigation properties has been identified, <code>false</code> otherwise.
	 * @public
	 */
	ODataHelper.prototype.checkNavigationProperty = function(oMetaData, oObjectBinding) {
		var aPath, oNavi, len, aNavi = [];

		if (oMetaData) {
			// check for an "explicit" object binding ("binding" attribute in XML).
			if (oObjectBinding && oObjectBinding.sPath) {
				oNavi = this.getNavigationProperty(oObjectBinding.sPath, oMetaData.typecount);

				if (oNavi) {
					this._updateNavigationProperty(oMetaData, oNavi);
				}
			}

			// now check the binding path itself.
			aPath = oMetaData.path.split("/");
			len = aPath.length;

			// only check, if there is a complex path.
			if (len > 1) {
				while (len--) {
					oNavi = this.getNavigationProperty(aPath[0], oMetaData.typecount);

					if (oNavi) {
						this._updateNavigationProperty(oMetaData, oNavi);
					} else {
						this._getProperty(oMetaData, aPath, aNavi);
						return true;
					}

					aNavi.push(aPath.shift());
				}
			}
		}

		return false;
	};

	/**
	 * Updates the current meta data, if a simple property has been identified.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.entityType the OData entity type definition.
	 * @param {object} oMetaData.typecount the index of the entity type in the meta model.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {array} aPath the array of all paths.
	 * @param {array} aNavi the navigation paths.
	 * @private
	 */
	ODataHelper.prototype._getProperty = function(oMetaData, aPath, aNavi) {
		oMetaData.property = this.getProperty(aPath.join("/"), oMetaData.namespace, oMetaData.typecount);

		if (aNavi.length > 0) {
			oMetaData.navigationPath = aNavi.join("/") + "/";
		}
	};

	/**
	 * Updates the current meta data, if a navigation property has been identified.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.entityType the OData entity type definition.
	 * @param {object} oMetaData.typecount the index of the entity type in the meta model.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oNavigation the navigation property.
	 * @private
	 */
	ODataHelper.prototype._updateNavigationProperty = function(oMetaData, oNavigation) {
		var oAssoc, sTarget, oType;

		// get the entity set name.
		oAssoc = this.getAssociation(oNavigation.relationship);
		sTarget = this.getAssociationTarget(oAssoc, oNavigation);

		// get entity set and entity type.
		oMetaData.entitySet = this.getEntitySet(sTarget);
		oType = this.getEntityType(oMetaData.entitySet.entityType.replace(oMetaData.namespace + ".", ""));

		// correct the current data.
		oMetaData.entityType = oType.type;
		oMetaData.typecount = oType.count;
	};

	/**
	 * Returns the definition of an OData property of a given entity.
	 * 
	 * @param {string} sName the name of the OData property.
	 * @param {integer} iTypePos the position of the OData entity type.
	 * @returns {object} OData property, if it exists, otherwise <code>null</code> is returned.
	 * @private
	 */
	ODataHelper.prototype.getNavigationProperty = function(sName, iTypePos) {
		if (sName) {
			return this._getTypeProperty(sName, "/navigationProperty", iTypePos);
		}

		return null;
	};

	/**
	 * Returns the definition of a property of an entity type.
	 * 
	 * @param {string} sPath the path of the OData property.
	 * @param {string} sNameSpace the name space of the OData property.
	 * @param {integer} iTypePos the position of the OData entity type.
	 * @returns {object} OData property, if it exists, otherwise <code>null</code> is returned.
	 * @public
	 */
	ODataHelper.prototype.getProperty = function(sPath, sNameSpace, iTypePos) {
		var len, aProp, oProp;

		if (sPath && sNameSpace) {
			aProp = sPath.split("/");
			len = aProp.length;

			if (len > 1) {
				oProp = this._getTypeProperty(aProp[0], "/property", iTypePos);
				return this._getComplex(oProp, sNameSpace, aProp, len);
			}

			oProp = this._getTypeProperty(sPath, "/property", iTypePos);
			return {
				property: oProp,
				typePath: sPath,
				extensions: this._toMap(oProp, "extensions")
			};
		}

		return null;
	};

	/**
	 * Converts an <code>array</code> of attributes into a <code>map</code>.
	 * 
	 * @param {object} oProperty the property definition.
	 * @param {string} sArray the name of the <code>array</code> of attributes.
	 * @returns {map} conversion result.
	 * @private
	 */
	ODataHelper.prototype._toMap = function(oProperty, sArray) {
		var aArray, oObj, oOut = {}, length, sPrefix, mNs = {
			"http://www.sap.com/Protocols/SAPData": "sap:"
		};

		if (oProperty && oProperty[sArray]) {
			aArray = oProperty[sArray];
		}

		if (aArray && aArray.length) {
			length = aArray.length;
		} else {
			return oOut;
		}

		while (length--) {
			oObj = aArray[length];
			sPrefix = mNs[oObj.namespace];

			if (sPrefix) {
				oOut[sPrefix + oObj.name] = oObj.value;
			} else {
				oOut[oObj.name] = oObj.value;
			}
		}

		return oOut;
	};

	/**
	 * Returns a complex property.
	 * 
	 * @param {object} oProperty the object.
	 * @param {string} sNameSpace the current name space.
	 * @param {array} aProp the path to the OData property.
	 * @param {integer} iLen the length of the path to the OData property.
	 * @returns {object} the complex property.
	 * @private
	 */
	ODataHelper.prototype._getComplex = function(oProperty, sNameSpace, aProp, iLen) {
		var oObject = oProperty, sTypePath;

		while (iLen--) {
			if (oObject) {
				if (iLen === 0) {
					oObject = this._getNamedProperty(aProp[0], "property", oObject);

					return {
						typePath: sTypePath + "/" + aProp[0],
						property: oObject,
						complex: true,
						extensions: this._toMap(oObject, "extensions")
					};
				}

				oObject = this.getComplexType(oObject.type.replace(sNameSpace + ".", ""));
				sTypePath = this._getComplexPath(sTypePath, oObject);
			}

			aProp.shift();
		}
	};

	/**
	 * Returns an updated path of types.
	 * 
	 * @param {string} sTypePath the current path of data types.
	 * @param {object} oObject the current object.
	 * @returns {string} the updated path of types.
	 * @private
	 */
	ODataHelper.prototype._getComplexPath = function(sTypePath, oObject) {
		if (sTypePath) {
			return sTypePath + "/" + oObject.name;
		}

		return oObject.name;
	};

	/**
	 * Returns a named property.
	 * 
	 * @param {string} sName the name.
	 * @param {string} sArray the name of the array to scan for the property.
	 * @param {object} oProperty the object.
	 * @returns {object} the named property, can be <code>null</code>.
	 * @private
	 */
	ODataHelper.prototype._getNamedProperty = function(sName, sArray, oProperty) {
		var oResult;

		jQuery.each(oProperty[sArray], function(i, oEntity) {
			if (oEntity.name === sName) {
				oResult = oEntity;
				return false;
			}
		});

		return oResult;
	};

	/**
	 * Returns the definition of an OData property of a given entity type.
	 * 
	 * @param {string} sName the name of the OData property.
	 * @param {string} sCategory the category of the OData property.
	 * @param {integer} iTypePos the position of the OData entity type.
	 * @returns {object} OData property, if it exists, otherwise <code>null</code> is returned.
	 * @private
	 */
	ODataHelper.prototype._getTypeProperty = function(sName, sCategory, iTypePos) {
		var oProperty, aObject;

		aObject = this._oMeta.getObject("/dataServices/schema/0/entityType/" + iTypePos + sCategory);

		if (aObject) {
			jQuery.each(aObject, function(i, oEntity) {
				if (oEntity.name === sName) {
					oProperty = oEntity;
					return false;
				}
			});
		}

		return oProperty;
	};

	/**
	 * Returns an OData entity type.
	 * 
	 * @param {object} sName the name of the OData entity set.
	 * @returns {object} OData entity type, if it exists, otherwise <code>null</code> is returned, and position counter.
	 * @public
	 */
	ODataHelper.prototype.getEntityType = function(sName) {
		var iCount, aObject, oType = null;

		if (sName) {
			aObject = this._oMeta.getObject("/dataServices/schema/0/entityType");

			if (aObject) {
				jQuery.each(aObject, function(i, oEntity) {
					if (oEntity.name === sName) {
						oType = oEntity;
						iCount = i;
						return false;
					}
				});
			}
		}

		return {
			count: iCount,
			type: oType
		};
	};

	/**
	 * Returns the definition of an OData complex type.
	 * 
	 * @param {string} sName the name of the complex type.
	 * @returns {object} the definition of an OData complex type.
	 * @public
	 */
	ODataHelper.prototype.getComplexType = function(sName) {
		var oType;

		if (sName) {
			jQuery.each(this._oMeta.getObject("/dataServices/schema/0/complexType"), function(i, oEntity) {
				if (oEntity.name === sName) {
					oType = oEntity;
					return false;
				}
			});
		}

		return oType;
	};

	/**
	 * Returns an OData entity set.
	 * 
	 * @param {object} sName the name of the OData entity set.
	 * @returns {object} OData entity set, if it exists, otherwise <code>null</code> is returned.
	 * @public
	 */
	ODataHelper.prototype.getEntitySet = function(sName) {
		var oSet = null;

		if (sName) {
			jQuery.each(this._oMeta.getObject("/dataServices/schema/0/entityContainer/0/entitySet"), function(i, oEntity) {
				if (oEntity.name === sName) {
					oSet = oEntity;
					return false;
				}
			});
		}

		return oSet;
	};

	/**
	 * Returns an OData association.
	 * 
	 * @param {object} sName the name of the OData entity set.
	 * @returns {object} OData association, if it exists, otherwise <code>null</code> is returned.
	 * @public
	 */
	ODataHelper.prototype.getAssociation = function(sName) {
		var oAssoc = null;

		if (sName) {
			jQuery.each(this._oMeta.getObject("/dataServices/schema/0/entityContainer/0/associationSet"), function(i, oEntity) {
				if (oEntity.association === sName) {
					oAssoc = oEntity;
					return false;
				}
			});
		}

		return oAssoc;
	};

	/**
	 * Returns an OData association target, the entity set and association points to.
	 * 
	 * @param {object} oAssociation the given association set.
	 * @param {object} oNavigation the given navigation property.
	 * @returns {string} an OData association target, <code>null</code>, if it cannot be calculated.
	 * @public
	 */
	ODataHelper.prototype.getAssociationTarget = function(oAssociation, oNavigation) {
		var len, oEnd;

		if (oAssociation && oNavigation) {
			len = oAssociation.end.length;

			while (len--) {
				oEnd = oAssociation.end[len];

				if (oEnd.role === oNavigation.toRole) {
					return oEnd.entitySet;
				}
			}
		}

		return null;
	};

	/**
	 * Returns the name space of an OData model.
	 * 
	 * @returns {string} the name space of an OData model.
	 * @public
	 */
	ODataHelper.prototype.getNameSpace = function() {
		return this._oMeta.getObject("/dataServices/schema/0/namespace");
	};

	/**
	 * Checks whether an OData property represents semantically a unit of measure, e.g. a currency, and returns its definition, if the property
	 * represents a unit of measure.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {string} sPropertyPath the path identifying the OData property.
	 * @param {string} sNameSpace the name space of the OData property.
	 * @param {integer} iTypePos the position of the OData entity type.
	 * @returns {object} an object with a property <code>unit</code> containing the OData property representing the unit and an optional property
	 *          <code>text</code> containing the OData property representing the unit text. If no unit of measure is encountered, <code>null</code>
	 *          is returned.
	 * @public
	 */
	ODataHelper.prototype.getUnitOfMeasure = function(oProperty, sPropertyPath, sNameSpace, iTypePos) {
		var oUnit, oCurrency, oSemantics;

		if (oProperty && sPropertyPath && sNameSpace) {
			oUnit = oProperty.extensions["sap:unit"]; // EXC_JSHINT_018

			if (oUnit) {
				oCurrency = this.getProperty(sPropertyPath.replace(oProperty.property.name, oUnit), sNameSpace, iTypePos);
				oSemantics = oCurrency.extensions["sap:semantics"]; // EXC_JSHINT_018

				if (oSemantics === "currency-code" || oSemantics === "unit-of-measure") {
					return {
						unit: oUnit,
						text: oCurrency.extensions["currency-text"] ? oCurrency.extensions["currency-text"] : null,
						semantics: oSemantics,
						property: oCurrency
					};
				}
			}
		}

		return null;
	};

	/**
	 * Checks whether an OData property has a <code>text</code> property and returns it.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {string} sPropertyPath the path identifying the OData property.
	 * @param {string} sNameSpace the name space of the OData property.
	 * @param {integer} iTypePos the position of the OData entity type.
	 * @returns {object} an OData property that is referenced with the <code>text</code> attribute.
	 * @public
	 */
	ODataHelper.prototype.getTextProperty = function(oProperty, sPropertyPath, sNameSpace, iTypePos) {
		var oText;

		if (oProperty && sPropertyPath && sNameSpace) {
			oText = oProperty.extensions["sap:text"]; // EXC_JSHINT_018

			if (oText) {
				return this.getProperty(sPropertyPath.replace(oProperty.property.name, oText), sNameSpace, iTypePos);
			}
		}

		return null;
	};

	/**
	 * Calculates the value list annotation for the given property.
	 * 
	 * @param {string} sNameSpace the name space.
	 * @param {object} oEntityType the OData entity.
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {string} sPropertyPath the path identifying the property.
	 * @returns {object} the value list annotation or <code>null</code>.
	 * @public
	 */
	ODataHelper.prototype.getValueListAnnotation = function(sNameSpace, oEntityType, oProperty, sPropertyPath) {
		var sPath;

		if (oProperty.complex) {
			sPath = sNameSpace + "." + oProperty.typePath;
		} else {
			sPath = sNameSpace + "." + oEntityType.name + "/" + sPropertyPath;
		}

		if (this.oAnalyzer) {
			return this.oAnalyzer.getValueListAnnotation(sPath);
		}

		return null;
	};

	/**
	 * Calculates the value list annotation for the given property, if it represents a unit of measure, and adds it to the meta data as
	 * <code>valuelistuom</code> in the annotations.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory.
	 * @param {object} oMetaData.namespace the current name space.
	 * @param {object} oMetaData.entitySet the name of the OData entity set.
	 * @param {object} oMetaData.entityType the name of the OData entity type.
	 * @param {object} oMetaData.property the name of the OData property.
	 * @param {object} oMetaData.model the name of the model.
	 * @param {object} oMetaData.path the path identifying the OData property.
	 * @param {object} oMetaData.annotations the current annotations.
	 * @public
	 */
	ODataHelper.prototype.getUOMValueListAnnotation = function(oMetaData) {
		var sPath;

		if (oMetaData.annotations.uom) {
			if (oMetaData.property.complex) {
				sPath = oMetaData.namespace + "." + oMetaData.property.typePath;
				sPath = sPath.replace(oMetaData.property.property.name, oMetaData.annotations.uom.property.property.name);
			} else {
				sPath = oMetaData.namespace + "." + oMetaData.entityType.name + "/" + oMetaData.annotations.uom.property.property.name;
			}
		}

		if (this.oAnalyzer && sPath) {
			oMetaData.annotations.valuelistuom = this.oAnalyzer.getValueListAnnotation(sPath);
		}
	};

	/**
	 * Returns the requested attributes from the given object and subordinate data structure, which has to be an <code>array</code>.
	 * 
	 * @param {object} oObject the object to be analyzed.
	 * @param {string} sArray the name of the <code>array</code> to be analyzed.
	 * @param {map} mParams the requested attributes.
	 * @returns {map} the requested attributes.
	 * @public
	 */
	ODataHelper.prototype.getAttributes = function(oObject, sArray, mParams) {
		var oResult = {}, n, count = 0, len, oAttr, oParam;

		if (oObject && sArray && mParams) {
			len = oObject[sArray].length;

			for (n in mParams) {
				if (mParams[n]) {
					count++;
				}
			}

			while (len--) {
				if (count === 0) {
					return oResult;
				}

				oAttr = oObject[sArray][len];
				oParam = mParams[oAttr.name];

				if (oAttr && oParam && oAttr.namespace === oParam) {
					oResult[oAttr.name] = oAttr.value;
					count--;
				}
			}
		}

		return oResult;
	};

	/**
	 * Calculates the entity set a value list annotation for the given property points to and adds it to the meta data as
	 * <code>valuelistentityset</code> in the annotations.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory.
	 * @param {object} oMetaData.namespace the current name space.
	 * @param {object} oMetaData.entitySet the name of the OData entity set.
	 * @param {object} oMetaData.entityType the name of the OData entity type.
	 * @param {object} oMetaData.property the name of the OData property.
	 * @param {object} oMetaData.model the name of the model.
	 * @param {object} oMetaData.path the path identifying the OData property.
	 * @param {object} oMetaData.annotations the current annotations.
	 * @public
	 */
	ODataHelper.prototype.geValueListEntitySet = function(oMetaData) {
		if (oMetaData && oMetaData.annotations && oMetaData.annotations.valuelist) {
			if (oMetaData.annotations.valuelist.primaryValueListAnnotation && oMetaData.annotations.valuelist.primaryValueListAnnotation.valueListEntitySetName) {
				oMetaData.annotations.valuelistentityset = this.getEntitySet(oMetaData.annotations.valuelist.primaryValueListAnnotation.valueListEntitySetName);
			}
		}
	};

	/**
	 * Returns the value list annotation for the given meta data.
	 * 
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {string} oMetaData.namespace the name space.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oEntityType the OData entity type definition.
	 * @param {object} oTextProperty the text property, can be <code>null</code>.
	 * @returns {object} the value list annotation and a flag indicating whether it is taken from a possibly existing text annotation.
	 */
/*
 * ODataHelper.prototype.getValueListDescriptor = function(oMetaData, oEntityType, oTextProperty) { var oAnnotation, bFromText = false; // get value
 * list annotation for the property the text annotation is pointing to. if (oTextProperty) { sPath =
 * oMetaData.path.replace(oMetaData.property.typePath, oTextProperty.property.name); oAnnotation = this._getValueListAnnotation(oMetaData.namespace,
 * oEntityType, oTextProperty, sPath); if (oAnnotation && oAnnotation.primaryValueListAnnotation) { return { annotation: oAnnotation, fromText: true }; } } //
 * get the value list annotation from the original property. oAnnotation = this.getValueListAnnotation(oMetaData.namespace, oEntityType,
 * oMetaData.property, oMetaData.property.typePath); if (oAnnotation) { if (oTextProperty && oAnnotation.primaryValueListAnnotation) { bFromText =
 * true; } return { annotation: oAnnotation, fromText: bFromText }; } return null; };
 */

	/**
	 * Returns the line item annotation for a type.
	 * 
	 * @param {object} oType the definition of an OData complex type.
	 * @returns {object} the line item annotation.
	 */
/*
 * ODataHelper.prototype.getLineItemAnnotation = function(oType) { var oResult, aAnnotation, oAnnotation, len; if (oType) { aAnnotation =
 * oType["com.sap.vocabularies.UI.v1.LineItem"]; if (aAnnotation) { oResult = { term: "com.sap.vocabularies.UI.v1.LineItem", labels: {}, fields: [] };
 * len = aAnnotation.length; while (len--) { oAnnotation = aAnnotation[len]; if (oAnnotation.RecordType !== "com.sap.vocabularies.UI.v1.DataField") {
 * continue; } if (oAnnotation.Value && oAnnotation.Value.Path) { oResult.fields.push(oAnnotation.Value.Path); } if (oAnnotation.Label &&
 * oAnnotation.Label.String) { oResult.labels[oAnnotation.Value.Path] = oAnnotation.Label.String; } } return oResult; } } return null; };
 */
	/**
	 * Returns the semantic object annotation for a given target.
	 * 
	 * @param {string} sTarget the path identifying the target, usually the complete path to a property including name space.
	 * @returns {object} the semantic object annotation.
	 */
/*
 * ODataHelper.prototype.getSemanticObjectAnnotation = function(sTarget) { var oAnnotation, oResult = {}, oExtension, len, i; if (sTarget) {
 * oAnnotation = this._getAnnotation(sTarget, "com.sap.vocabularies.Common.v1.SemanticObject"); if (oAnnotation) { len =
 * oAnnotation.extensions.length; for (i = 0; i < len; i++) { oExtension = oAnnotation.extensions[i]; if (oExtension.name === "String") {
 * oResult.semanticObject = oExtension.value; break; } } oResult.term = oAnnotation.term; oResult.extensions = oAnnotation.extensions; return oResult; } }
 * return null; };
 */
	/**
	 * Returns the value list annotation for a given target.
	 * 
	 * @param {string} sNameSpace the name space.
	 * @param {string} sPropertyPath the path identifying the property.
	 * @returns {object} the value list annotation.
	 */
/*
 * ODataHelper.prototype.getValueListAnnotation = function(sNameSpace, sPath) { var oAnnotation, oResult = {}; if (sNameSpace && sPath) { oAnnotation =
 * this._getAnnotation(sNameSpace + "." + sPath, "com.sap.vocabularies.Common.v1.ValueList"); if (oAnnotation) { oResult.term = oAnnotation.term;
 * return oResult; } } return null; };
 */
	/**
	 * Returns an annotation depending on target and term attributes.
	 * 
	 * @param {string} sTarget the path identifying the target.
	 * @param {string} sTerm the term.
	 * @returns {object} the annotation, which can be <code>null</code>.
	 * @private
	 */
/*
 * ODataHelper.prototype._getAnnotation = function(sTarget, sTerm) { var oAnnotation;
 * jQuery.each(this._oMeta.getObject("/dataServices/schema/0/annotations"), function(i, oEntity) { var oAnno; if (oEntity.target === sTarget &&
 * oEntity.annotation.length > 0) { oAnno = oEntity.annotation[0]; if (oAnno.term === sTerm) { oAnnotation = oAnno; return false; } } }); return
 * oAnnotation; };
 */
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ODataHelper.prototype.destroy = function() { // EXC_JSLINT_021
		if (this.oAnalyzer) {
			this.oAnalyzer.destroy();
		}

		this._oMeta = null;
		this._oAnalyzer = null;
	};

	return ODataHelper;
}, true);

}; // end of sap/ui/comp/smartfield/ODataHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartFieldRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartfield.SmartFieldRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartFieldRenderer",[	"jquery.sap.global" ], function(jQuery) { // EXC_JSHINT_002
	"use strict";

	/**
	 * @class ValueHelpDialog renderer.
	 * @static
	 */
	var SmartFieldRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
	 * @public
	 */
	SmartFieldRenderer.render = function(oRm, oControl) {
		oRm.write("<div ");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiCompSmartField");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_content"));
		oRm.write("</div>");
	};

	return SmartFieldRenderer;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/SmartFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartLabel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.SmartLabel.
jQuery.sap.declare('sap.ui.comp.smartfield.SmartLabel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartLabel",['jquery.sap.global', 'sap/m/Label', 'sap/ui/comp/library', './BindingUtil'],
	function(jQuery, Label, library, BindingUtil) {
	"use strict";


	
	/**
	 * Constructor for a new smartfield/SmartLabel.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * is a wrapper for the sap.m.Label and used with the SmartField-Control
	 * @extends sap.m.Label
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.SmartLabel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartLabel = Label.extend("sap.ui.comp.smartfield.SmartLabel", /** @lends sap.ui.comp.smartfield.SmartLabel.prototype */ { metadata : {
	
		library : "sap.ui.comp"
	}});
	
	
	SmartLabel.prototype.init = function() {

		this._oSmartField = null;
		this._sSmartFieldId = null;
	};
	
	/**
	 * binds the label properties
	 * 
	 * @private
	 */
	SmartLabel.prototype._bindProperties = function() {

	
		var oBinding = new BindingUtil();
	
		var oInfo = this._oSmartField.getBindingInfo("visible");
		if (oInfo) {
			this.bindProperty("visible", oBinding.toBinding(oInfo));
		} else {
			this.setVisible(this._oSmartField.getVisible());
		}
	
		oInfo = this._oSmartField.getBindingInfo("mandatory");
		if (oInfo) {
			this.bindProperty("required", oBinding.toBinding(oInfo));
		} else {
			this.setRequired(this._oSmartField.getMandatory());
		}
	
		oInfo = this._oSmartField.getBindingInfo("textLabel");
		if (oInfo) {
			this.bindProperty("text", oBinding.toBinding(oInfo));
		} else {
			this.setText(this._oSmartField.getTextLabel());
		}
	
		oInfo = this._oSmartField.getBindingInfo("tooltipLabel");
		if (oInfo) {
			this.bindProperty("tooltip", oBinding.toBinding(oInfo));
		} else {
			this.setTooltip(this._oSmartField.getTooltipLabel());
		}
	
	};
	
	/**
	 * apply odata meta data for the label
	 * 
	 * @public
	 */
	SmartLabel.prototype.getLabelInfo = function() {

		var oMetaDataProperty, oLabelInfo;
	
		if (this._oSmartField) {
	
			this._bindProperties();
	
			oMetaDataProperty = this._oSmartField.getDataProperty();
			if (oMetaDataProperty) {
				oLabelInfo = this._getLabelInfo(oMetaDataProperty);
				if (oLabelInfo) {
					if (oLabelInfo.text) {
						if (!this._oSmartField.getTextLabel()) {
							this.setText(oLabelInfo.text);
						}
					}
					if (oLabelInfo.quickinfo) {
						if (!this._oSmartField.getTooltipLabel()) {
							this.setTooltip(oLabelInfo.quickinfo);
						}
					}
				}
			}
	
			if (!oLabelInfo || !oLabelInfo.quickinfo) {
				if (!this._oSmartField.getTooltipLabel()) {
					this.setTooltip(this.getText());
				}
			}
		}
	};
	
	/**
	 * assign the label to a control.
	 * 
	 * @param {sap.ui.comp.SmartField} oSmartField is the smart control
	 * @public
	 */
	SmartLabel.prototype.setLabelFor = function(oSmartField) {
	
		if (oSmartField) {

			if (typeof oSmartField === 'string') {
				this._oSmartField = sap.ui.getCore().getControl(oSmartField);
				if (!this._oSmartField) {
					this._sSmartFieldId = oSmartField;
				}

			} else {
				this._oSmartField = oSmartField;
			}

			this._setLabelFor();
		}
	};
	
	SmartLabel.prototype._setLabelFor = function() {

		var oDataProperty;

		if (this._oSmartField) {
			if (this._oSmartField.getDataProperty) {
				oDataProperty = this._oSmartField.getDataProperty();
				if (oDataProperty) {
					this.getLabelInfo();
				} else {
					this._oSmartField.attachInitialise(jQuery.proxy(this.getLabelInfo, this));
				}
			}

			sap.m.Label.prototype.setLabelFor.apply(this, [
				this._oSmartField
			]);
		}
	};	
	
	/**
	 * Retrieve all label related data from the OData property of a field
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {object} describing label specific data
	 * @private
	 */
	SmartLabel.prototype._getLabelInfo = function(oProperty) {

		if (oProperty) {
			var sText = null;
			if (oProperty.extensions["sap:label"]) {
				sText = oProperty.extensions["sap:label"].value ? oProperty.extensions["sap:label"].value : oProperty.extensions["sap:label"];
			}
			var sQuickInfo = null;
			if (oProperty.extensions["sap:quickinfo"]) {
				sQuickInfo = oProperty.extensions["sap:quickinfo"].value ? oProperty.extensions["sap:quickinfo"].value : oProperty.extensions["sap:quickinfo"];
			}
			return {
				text: sText ? sText : null,
				quickinfo: sQuickInfo ? sQuickInfo : null
			};
		}
	};
	
	
	SmartLabel.prototype.onBeforeRendering = function() {

		if (this._sSmartFieldId) {
			this._oSmartField = sap.ui.getCore().getControl(this._sSmartFieldId);
			this._setLabelFor();

			this._sSmartFieldId = null;
		}

	};
	
	/**
	 * Cleans up the resources associated with this element and all its children. After an element has been destroyed, it can no longer be used in the UI!
	 * Applications should call this method, if they don't need the element any longer.
	 * 
	 * @param {boolean} bSuppressInvalidate if <code>true</code>, the UI element is not marked for redraw.
	 * @public
	 */
	SmartLabel.prototype.destroy = function(bSuppressInvalidate) {

	
		this._oSmartField = null;
		this._sSmartFieldId = null;
		
		Label.prototype.destroy.apply(this, [
			bSuppressInvalidate
		]);
	};
	

	return SmartLabel;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfield/SmartLabel.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartLabelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartfield.SmartLabelRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.LabelRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartLabelRenderer",['jquery.sap.global', 'sap/m/LabelRenderer'],
	function(jQuery, LabelRenderer) {
	"use strict";


	/**
	 * @class SmartLabel renderer.
	 * @static
	 */
	var SmartLabelRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	SmartLabelRenderer.render = function(oRm, oControl) {
		LabelRenderer.render.call("", oRm, oControl);
	};
	

	return SmartLabelRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfield/SmartLabelRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.AbapBool') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * ABP Boolean data type.
 * 
 * @public
 * @name sap.ui.comp.smartfield.type.AbapBool
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @extends sap.ui.model.type.SimpleType.
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.model.FormatException} FormatException a reference to the format exception implementation.
 * @param {sap.ui.model.ParseException} ParseException a reference to the parse exception implementation.
 * @param {sap.ui.model.type.SimpleType} SimpleType a reference to the simple type implementation.
 * 
 * @returns {sap.ui.comp.smartfield.type.AbapBool} the boolean implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.AbapBool'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FormatException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/AbapBool",[	"jquery.sap.global", "sap/ui/model/FormatException", "sap/ui/model/ParseException", "sap/ui/model/SimpleType" ], function(jQuery, FormatException, ParseException, SimpleType) {
	"use strict";

	/**
	 * @public
	 * @constructor 
	 * Constructor for an ABAP Boolean type.
	 */
	var AbapBool = SimpleType.extend("sap.ui.comp.smartfield.type.AbapBool", {
		constructor: function() {
			SimpleType.apply(this, arguments);
			this.sName = "sap.ui.comp.smartfield.type.AbapBool";
		}
	});

	/**
	 * Formats the given boolean value to the given target type.
	 * 
	 * @param {boolean} bValue the value to be formatted
	 * @param {string} sTargetType the target type; may be "any" or "boolean".
	 * @returns {boolean} the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to
	 *          <code>null</code>
	 * @throws {sap.ui.model.FormatException} if <code>sTargetType</code> is unsupported.
	 * @public
	 */
	AbapBool.prototype.formatValue = function(bValue, sTargetType) {
		if (bValue === undefined || bValue === null) {
			return null;
		}

		switch (sTargetType) {
			case "boolean":
			case "any":
				return bValue === "X";
			default:
				throw new FormatException("Don't know how to format Boolean to " + sTargetType);
		}
	};

	/**
	 * Parses the given value from the given type to a boolean.
	 * 
	 * @param {boolean} oValue the value to be parsed.
	 * @param {string} sSourceType the source type, may be "boolean".
	 * @returns {boolean} the parsed value.
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string is neither "X" nor "".
	 * @public
	 */
	AbapBool.prototype.parseValue = function(oValue, sSourceType) {
		switch (sSourceType) {
			case "boolean":
				return (oValue === true) ? "X" : "";
			default:
				throw new ParseException("Don't know how to parse Boolean from " + sSourceType);
		}
	};

	/**
	 * Validates whether the given value in model representation is valid and meets the given constraints.
	 * 
	 * @param {boolean} sValue the value to be validated.
	 * @throws {sap.ui.model.ValidateException} if the value is not valid
	 * @public
	 */
	AbapBool.prototype.validateValue = function(sValue) {
		if (sValue !== null && sValue !== undefined) {
			if (sValue !== "X" && sValue !== "") {
				throw new ParseException("Invalid Boolean " + sValue);
			}
		}
	};

	return AbapBool;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/type/AbapBool.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.DateTime') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Date Time data type that supports field-control.
 * 
 * @public
 * @name sap.ui.comp.smartfield.type.DateTime
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.DateTime
 * @param {sap.ui.model.odata.type.DateTime} DateTimeBase a reference to the date time implementation.
 * @returns {sap.ui.comp.smartfield.type.DateTime} the date time implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.DateTime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.DateTime'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/DateTime",[	"sap/ui/model/odata/type/DateTime" ], function(DateTimeBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.DateTime</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @public
	 */
	var DateTime = DateTimeBase.extend("sap.ui.comp.smartfield.type.DateTime", {
		constructor: function(oFormatOptions, oConstraints) {
			DateTimeBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>Date</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {Date} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DateTime.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DateTimeBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	DateTime.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.DateTime";
	};

	return DateTime;
});

}; // end of sap/ui/comp/smartfield/type/DateTime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.DateTimeOffset') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Date Time Offset data type that supports field-control.
 * 
 * @public
 * @name sap.ui.comp.smartfield.type.DateTimeOffset
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.DateTimeOffset
 * @param {sap.ui.model.odata.type.DateTimeOffset} DateTimeBase a reference to the date time implementation.
 * @returns {sap.ui.comp.smartfield.type.DateTimeOffset} the date time implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.DateTimeOffset'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.DateTimeOffset'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/DateTimeOffset",[	"sap/ui/model/odata/type/DateTimeOffset" ], function(DateTimeBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.DateTimeOffset</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @public
	 */
	var DateTimeOffset = DateTimeBase.extend("sap.ui.comp.smartfield.type.DateTimeOffset", {
		constructor: function(oFormatOptions, oConstraints) {
			DateTimeBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>Date</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {Date} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DateTimeOffset.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DateTimeBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	DateTimeOffset.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.DateTimeOffset";
	};

	return DateTimeOffset;
});

}; // end of sap/ui/comp/smartfield/type/DateTimeOffset.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Decimal') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Decimal data type that supports field-control.
 * 
 * @public
 * @name sap.ui.comp.smartfield.type.Decimal
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Decimal
 * @param {sap.ui.model.odata.type.Decimal} DecimalBase a reference to the decimal implementation.
 * @returns {sap.ui.comp.smartfield.type.Decimal} the decimal implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Decimal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Decimal'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Decimal",[	"sap/ui/model/odata/type/Decimal" ], function(DecimalBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Decimal</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @public
	 */
	var DecimalType = DecimalBase.extend("sap.ui.comp.smartfield.type.Decimal", {
		constructor: function(oFormatOptions, oConstraints) {
			DecimalBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>decimal</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {decimal} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DecimalType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DecimalBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	DecimalType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Decimal";
	};

	return DecimalType;
});

}; // end of sap/ui/comp/smartfield/type/Decimal.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Int16') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * 16 byte integer data type that supports field-control.
 * 
 * @public
 * @name sap.ui.comp.smartfield.type.Int16
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Int16
 * @param {sap.ui.model.odata.type.Int16} IntBase a reference to the integer implementation.
 * @returns {sap.ui.comp.smartfield.type.Int16} the decimal implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Int16'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Int16'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Int16",[	"sap/ui/model/odata/type/Int16" ], function(IntBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Int16</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @public
	 */
	var Int16Type = IntBase.extend("sap.ui.comp.smartfield.type.Int16", {
		constructor: function(oFormatOptions, oConstraints) {
			IntBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {integer} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Int16Type.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = IntBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	Int16Type.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Int16";
	};

	return Int16Type;
});

}; // end of sap/ui/comp/smartfield/type/Int16.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Int32') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * 32 byte integer data type that supports field-control.
 * 
 * @public
 * @name sap.ui.comp.smartfield.type.Int32
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Int32
 * @param {sap.ui.model.odata.type.Int32} IntBase a reference to the integer implementation.
 * @returns {sap.ui.comp.smartfield.type.Int32} the decimal implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Int32'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Int32'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Int32",[	"sap/ui/model/odata/type/Int32" ], function(IntBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Int32</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @public
	 */
	var Int32Type = IntBase.extend("sap.ui.comp.smartfield.type.Int32", {
		constructor: function(oFormatOptions, oConstraints) {
			IntBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {integer} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Int32Type.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = IntBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	Int32Type.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Int32";
	};

	return Int32Type;
});

}; // end of sap/ui/comp/smartfield/type/Int32.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.SByte') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * SByte data type that supports field-control.
 * 
 * @public
 * @name sap.ui.comp.smartfield.type.SByte
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.SByte
 * @param {sap.ui.model.odata.type.SByte} SByteBase a reference to the integer implementation.
 * @returns {sap.ui.comp.smartfield.type.SByte} the decimal implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.SByte'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.SByte'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/SByte",[	"sap/ui/model/odata/type/SByte" ], function(SByteBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.SByte</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @public
	 */
	var SByteType = SByteBase.extend("sap.ui.comp.smartfield.type.SByte", {
		constructor: function(oFormatOptions, oConstraints) {
			SByteBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {integer} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	SByteType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = SByteBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	SByteType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.SByte";
	};

	return SByteType;
});

}; // end of sap/ui/comp/smartfield/type/SByte.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.String') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * String data type that supports field-control.
 * 
 * @public
 * @name sap.ui.comp.smartfield.type.String
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.String
 * @param {sap.ui.model.odata.type.String} StringBase a reference to the string implementation.
 * @returns {sap.ui.comp.smartfield.type.String} the string implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.String'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.String'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/String",[	"sap/ui/model/odata/type/String" ], function(StringBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.String</code>.
	 * 
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @public
	 */
	var StringType = StringBase.extend("sap.ui.comp.smartfield.type.String", {
		constructor: function(oFormatOptions, oConstraints) {
			StringBase.apply(this, [
				oFormatOptions, oConstraints
			]);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>string</code>.
	 * 
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {string} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	StringType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = StringBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};
	
	/**
	 * Returns the type's name.
	 * 
	 * @returns {string} the type's name
	 * @public
	 */
	StringType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.String";
	};

	return StringType;
});

}; // end of sap/ui/comp/smartfield/type/String.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.AdditionalConfigurationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfilterbar.AdditionalConfigurationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/AdditionalConfigurationHelper",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @public
	 * @constructor
	 */
	var AdditionalConfigurationHelper = function(aControlConfiguration, aGroupConfiguration) {
		this.controlConfiguration = [];
		this.groupConfiguration = [];
		this._initialize(aControlConfiguration, aGroupConfiguration);
	};
	
	/**
	 * Fills the internal structures
	 * 
	 * @private
	 */
	AdditionalConfigurationHelper.prototype._initialize = function(aControlConfiguration, aGroupConfiguration) {
		var i, length, oGroupConfiguration, oControlConfiguration, o, aDefaultFilterValues, oDefaultFilterValue, j, length2, oo;
	
		if (!aControlConfiguration) {
			aControlConfiguration = [];
		}
	
		if (!aGroupConfiguration) {
			aGroupConfiguration = [];
		}
	
		// Control Configuration
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			oControlConfiguration = aControlConfiguration[i];
			o = {};
			o.key = oControlConfiguration.getKey();
			o.groupId = oControlConfiguration.getGroupId();
			o.index = oControlConfiguration.getIndex();
			o.label = oControlConfiguration.getLabel();
			o.isVisible = oControlConfiguration.getVisible();
			o.mandatory = oControlConfiguration.getMandatory();
			o.width = oControlConfiguration.getWidth();
			o.hasValueHelpDialog = oControlConfiguration.getHasValueHelpDialog();
			o.hasTypeAhead = oControlConfiguration.getHasTypeAhead();
			o.controlType = oControlConfiguration.getControlType();
			o.filterType = oControlConfiguration.getFilterType();
			o.customControl = oControlConfiguration.getCustomControl();
			o.visibleInAdvancedArea = oControlConfiguration.getVisibleInAdvancedArea();
			o.preventInitialDataFetchInValueHelpDialog = oControlConfiguration.getPreventInitialDataFetchInValueHelpDialog();
			o.displayBehaviour = oControlConfiguration.getDisplayBehaviour();
			o.defaultFilterValues = [];
			aDefaultFilterValues = oControlConfiguration.getDefaultFilterValues();
			if (aDefaultFilterValues && aDefaultFilterValues.length) {
				length2 = aDefaultFilterValues.length;
				for (j = 0; j < length2; j++) {
					oDefaultFilterValue = aDefaultFilterValues[j];
					oo = {};
					oo.sign = oDefaultFilterValue.getSign();
					oo.operator = oDefaultFilterValue.getOperator();
					oo.low = oDefaultFilterValue.getLow();
					oo.high = oDefaultFilterValue.getHigh();
					o.defaultFilterValues.push(oo);
				}
			}
			this.controlConfiguration.push(o);
		}
	
		// Group Configuration
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			oGroupConfiguration = aGroupConfiguration[i];
			o = {
				key: oGroupConfiguration.getKey(),
				index: oGroupConfiguration.getIndex(),
				label: oGroupConfiguration.getLabel()
			};
			this.groupConfiguration.push(o);
		}
	};
	
	/**
	 * Returns the control configuration for a specified key. Returns undefined, if there is no configuration.
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getControlConfigurationByKey = function(sKey) {
		var i, length;
	
		length = this.controlConfiguration.length;
		for (i = 0; i < length; i++) {
			if (this.controlConfiguration[i].key === sKey) {
				return this.controlConfiguration[i];
			}
		}
		return undefined;
	};
	
	/**
	 * Returns all control configurations
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getControlConfiguration = function() {
		return this.controlConfiguration;
	};
	
	/**
	 * Returns all group configurations
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getGroupConfiguration = function() {
		return this.groupConfiguration;
	};
	
	/**
	 * Returns the control configuration for a specified key. Returns undefined, if there is no configuration.
	 */
	AdditionalConfigurationHelper.prototype.getGroupConfigurationByKey = function(sKey) {
		var i, length;
	
		length = this.groupConfiguration.length;
		for (i = 0; i < length; i++) {
			if (this.groupConfiguration[i].key === sKey) {
				return this.groupConfiguration[i];
			}
		}
		return undefined;
	};
	

	return AdditionalConfigurationHelper;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfilterbar/AdditionalConfigurationHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.ControlConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.ControlConfiguration.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.ControlConfiguration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/ControlConfiguration",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new smartfilterbar/ControlConfiguration.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A ControlConfiguration can be used to add additional configuration for filter fields in the SmartFilterBar, in order to overwrite the default settings from the OData metadata. For instance it is possible to change the label, index or control type of a filter field.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.ControlConfiguration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ControlConfiguration = Element.extend("sap.ui.comp.smartfilterbar.ControlConfiguration", /** @lends sap.ui.comp.smartfilterbar.ControlConfiguration.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * The key property shall correspond to the field name from the OData service $metadata document.
			 */
			key : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName from the OData metadata. It is also possible to move a field from the advanced area to the basic area by specifying the groupId _BASIC.
			 */
			groupId : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.
			 */
			label : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Using this flag it is possible to hide fields from the OData metadata.
			 */
			visible : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * Specifies whether a value help dialog is available or not.
			 */
			hasValueHelpDialog : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple OData Attributes and annotations. Using this property it is possible to overwrite the OData metadat. Possible values can be found here:
			 * sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE
			 */
			controlType : {type : "string", group : "Misc", defaultValue : 'auto'},
	
			/**
			 * The filter type specifies whether the filter fields is e.g. type single value, multi-value,or interval.
			 * The filter type is being calculated by the martFilterBar based on the OData metadata. Using this property the filter type can be configured manually.
			 * Possible value scan be found here: sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE
			 */
			filterType : {type : "string", group : "Misc", defaultValue : 'auto'},
	
			/**
			 * The zero based index can be used to specify the order of fields.
			 */
			index : {type : "any", group : "Misc", defaultValue : undefined},
	
			/**
			 * Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g it does not work for DrodDownListbox
			 */
			hasTypeAhead : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * Property can be used to overwrite the mandatory state of a filter field.
			 * Possible values: sap.ui.comp.smartfilterbar.ControlConfiguration.MANDATORY
			 * Property can only be set during initialisation. Changes at runtime will be ignored.
			 */
			mandatory : {type : "string", group : "Misc", defaultValue : 'auto'},
	
			/**
			 * The width of the filter field in a CSS compatible format.
			 * The width can be set only once during initialisation. Changes at runtime will not be reflected.
			 * The width will not be applied to custom controls.
			 */
			width : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.
			 */
			visibleInAdvancedArea : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * In case there are value help annotations for this filter field, it is possible to specify whether the table in the value help dialog for this field will be filled initially. The default value is flase, which menas the table will be filled as the data fetch is not being prevented.
			 */
			preventInitialDataFetchInValueHelpDialog : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * The displayBehaviour specifies how the content should be displayed on certain controls.
			 * Ex: DescriptionOnly for Combobox (DropDown text) , Description and ID for MultiInput (token text)
			 * 
			 * Possible values can be found here: sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR
			 */
			displayBehaviour : {type : "string", group : "Misc", defaultValue : 'auto'}
		},
		aggregations : {
	
			/**
			 * Default value for a filter field.
			 */
			defaultFilterValues : {type : "sap.ui.comp.smartfilterbar.SelectOption", multiple : true, singularName : "defaultFilterValue"}, 
	
			/**
			 * If a custom control is specified, the Smart Filter Bar will not create a control but use the custom control. Additional services like TypeAhead have to implemented manually.
			 */
			customControl : {type : "sap.ui.core.Control", multiple : false}
		},
		events : {
	
			/**
			 * Fired when the value of a property, for example isVisible, has changed
			 */
			change : {
				parameters : {
	
					/**
					 * Name of the changed property
					 */
					propertyName : {type : "string"}
				}
			}
		}
	}});
	
	ControlConfiguration.prototype.setFilterType = function(sFilterType) {
		if (!ControlConfiguration.FILTERTYPE[sFilterType]) {
			throw "FilterType " + sFilterType + " is invalid";
		}
		this.setProperty("filterType", sFilterType);
	};
	
	ControlConfiguration.prototype.setControlType = function(sControlType) {
		if (!ControlConfiguration.CONTROLTYPE[sControlType]) {
			throw "ControlType " + sControlType + " is invalid";
		}
		this.setProperty("controlType", sControlType);
	};
	
	ControlConfiguration.prototype.setMandatory = function(sMandatory) {
		if (!ControlConfiguration.MANDATORY[sMandatory]) {
			throw "Mandatory state " + sMandatory + " is invalid";
		}
		this.setProperty("mandatory", sMandatory);
	};
	
	ControlConfiguration.prototype.setVisible = function(bIsVisible) {
		this.setProperty("visible", bIsVisible);
		this.fireChange({
			propertyName: "visible"
		});
	};
	
	ControlConfiguration.prototype.setLabel = function(sLabel) {
		this.setProperty("label", sLabel);
		this.fireChange({
			propertyName: "label"
		});
	};
	
	ControlConfiguration.prototype.setVisibleInAdvancedArea = function(bVisible) {
		this.setProperty("visibleInAdvancedArea", bVisible);
		this.fireChange({
			propertyName: "visibleInAdvancedArea"
		});
	};
	
	ControlConfiguration.prototype.setDisplayBehaviour = function(sDisplayBehaviour) {
		if (!ControlConfiguration.DISPLAYBEHAVIOUR[sDisplayBehaviour]) {
			throw "DisplayBehaviour " + sDisplayBehaviour + " is invalid";
		}
		this.setProperty("displayBehaviour", sDisplayBehaviour);
	};
	
	ControlConfiguration.FILTERTYPE = {
		auto: "auto",
		single: "single",
		multiple: "multiple",
		interval: "interval"
	};
	
	ControlConfiguration.CONTROLTYPE = {
		auto: "auto",
		input: "input",
		dropDownList: "dropDownList",
		date: "date"
	};
	
	ControlConfiguration.MANDATORY = {
		auto: "auto",
		mandatory: "mandatory",
		notMandatory: "notMandatory"
	};
	
	ControlConfiguration.DISPLAYBEHAVIOUR = {
		auto: "auto",
		descriptionOnly: "descriptionOnly",
		descriptionAndId: "descriptionAndId",
		idOnly: "idOnly",
		idAndDescription: "idAndDescription"
	};

	return ControlConfiguration;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfilterbar/ControlConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.GroupConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.GroupConfiguration.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.GroupConfiguration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/GroupConfiguration",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new smartfilterbar/GroupConfiguration.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A GroupConfiguration can be used to add additional configurations for groups in the SmartFilterBar. A group in the SmartFilterBar is a group of filter fields in the advanced search.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.GroupConfiguration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GroupConfiguration = Element.extend("sap.ui.comp.smartfilterbar.GroupConfiguration", /** @lends sap.ui.comp.smartfilterbar.GroupConfiguration.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * The key property shall correspond to the name EntityTypeName from the OData service $metadata document.
			 */
			key : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Zero based integer index.
			 * The index can be used to specify the order of groups. If no index is specified, the order like in the OData metadata will be used.
			 */
			index : {type : "any", group : "Misc", defaultValue : undefined},
	
			/**
			 * Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.
			 */
			label : {type : "any", group : "Misc", defaultValue : undefined}
		},
		events : {
	
			/**
			 * Fired when the value of a property, for example label, has changed
			 */
			change : {
				parameters : {
	
					/**
					 * Name of the changed property
					 */
					propertyName : {type : "string"}
				}
			}
		}
	}});
	
	GroupConfiguration.prototype.setLabel = function(sLabel) {
		this.setProperty("label", sLabel);
		this.fireChange({
			propertyName: "label"
		});
	};

	return GroupConfiguration;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfilterbar/GroupConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.SelectOption') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.SelectOption.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.SelectOption'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/SelectOption",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new smartfilterbar/SelectOption.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A Select Option can be used to specify default filter values for a control configuration of the SmartFilterBar.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.SelectOption
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SelectOption = Element.extend("sap.ui.comp.smartfilterbar.SelectOption", /** @lends sap.ui.comp.smartfilterbar.SelectOption.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * The sign for a Select Option. Possible values are I for include or E for exclude. Constants can be found here: sap.ui.comp.smartfilterbar.SelectOption.SIGN
			 */
			sign : {type : "string", group : "Misc", defaultValue : 'I'},
	
			/**
			 * The operator for a select option. The default value is EQ "for equals". Possible values can be found here: sap.ui.comp.smartfilterbar.SelectOption.OPERATOR.
			 */
			operator : {type : "string", group : "Misc", defaultValue : 'EQ'},
	
			/**
			 * The low value for a select option.
			 */
			low : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The high value for a select option. The high value is only required for a few operators, e.g. BT (between).
			 */
			high : {type : "string", group : "Misc", defaultValue : null}
		}
	}});
	
	SelectOption.SIGN = {
		I: "I",
		include: "I",
		E: "E",
		exclude: "E"
	};
	
	SelectOption.OPERATOR = {
		EQ: "EQ",
		NE: "NE",
		CP: "CP",
		GT: "GT",
		GE: "GE",
		LT: "LT",
		LE: "LE",
		NP: "NP",
		BT: "BT",
		NB: "NB"
	};

	return SelectOption;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfilterbar/SelectOption.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.SmartFilterBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfilterbar.SmartFilterBarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/SmartFilterBarRenderer",['jquery.sap.global', 'sap/ui/comp/filterbar/FilterBarRenderer'],
	function(jQuery, FilterBarRenderer) {
	"use strict";


	/**
	 * @class SmartFilterBar renderer.
	 * @static
	 */
	var SmartFilterBarRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should be rendered
	 */
	SmartFilterBarRenderer.render = function(oRm, oControl) {
		FilterBarRenderer.render.call(this, oRm, oControl); // Call base class
	};
	

	return SmartFilterBarRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfilterbar/SmartFilterBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.Group') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.Group.
jQuery.sap.declare('sap.ui.comp.smartform.Group'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.SimpleChanges'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormContainer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/Group",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control', 'sap/ui/fl/registry/ChangeRegistry', 'sap/ui/fl/registry/SimpleChanges', 'sap/ui/layout/ResponsiveFlowLayoutData', 'sap/ui/layout/form/FormContainer'],
	function(jQuery, library, Control, ChangeRegistry, SimpleChanges, ResponsiveFlowLayoutData, FormContainer) {
	"use strict";

	/**
	 * Constructor for a new smartform/Group.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Groups are used to group group elements.
	 * @extends sap.ui.core.Control
	 *
	 * @author Alexander Fürbach
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.Group
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Group = Control.extend("sap.ui.comp.smartform.Group", /** @lends sap.ui.comp.smartform.Group.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Label for the group.
			 */
			label : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Specifies whether the group shall be expandable.
			 */
			expandable : {type : "boolean", group : "Misc", defaultValue : false}
		},
		defaultAggregation : "groupElements",
		aggregations : {
	
			/**
			 * A GroupElement is a combination of one label and different controls associated to this label.
			 */
			groupElements : {type : "sap.ui.comp.smartform.GroupElement", multiple : true, singularName : "groupElement"}, 
	
			/**
			 * Layout to specify how the group shall be rendered (e.g. span and line-break)
			 */
			layout : {type : "sap.ui.layout.GridData", multiple : false}
		}
	}});
	
	
	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	Group.prototype.init = function() {
		if (!Group._bHasRegisteredToFlexibilityServices) {		
			var oChangeRegistry = ChangeRegistry.getInstance();
			// hide/show group
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),
					SimpleChanges.hideControl);
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),
					SimpleChanges.unhideControl);
			// change group label
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),
					SimpleChanges.renameGroup);
			// add group element
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),
					SimpleChanges.addField);
			// move group elements
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),
					SimpleChanges.moveFields);
			Group._bHasRegisteredToFlexibilityServices = true;
		}
	
		var oResponsiveLayout = new ResponsiveFlowLayoutData({
			"linebreak" : true,
			"linebreakable" : true
		});
		this._oFormContainer = new FormContainer({
			"expandable" : this.getExpandable(),
			"layoutData" : oResponsiveLayout
		});
		this._updateFormContainerLabel();
	};
	
	Group._bHasRegisteredToFlexibilityServices = false;
	
	/**
	 * Setter for property editable of all smart fields in children hierarchy.
	 * 
	 * @param {boolean}
	 *          bEditMode new value for editable property of smart fields.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.setEditMode = function(bEditMode) {
	
		var aGroupElement = this.getGroupElements();
	
		aGroupElement.forEach(function(oGroupElement) {
			oGroupElement.setEditMode(bEditMode);
		});
		return this;
	
	};
	
	/**
	 * Updates title of form container
	 * 
	 * @private
	 */
	Group.prototype._updateFormContainerLabel = function() {
		var oTitle;
		oTitle = new sap.ui.core.Title({
			text : this.getLabel()
		});
		this._oFormContainer.setTitle(oTitle);
	};
	
	/**
	 * Sets the given value for the given property.
	 * 
	 * @param {string} sPropertyName the property to set the value for
	 * @param {any}
	 *          oValue value to set the property to.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.setProperty = function(sPropertyName, oValue) {
		var returnValue;
		returnValue = Control.prototype.setProperty.apply(this, arguments);
	
		if (sPropertyName === 'label') {
			this._updateFormContainerLabel();
		}
		if (sPropertyName === 'expandable') {
			this._oFormContainer.setExpandable(oValue);
		}
		if (sPropertyName === 'visible') {
			this._oFormContainer.setVisible(oValue);
		}
		return returnValue;
	};
	
	/**
	 * Gets the form container.
	 * 
	 * @return {sap.ui.layout.FormContainer} the form container
	 * @public
	 */
	Group.prototype.getFormContainer = function() {
		return this._oFormContainer;
	};
	
	/**
	 * Sets the form container.
	 * 
	 * @param {sap.ui.layout.FormContainer}
	 *          oFormContainer form container to set
	 * @public
	 */
	Group.prototype.setFormContainer = function(oFormContainer) {
		this._oFormContainer = oFormContainer;
	};
	
	/**
	 * Adds some entity to the given aggregation.
	 * 
	 * @param {string}
	 *          sAggregationName the strung identifying the aggregation that oObject should be added to.
	 * @param {sap.ui.base.ManagedObject}
	 *          oObject the object to add.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.addAggregation = function(sAggregationName, oObject) {
		if (sAggregationName === "groupElements") {
			this._oFormContainer.addFormElement(oObject.getFormElement());
		}
		return Control.prototype.addAggregation.apply(this, arguments);
	};
	
	/**
	 * Sets a new object in the named 0..1 aggregation.
	 * 
	 * @param {string}
	 *          sAggregationName name of an 0..1 aggregation.
	 * @param {sap.ui.base.ManagedObject}
	 *          oObject the managed object that is set as aggregated object.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.setAggregation = function(sAggregationName, oObject) {
		if (sAggregationName === "layout") {
			if (this._oFormContainer) {
				this._oFormContainer.setAggregation("layoutData", oObject);
			}
		} else {
			return Control.prototype.setAggregation.apply(this, arguments);
		}
	};
	
	/**
	 * Adds some GroupElement into the aggregation <code>groupElements</code>
	 * 
	 * @param {sap.ui.comp.smartform.GroupElement}
	 *          oGroupElement group element to add to aggregation named groupElements.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.addGroupElement = function(oGroupElement) {
		this._oFormContainer.addFormElement(oGroupElement.getFormElement());
		return this.addAggregation("groupElements", oGroupElement);
	};
	
	/**
	 * Adds some CustomeData into the aggregation <code>customData</code>. Additionally the customData is also added to
	 * the SmartFields in the children hierarchy
	 * 
	 * @param {sap.ui.core.CustomData}
	 *          oCustomData the customData to add.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.addCustomData = function(oCustomData) {
		Control.prototype.addCustomData.apply(this, arguments);
	
		var aGroupElement = this.getGroupElements();
	
		aGroupElement.forEach(function(oGroupElement) {
			oGroupElement.addCustomData(oCustomData.clone());
		});
		return this;
	};
	
	/**
	 * Inserts a GroupElement into the aggregation <code>groupElements</code>
	 * 
	 * @param {sap.ui.comp.smartform.GroupElement}
	 *          oGroupElement group element to insert into aggregation named groupElements.
	 * @param {int}
	 *          iIndex the 0-based index the GroupElement should be inserted at.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.insertGroupElement = function(oGroupElement, iIndex) {
		this._oFormContainer.insertFormElement(oGroupElement.getFormElement(), iIndex);
		return this.insertAggregation("groupElements", oGroupElement, iIndex);
	};
	
	/**
	 * Removes a GroupElement from the aggregation <code>groupElements</code>
	 * 
	 * @param {int|string|sap.ui.comp.smartform.GroupElement}
	 *          vGroupElement the GroupElement to remove or its index or id.
	 * @return {sap.ui.comp.smartform.GroupElement} the removed GroupElement or null.
	 * @public
	 */
	Group.prototype.removeGroupElement = function(vGroupElement) {
		var oGroupElement = null;
		var aGroupElement = [];
		var i = 0;
	
		if (vGroupElement instanceof sap.ui.comp.smartform.GroupElement) {
			oGroupElement = vGroupElement;
		} else {
			aGroupElement = this.getGroupElements();
			if (typeof vGroupElement === "number") {
				oGroupElement = aGroupElement[vGroupElement];
			} else if (typeof vGroupElement === "string") {
				for (i; i < aGroupElement.length; i++) {
					if (aGroupElement[i].sId === vGroupElement) {
						oGroupElement = aGroupElement[i];
						break;
					}
				}
			}
		}
	
		if (oGroupElement) {
			this._oFormContainer.removeFormElement(oGroupElement.getFormElement());
			return this.removeAggregation("groupElements", oGroupElement);
		} else {
			return null;
		}
	};
	
	/**
	 * Removes all group elements from the aggregation <code>groupElements</code>
	 * 
	 * @param {int|string|sap.ui.comp.smartform.GroupElement}
	 *          the GroupElement to remove or its index or id.
	 * @return {sap.ui.comp.smartform.GroupElement[]} an array of the removed elements.
	 * @public
	 */
	Group.prototype.removeAllGroupElements = function() {
		this._oFormContainer.removeAllFormElements();
		return this.removeAllAggregation("groupElements");
	};
	
	/**
	 * Destroys all the group elements in the aggregation <code>groupElements</code>
	 * 
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.destroyGroupElements = function() {
		this._oFormContainer.destroyFormElements();
		return this.destroyAggregation("groupElements");
	};
	

	return Group;

}, /* bExport= */ true);
}; // end of sap/ui/comp/smartform/Group.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.GroupElement') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.GroupElement.
jQuery.sap.declare('sap.ui.comp.smartform.GroupElement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.SimpleChanges'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/GroupElement",[
	'jquery.sap.global', 'sap/m/Label', 'sap/ui/comp/library', 'sap/ui/core/Control', 'sap/ui/fl/registry/ChangeRegistry', 'sap/ui/fl/registry/SimpleChanges'
], function(jQuery, Label, library, Control, ChangeRegistry, SimpleChanges) {
	"use strict";

	/**
	 * Constructor for a new smartform/GroupElement.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A GroupElement is a combination of one label and different controls associated to this label.
	 * @extends sap.ui.core.Control
	 * @author Alexander Fürbach
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.GroupElement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GroupElement = Control.extend("sap.ui.comp.smartform.GroupElement", /** @lends sap.ui.comp.smartform.GroupElement.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Label of the fields/elements. If not set the control will use label from metadata.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Index of element to be used for label determination
				 */
				elementForLabel: {
					type: "int",
					group: "Misc",
					defaultValue: 0
				}
			},
			defaultAggregation: "elements",
			aggregations: {

				/**
				 * Aggregation of controls to be displayed together with a label.
				 */
				elements: {
					type: "sap.ui.core.Control",
					multiple: true,
					singularName: "element"
				}
			}
		}
	});

	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	GroupElement.prototype.init = function() {
		// Register to flexibility services statically(only once when the first instance is getting created)
		if (!GroupElement._bHasRegisteredToFlexibilityServices) {
			var oChangeRegistry = ChangeRegistry.getInstance();
			// change Element element label
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(), SimpleChanges.renameField);
			// hide/show Element element
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(), SimpleChanges.hideControl);
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(), SimpleChanges.unhideControl);
			GroupElement._bHasRegisteredToFlexibilityServices = true;
		}
		this.oFormElement = new sap.ui.layout.form.FormElement();
		this._oView = null;
		this._sViewBindingPath = "";
		this._bLayoutApplied = false;
		this._sLabelBindingPath = "";
		this._sEditMode = false;
		this._oLabel = null;
	};

	GroupElement._bHasRegisteredToFlexibilityServices = false;

	/**
	 * Updates the label of the form element.
	 * 
	 * @private
	 */
	GroupElement.prototype.updateLabelOfFormElement = function() {

		var aField = this.oFormElement.getFields();
		var iIndex = this.getElementForLabel();

		if (!this._oLabel) {
			if (aField.length > iIndex && aField[iIndex].getMetadata().getName() === "sap.ui.comp.smartfield.SmartField") {
				if (aField[iIndex].getShowLabel()) {
					if (this.getLabel()) {
						aField[iIndex].setTextLabel(this.getLabel());
					}
					this._oLabel = new sap.ui.comp.smartfield.SmartLabel(); // aField[iIndex].getSmartLabel();
					this._oLabel.setLabelFor(aField[iIndex]);
				}
			} else {
				this._oLabel = new Label();
				if (this.getLabel()) {
					this._oLabel.setText(this.getLabel());
				}
			}
		} else if (this.getLabel()) {
			if (aField.length > iIndex && aField[iIndex].getMetadata().getName() === "sap.ui.comp.smartfield.SmartField") {
				aField[iIndex].setTextLabel(this.getLabel());
				this._oLabel = new sap.ui.comp.smartfield.SmartLabel(); // aField[iIndex].getSmartLabel();
				this._oLabel.setLabelFor(aField[iIndex]);
			} else {
				this._oLabel.setText(this.getLabel());
			}
		}

		if (this._oLabel) {
			this.oFormElement.setLabel(this._oLabel);
		}
	};

	/**
	 * Setter for property editable of all smart fields in children hierarchy.
	 * 
	 * @param {boolean} bEditMode new value for editable property of smart fields.
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.setEditMode = function(bEditMode) {

		this._bEditMode = bEditMode;

		var aElement = this.getElements();
		var aItem = [];

		aElement.forEach(function(oElement) {
			if (oElement.getMetadata().getName() === "sap.m.VBox") {
				aItem = oElement.getItems();
				aItem.forEach(function(oItem) {
					if (oItem.getMetadata().getName() === "sap.ui.comp.smartfield.SmartField") {
						if (!(oItem.data("editable") === false)) {
							oItem.setEditable(bEditMode);
						}
					}
				});
			} else if (oElement.getMetadata().getName() === "sap.ui.comp.smartfield.SmartField") {
				if (!(oElement.data("editable") === false)) {
					oElement.setEditable(bEditMode);
				}
			}
		});
		return this;

	};

	/**
	 * Updates the visibility of the FormElement
	 * 
	 * @private
	 */
	GroupElement.prototype._updateFormElementVisibility = function() {
		if (this.getVisible() === false) {
			return;
		}
		var aFields = this.oFormElement.getFields();
		var bVisible = aFields.some(function(oField) {
			return oField.getVisible();
		});
		if (this.oFormElement.getVisible() != bVisible) {
			this.oFormElement.setVisible(bVisible);
		}
	};

	/**
	 * Returns the text of the label.
	 * 
	 * @return {string} text of the label.
	 * @public
	 */
	GroupElement.prototype.getLabelText = function() {
		if (this._oLabel) {
			if (this._oLabel.getText) {
				return this._oLabel.getText();
			}
		}
	};

	/**
	 * Getter for property <code>label</code>.
	 * 
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.getLabel = function() {
		var sLabel = this.getProperty("label");
		if (!sLabel && this._oLabel) {
			sLabel = this._oLabel.getText();
		}
		return sLabel;
	};

	GroupElement.prototype.onAfterRendering = function() {
		this._bLayoutApplied = false;
	};

	GroupElement.prototype.onBeforeRendering = function() {

		var aFields = this.oFormElement.getFields();

		if (this.getParent().getParent().getProperty("useHorizontalLayout") && !this._bLayoutApplied) {
			this._bLayoutApplied = true;
			this.oFormElement.removeAllFields();
			this.oFormElement.addField(new sap.m.VBox({
				"items": [
					this._oLabel
				].concat(aFields)
			}));
		}
	};

	/**
	 * Sets the given value for the given property
	 * 
	 * @param {string} sPropertyName name of the property to set
	 * @param {any} oValue value to set the property to
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.setProperty = function(sPropertyName, oValue) {
		var returnValue;
		returnValue = Control.prototype.setProperty.apply(this, arguments);
		if (sPropertyName === 'label') {
			this.updateLabelOfFormElement();
		}
		if (sPropertyName === 'visible') {
			this.oFormElement.setVisible(oValue);
			this._updateFormElementVisibility();
		}
		return returnValue;
	};

	/**
	 * Returns the from element.
	 * 
	 * @return {sap.ui.layout.form.FormElement} the form element.
	 * @public
	 */
	GroupElement.prototype.getFormElement = function() {
		return this.oFormElement;
	};

	/**
	 * Adds some control into the aggregation <code>elements</code>
	 * 
	 * @param {sap.ui.core.Control} oElement the control to add.
	 * @public
	 */
	GroupElement.prototype.addElement = function(oElement) {
		var that = this;
		if (oElement.getEditable) {
			if (!oElement.getEditable()) {
				oElement.data("editable", false);
			}
		}
		if (oElement.attachVisibleChanged) {
			oElement.attachVisibleChanged(function(oEvent) {
				that._updateFormElementVisibility();
			});
		}
		this.oFormElement.addField(oElement);
		this.updateLabelOfFormElement();
	};

	/**
	 * Adds some CustomeData into the aggregation <code>customData</code>. Additionally the customData is also added to the SmartFields in the
	 * children hierarchy
	 * 
	 * @param {sap.ui.core.CustomData} oCustomData the customData to add.
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.addCustomData = function(oCustomData) {
		Control.prototype.addCustomData.apply(this, arguments);

		var aElement = this.getFormElement().getFields();

		aElement.forEach(function(oElement) {
			if (oElement.getMetadata().getName() === "sap.ui.comp.smartfield.SmartField") {
				if (oCustomData.getKey() === "defaultDropDownDisplayBehaviour") {
					var oConfiguration = oElement.getConfiguration();
					if (!oConfiguration) {
						oConfiguration = new sap.ui.comp.smartfield.Configuration();
						oElement.setConfiguration(oConfiguration);
					}
					if (oConfiguration.getDisplayBehaviour() === "auto") {
						oConfiguration.setDisplayBehaviour(oCustomData.getValue());
					}
				}
				oElement.addCustomData(oCustomData.clone());
			}
		});
		return this;
	};

	/**
	 * Returns the aggregated object(s) for the named aggregation.
	 * 
	 * @param {string} sAggregationName the name of the aggregation
	 * @return {sap.ui.base.ManagedObject[]} the aggregation object
	 * @public
	 */
	GroupElement.prototype.getAggregation = function(sAggregationName) {
		if (sAggregationName === 'elements') {
			return this.getElements();
		}

		return Control.prototype.getAggregation.apply(this, arguments);
	};

	/**
	 * Inserts a control into the aggregation <code>elements</code>
	 * 
	 * @param {sap.ui.core.Control} oElement the control to insert into aggregation named elements.
	 * @param {int} iIndex the 0-based index the control should be inserted at.
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.insertElement = function(oElement, iIndex) {
		this.oFormElement.insertField.apply(this.oFormElement, arguments);
		return this;
	};

	/**
	 * Removes a control from the aggregation <code>elements</code>
	 * 
	 * @param {int|string|sap.ui.comp.smartform.GroupElement} vElement the GroupElement to remove or its index or id.
	 * @return {sap.ui.core.Control} the removed control or null.
	 * @public
	 */
	GroupElement.prototype.removeElement = function(vElement) {
		return this.oFormElement.removeField.apply(this.oFormElement, arguments);
	};

	/**
	 * Removes all controls from the aggregation <code>elements</code>
	 * 
	 * @return {sap.ui.core.Controls[]} an array of the removed controls.
	 * @public
	 */
	GroupElement.prototype.removeAllElements = function() {
		return this.oFormElement.removeAllFields.apply(this.oFormElement, arguments);
	};

	/**
	 * Getter for aggregation <code>elements</code>
	 * 
	 * @return {sap.ui.core.Controls[]} an array of the removed controls.
	 * @public
	 */
	GroupElement.prototype.getElements = function() {
		return this.oFormElement.getFields();
	};

	/**
	 * Destroys all the controls in the aggregation <code>elements</code>
	 * 
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.destroyElements = function() {
		this.oFormElement.destroyFields();
		return this;
	};

	/**
	 * Checks for the provided control in the aggregation named <code>elements</code> and returns its index if found or -1 otehrwise.
	 * 
	 * @param {sap.ui.core.Control} oElement the control whose index is looked for.
	 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise.
	 * @public
	 */
	GroupElement.prototype.indexOfElement = function(oElement) {
		return this.oFormElement.indexOfField(oElement);
	};

	return GroupElement;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/GroupElement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.GroupElementRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.GroupElementRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/GroupElementRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class GroupElementC renderer.
	 * @static
	 */
	var GroupElementRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *          oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control}
	 *          oControl an object representation of the control that should be rendered
	 */
	GroupElementRenderer.render = function(oRm, oControl) {
	
	};
	

	return GroupElementRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/GroupElementRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.GroupRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.GroupRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/GroupRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class GroupC renderer.
	 * @static
	 */
	var GroupRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *          oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control}
	 *          oControl an object representation of the control that should be rendered
	 */
	GroupRenderer.render = function(oRm, oControl) {
	
		oControl.getGroupElements().forEach(function(groupElement) {
			oRm.renderControl(groupElement);
		});
	
	};
	

	return GroupRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/GroupRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.Layout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.Layout.
jQuery.sap.declare('sap.ui.comp.smartform.Layout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/Layout",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new smartform/Layout.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Layout settings to adjust ResponsiveGridLayout.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.Layout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Layout = Element.extend("sap.ui.comp.smartform.Layout", /** @lends sap.ui.comp.smartform.Layout.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Default span for labels in large size. This span is only used if more than 1 container is in one line, if only 1 container is in the line the labelSpanM value is used.
			 * Default value is
			 */
			labelSpanL : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * Default span for labels in medium size. This property is used for full size containers. if more than one Container is in one line, labelSpanL is used.
			 * Default value is
			 */
			labelSpanM : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * Default span for labels in small size.
			 * Default value is
			 */
			labelSpanS : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * test
			 */
			emptySpanL : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * test
			 */
			emptySpanM : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * test
			 */
			emptySpanS : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * test
			 */
			columnsL : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * test
			 */
			columnsM : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * test
			 */
			breakpointL : {type : "int", group : "Misc", defaultValue : null},
	
			/**
			 * test
			 */
			breakpointM : {type : "int", group : "Misc", defaultValue : null}
		}
	}});
	

	return Layout;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/Layout.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.SmartForm') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.SmartForm.
jQuery.sap.declare('sap.ui.comp.smartform.SmartForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.SimpleChanges'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.Form'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSeparator'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/SmartForm",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control', 'sap/ui/fl/registry/ChangeRegistry', 'sap/ui/fl/registry/SimpleChanges', 'sap/ui/layout/form/Form', 'sap/ui/fl/Utils', 'sap/ui/fl/registry/Settings', 'sap/m/Label', 'sap/m/Button', 'sap/m/ButtonType', 'sap/m/Panel', 'sap/m/Toolbar', 'sap/m/ToolbarSpacer', 'sap/m/ToolbarSeparator'
], function(jQuery, library, Control, ChangeRegistry, SimpleChanges, Form, Utils, Settings, Label, Button, ButtonType, Panel, Toolbar, ToolbarSpacer, ToolbarSeparator) {
	"use strict";

	/**
	 * Constructor for a new smartform/SmartForm.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartForm renders a form (sap.ui.layout.form.Form) and makes use of OData metadata annotations. If the controls to be displayed
	 *        inside the form are bound to an OData model the label is taken from the metadata annotation (sap:label) if not specified in the XML
	 *        view.
	 * @extends sap.ui.core.Control
	 * @author Alexander Fürbach
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.SmartForm
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartForm = Control.extend("sap.ui.comp.smartform.SmartForm", /**
																		 * @lends sap.ui.comp.smartform.SmartForm.prototype
																		 */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Title of the form.
				 */
				title: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the groups shall be rendered in a ResponsiveLayout with label on top of the group element. Each group will be
				 * rendered in a new line.
				 */
				useHorizontalLayout: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether a check button shall be added to the toolbar.
				 */
				checkButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * EntiyType used for the SmartForm.
				 */
				entityType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the control is expandable. Per default the control is not rendered as expanded.
				 */
				expandable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * If expandable, this property indicates whether the state is expanded or not. If expanded, then infoToolbar (if available) and
				 * content is rendered; if expanded is false, then only the headerText/headerToolbar is rendered.
				 */
				expanded: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specified whether the property editable shall be togglable via button.
				 */
				editTogglable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Specifies whether the form is editable.
				 */
				editable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata, by the SmartForm Note that No validation will be done here, please ensure
				 * you do not add spaces or special characters here!
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			defaultAggregation: "groups",
			aggregations: {

				/**
				 * Groups are used to group form elements.
				 */
				groups: {
					type: "sap.ui.comp.smartform.Group",
					multiple: true,
					singularName: "group"
				},

				/**
				 * Content to be rendered.
				 */
				content: {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				},

				/**
				 * Layout settings to adjust ResponsiveGridLayout
				 */
				layout: {
					type: "sap.ui.comp.smartform.Layout",
					multiple: false
				},

				/**
				 * The Semantic Object Controller allows to specify and overwrite several semantic object navigation functionalities.
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				},

				/**
				 * An additional toolbar that can be added by the users, which can contain further custom buttons, controls, etc.
				 */
				customToolbar: {
					type: "sap.m.Toolbar",
					multiple: false
				},

				/**
				 * Toolbar
				 */
				toolbar: {
					type: "sap.m.Toolbar",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {

				/**
				 * Event is fired when the editable property is toggled.
				 */
				editToggled: {},

				/**
				 * Event is fired after check was performed.
				 */
				checked: {}
			}
		}
	});

	/*global Promise */

	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	SmartForm.prototype.init = function() {
		if (!SmartForm._bHasRegisteredToFlexibilityServices) {
			var oChangeRegistry = ChangeRegistry.getInstance();
			// remove group
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),

			SimpleChanges.removeGroup);
			// add group
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),

			SimpleChanges.addGroup);
			// move groups
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),

			SimpleChanges.moveGroups);
			// change form title
			oChangeRegistry.registerControlForSimpleChange(this.getMetadata().getElementName(),

			SimpleChanges.renameField);
			SmartForm._bHasRegisteredToFlexibilityServices = true;
		}

		this._sEditToggleId = "";
		this._oForm = null;
		this._oPanel = null;
		this._oTitle = new Label(this.getId() + "-title-sfmain").addStyleClass("title");
		this._bUpdateToolbar = true;
		this._sResizeListenerId = "";
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

	};

	SmartForm._bHasRegisteredToFlexibilityServices = false;

	SmartForm.prototype.onBeforeRendering = function() {
		var oGroup = null;
		var oForm = null;
		var aCustomData = [];
		var aGroup = [];
		var oToolbar = null;
		var i = 0;
		var that = this;

		// toolbar
		if (this._bUpdateToolbar) {
			if (this._oCustomToolbar) {
				this._cleanToolbar();
				this._addHeaderToToolbar();
				this._addSeparatorToToolbar();
				this._addEditTogglableToToolbar();
				this._addCheckToToolbar();
				this._addChangeModeToToolbar();
				this._removeSeparatorFromToolbar();
			} else {
				this._createToolbar();
				this._oToolbar.addStyleClass("titleBar");
				this._addHeaderToToolbar();
				this._addEditTogglableToToolbar();
				this._addCheckToToolbar();
				this._addChangeModeToToolbar();
				if (this._oToolbar.getContent().length === 1 && !this.getExpandable()) {
					this._oToolbar.destroyContent();
					this._oToolbar.destroy();
					this._oToolbar = null;
					this.setAggregation("toolbar", null);
				}
			}
			this._bUpdateToolbar = false;
		}

		var oLayout = null;

		if (!this._oForm) {
			// grid or form
			if (this.mProperties["useHorizontalLayout"]) {
				oLayout = new sap.ui.layout.form.ResponsiveLayout();
			} else {
				oLayout = this._getLayout();
			}
			oForm = new Form({
				"editable": this.getEditable(),
				"layout": [
					oLayout
				]
			});

			this._oForm = oForm;
		}

		// add groups
		aGroup = this.getAggregation("groups");
		if (aGroup) {
			for (i; i < aGroup.length; i++) {
				oGroup = aGroup[i];
				this._oForm.insertFormContainer(oGroup.getFormContainer(), i);
			}
		}

		aCustomData = this.getCustomData();
		if (aCustomData.length > 0) {
			aGroup.forEach(function(oGroup) {
				aCustomData.forEach(function(oCustomData) {
					oGroup.addCustomData(oCustomData.clone());
				});
			});
		}

		aGroup.forEach(function(oGroup) {
			oGroup.setEditMode(that.mProperties["editable"]);
		});

		oToolbar = this._oCustomToolbar || this._oToolbar;

		if (this.mProperties["expandable"]) {
			this._oPanel = new Panel({
				"expanded": this.mProperties["expanded"],
				"expandable": true,
				"headerText": this.getTitle(),
				"headerToolbar": oToolbar
			});
			this._oPanel.attachExpand(function(oEvent) {
				that.setProperty("expanded", oEvent.getParameters()["expand"], false);
			});

			this._oPanel.addContent(this._oForm);
			this.setAggregation("content", this._oPanel);
		} else {
			if (oToolbar) {
				oToolbar.addStyleClass("titleBar");
			}
			this.setAggregation("content", this._oForm);
		}
	};

	SmartForm.prototype.onAfterRendering = function() {

		var i = 0, iIndexWidth, iIndexPercentage;
		var sCssText = "", sValue = "";
		var that = this;

		if (this._sResizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		}
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this._oForm.getDomRef(), function(oEvent) {
			that.onAfterRendering();
		});

		var aElement = window.document.getElementsByClassName("sapUiRFLContainer");

		for (i = 0; i < aElement.length; i++) {
			if (aElement[i].id.indexOf("element") != -1 && aElement[i].id.indexOf("cont") != -1) {
				iIndexWidth = aElement[i].style.cssText.indexOf("width");
				iIndexPercentage = aElement[i].style.cssText.indexOf("%", iIndexWidth);
				if ((iIndexPercentage - iIndexWidth) > 10) {
					iIndexWidth = aElement[i].style.cssText.indexOf("width", iIndexWidth + 1);
					iIndexPercentage = aElement[i].style.cssText.indexOf("%", iIndexWidth);
				}
				if ((iIndexPercentage - iIndexWidth) <= 10) {
					sValue = aElement[i].style.cssText.substring(iIndexWidth + 6, iIndexPercentage);
					if (parseInt(sValue, 10) > 25) {

						sCssText = aElement[i].style.cssText.substring(0, iIndexWidth - 1);
						sCssText = sCssText + aElement[i].style.cssText.substring(iIndexPercentage

						+ 2);
						aElement[i].style.cssText = sCssText;
					}
				}
			}
		}

	};

	/**
	 * Creates a ResponsiveGridLayout and applies settings from aggregation <code>layout together with default settings
	 * 
	 * @return {sap.ui.layout.form.ResponsiveGridLayout} the layout to be used for the form.
	 * @private
	 */
	SmartForm.prototype._getLayout = function() {

		var oLayout = this.getAggregation("layout");
		var oFormLayout = null;
		var aGroups = this.getGroups();

		if (oLayout) {
			oFormLayout = new sap.ui.layout.form.ResponsiveGridLayout({
				"labelSpanL": oLayout.mProperties["labelSpanL"] ? oLayout.mProperties["labelSpanL"] : 4,
				"labelSpanM": oLayout.mProperties["labelSpanM"] ? oLayout.mProperties["labelSpanM"] : 4,
				"emptySpanL": oLayout.mProperties["emptySpanL"] ? oLayout.mProperties["emptySpanL"] : 0,
				"emptySpanM": oLayout.mProperties["emptySpanM"] ? oLayout.mProperties["emptySpanM"] : 0,
				"columnsL": oLayout.mProperties["columnsL"] ? oLayout.mProperties["columnsL"] : 3,
				"columnsM": oLayout.mProperties["columnsM"] ? oLayout.mProperties["columnsM"] : 2,
				"breakpointL": oLayout.mProperties["breakpointL"] ? oLayout.mProperties["breakpointL"] :

				1024,
				"breakpointM": oLayout.mProperties["breakpointL"] ? oLayout.mProperties["breakpointL"] :

				600
			});

		} else {
			oFormLayout = new sap.ui.layout.form.ResponsiveGridLayout({
				"labelSpanL": 4,
				"labelSpanM": 4,
				"emptySpanL": 0,
				"emptySpanM": 0,
				"columnsL": 3,
				"columnsM": 2,
				"breakpointL": 1024,
				"breakpointM": 600
			});
		}

		if (aGroups && aGroups.length < oFormLayout.getColumnsL()) {
			oFormLayout.setColumnsL(aGroups.length);
		}

		return oFormLayout;
	};

	SmartForm.prototype._createToolbar = function() {
		if (this._oToolbar) {
			var oContent = this._oToolbar.removeContent(this.getId() + "-button-sfmain-editToggle");
			if (oContent) {
				oContent.destroy();
			}
			oContent = this._oToolbar.removeContent(this.getId() + "-button-sfmain-check");
			if (oContent) {
				oContent.destroy();
			}
			oContent = this._oToolbar.removeContent(this.getId() + "-AdaptationButton");
			if (oContent) {
				oContent.destroy();
			}
			this._oToolbar.removeContent(this.getId() + "-title-sfmain");
		}
		this._oToolbar = new Toolbar({
			"height": "3rem"
		});
		this.setAggregation("toolbar", this._oToolbar);
	};

	/**
	 * Removes content from customToolbar
	 * 
	 * @private
	 */
	SmartForm.prototype._cleanToolbar = function() {
		var oContent = this._oCustomToolbar.removeContent(this.getId() + "-button-sfmain-editToggle");
		if (oContent) {
			oContent.destroy();
		}
		oContent = this._oCustomToolbar.removeContent(this.getId() + "-button-sfmain-check");
		if (oContent) {
			oContent.destroy();
		}
		oContent = this._oCustomToolbar.removeContent(this.getId() + "-AdaptationButton");
		if (oContent) {
			oContent.destroy();
		}
		this._oCustomToolbar.removeContent(this.getId() + "-title-sfmain");
	};

	/**
	 * Adds a title and a toolbar separator to the toolbar.
	 * 
	 * @private
	 */
	SmartForm.prototype._addHeaderToToolbar = function() {
		var oToolbar = this._oCustomToolbar || this._oToolbar;
		var aContent = [];
		var i = 0;
		var oToolbarSpacer = null;

		if (this.getProperty("title") || this.mBindingInfos['title']) {
			oToolbar.insertContent(this._oTitle, 0);
		}

		if (this._oToolbar) {
			oToolbar.insertContent(new ToolbarSpacer(), 1);
		} else {
			aContent = oToolbar.getContent();
			for (i; i < aContent.length; i++) {
				if (aContent[i].getMetadata().getName() === "sap.m.ToolbarSpacer") {
					oToolbarSpacer = aContent[i];
				}
			}
			if (!oToolbarSpacer) {
				oToolbar.addContent(new ToolbarSpacer());
			}
		}
	};

	/**
	 * Adds the button to change between edit and read only mode if property <code>editTogglable</code> equals true
	 * 
	 * @private
	 */
	SmartForm.prototype._addEditTogglableToToolbar = function() {

		var oToolbar = this._oCustomToolbar || this._oToolbar;
		var that = this;
		var oButton = null;
		var sIconSrc = this.getProperty("editable") ? "sap-icon://display" : "sap-icon://edit";

		if (this.getEditTogglable()) {
			oButton = new Button(this.getId() + "-button-sfmain-editToggle", {
				type: ButtonType.Default,
				icon: sIconSrc,
				press: function() {
					SmartForm.prototype._toggleEditMode(that);
				}
			});
			this._sEditToggleId = oButton.getId();
			oToolbar.addContent(oButton);
		}
	};

	/**
	 * Change to edit/read only depending on the current state.
	 * 
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm the smart form
	 * @private
	 */
	SmartForm.prototype._toggleEditMode = function(oSmartForm) {

		var oToolbar = oSmartForm._oCustomToolbar || oSmartForm._oToolbar;

		oSmartForm.setEditable(!oSmartForm.mProperties["editable"]);

		oSmartForm.fireEditToggled({
			editable: oSmartForm.mProperties["editable"]
		});

		var sIconSrc = oSmartForm.getProperty("editable") ? "sap-icon://display" : "sap-icon://edit";
		oToolbar.getContent().forEach(function(oItem) {
			if (oItem.sId === oSmartForm._sEditToggleId) {
				oItem.setIcon(sIconSrc);
			}
		});

		var aGroup = oSmartForm.getGroups();
		aGroup.forEach(function(oGroup) {
			oGroup.setEditMode(oSmartForm.mProperties["editable"]);
		});

	};

	/**
	 * Adds the button for personalization to the toolbar, if change mode supported.
	 * 
	 * @returns {Promise} the promise for flexibility settings
	 * @private
	 */
	SmartForm.prototype._addChangeModeToToolbar = function() {
		var that = this;
		var sComponentName = Utils.getComponentClassName(this);
		var addToolbarPromise = Settings.getInstance(sComponentName).then(function(oSettings) {
			var oToolbar = that._oCustomToolbar || that._oToolbar;
			if (oSettings.isFlexChangeMode() && oSettings.isKeyUser() && Utils.checkControlId(that)) {
				if (!oToolbar) {
					that._createToolbar();
					that._oToolbar.addStyleClass("titleBar");
					that._addHeaderToToolbar();
					oToolbar = that._oToolbar;
					that.invalidate();
				}
				oToolbar.addContent(new sap.m.Button(that.getId() + "-AdaptationButton", {
					type: sap.m.ButtonType.Default,
					icon: "sap-icon://action-settings",
					press: function() {
						jQuery.sap.require('sap.ui.comp.smartform.flexibility.FormP13nHandler');
						var handler = new sap.ui.comp.smartform.flexibility.FormP13nHandler();
						handler.init(that);
						handler.show();
					}
				}));
			}
		}, function(oError) {
		});
		return addToolbarPromise || Promise.resolve();
	};

	/**
	 * Adds the button for checking.
	 * 
	 * @private
	 */
	SmartForm.prototype._addCheckToToolbar = function() {
		if (!this.getEditable()) {
			return;
		}

		var oToolbar = this._oCustomToolbar || this._oToolbar;
		var that = this;

		if (this.getCheckButton()) {
			oToolbar.addContent(new sap.m.Button(this.getId() + "-button-sfmain-check", {
				type: sap.m.ButtonType.Default,
				text: this._oRb.getText("SMART_FORM_CHECK"),
				press: function() {
					var aErroneousFields = [];
					aErroneousFields = that.check();
					that.fireChecked({
						erroneousFields: aErroneousFields
					});
				}
			}));
		}

	};

	/**
	 * Checks the object.
	 * 
	 * @returns {string[]} an array of fields with errors
	 * @public
	 */
	SmartForm.prototype.check = function() {
		var aErroneousFields = this._checkClientError();
		return aErroneousFields;
	};

	/**
	 * Check smart fields for client errors.
	 * 
	 * @returns {string[]} an array of fields with errors
	 * @private
	 */
	SmartForm.prototype._checkClientError = function() {
		var aFields = this.getSmartFields();
		var aErroneousFields = [];
		aFields.forEach(function(oField) {
			if (oField.checkClientError()) {
				aErroneousFields.push(oField.getId());
			}
		});
		return aErroneousFields;
	};

	/**
	 * Adds a separator to the toolbar.
	 * 
	 * @private
	 */
	SmartForm.prototype._addSeparatorToToolbar = function() {
		var oToolbar = this._oCustomToolbar || this._oToolbar;
		oToolbar.addContent(new ToolbarSeparator());
	};

	/**
	 * Removes useless separators.
	 * 
	 * @private
	 */
	SmartForm.prototype._removeSeparatorFromToolbar = function() {
		var oToolbar = this._oCustomToolbar || this._oToolbar;
		var oContent = oToolbar.getContent();
		var oLastElement = null;
		var aRemoveElement = [];
		var i = 0;

		// remove last separator
		oLastElement = oContent[oContent.length - 1];
		if (oLastElement.getMetadata().getName() === "sap.m.ToolbarSeparator") {
			oToolbar.removeContent(oLastElement);
		}

		// remove superfluous separator
		oLastElement = null;
		for (i; i < oContent.length; i++) {
			if (oContent[i].getMetadata().getName() === "sap.m.ToolbarSeparator" && oLastElement.getMetadata().getName() != "sap.m.Button") {
				aRemoveElement.push(oContent[i]);
			}
			oLastElement = oContent[i];
		}
		for (i = 0; i < aRemoveElement.length; i++) {
			oToolbar.removeContent(aRemoveElement[i]);
		}
	};

	/**
	 * Setter for property <code>editable</code>.
	 * 
	 * @param {boolean} bEditable new value for property <code>editable</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setEditable = function(bEditable) {
		Control.prototype.setProperty.apply(this, [
			"editable", bEditable
		]);
		if (this._oForm) {
			this._oForm.setEditable(bEditable);
		}
		this._bUpdateToolbar = true;
		return this;
	};

	/**
	 * Setter for property <code>editTogglable</code>. Default value is <code>undefined</code>.
	 * 
	 * @param {boolean} bTogglable new value for property <code>editTogglable</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setEditTogglable = function(bTogglable) {
		Control.prototype.setProperty.apply(this, [
			"editTogglable", bTogglable
		]);
		this._bUpdateToolbar = true;
		return this;
	};

	/**
	 * Setter for property <code>title</code>. Default value is <code>undefined</code>.
	 * 
	 * @param {string} sTitle new value for property <code>title</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setTitle = function(sTitle) {
		Control.prototype.setProperty.apply(this, [
			"title", sTitle
		]);
		this._oTitle.setText(sTitle);
		return this;
	};

	/**
	 * Returns the array of properties currently visible on the UI.
	 * 
	 * @return {string[]} the properties currently visible
	 * @public
	 */
	SmartForm.prototype.getVisibleProperties = function() {

		var aProperty = [];

		var aGroup = this.getGroups();
		aGroup.forEach(function(oGroup) {
			var aGroupElement = oGroup.getGroupElements();
			aGroupElement.forEach(function(oGroupElement) {
				var aField = oGroupElement.getFormElement().getFields();
				aField.forEach(function(oField) {
					if (oField.getVisible()) {
						var sPath = oField.getBindingPath("value");
						if (sPath) {
							aProperty.push(sPath);
						}
					}
				});
			});
		});

		return aProperty;

	};

	/**
	 * Setter for aggregation <code>customToolbar</code>. Default value is <code>undefined</code>.
	 * 
	 * @param {sap.m.Toolbar} oCustomToolbar new value for aggregation <code>customToolbar</code>.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.setCustomToolbar = function(oCustomToolbar) {
		this._oCustomToolbar = oCustomToolbar;
		this._bUpdateToolbar = true;
		return this;
	};

	/**
	 * Getter for aggregation <code>customToolbar</code>.
	 * 
	 * @return {sap.m.Toolbar} the custom toolbar
	 * @public
	 */
	SmartForm.prototype.getCustomToolbar = function() {
		return this._oCustomToolbar;
	};

	/**
	 * Inserts a <code>group</code> into the aggregation named groups.
	 * 
	 * @param {sap.ui.comp.smartform.Group} oGroup the group to insert
	 * @param {int} iIndex the 0-based index the group should be inserted at
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.insertGroup = function(oGroup, iIndex) {

		// reordering groups only works if form container is recreated
		var aFormElement = [];
		var oFormContainer = oGroup.getFormContainer();

		if (oFormContainer) {
			aFormElement = oFormContainer.getFormElements();
		}

		var oData = {
			"expanded": oFormContainer ? oFormContainer.getExpanded() : true,
			"expandable": oGroup.getExpandable(),
			"visible": oGroup.getVisible(),
			"formElements": aFormElement,
			"title": oGroup.getLabel()
		};

		oGroup.setFormContainer(new sap.ui.layout.form.FormContainer(oData));
		this.insertAggregation("groups", oGroup, iIndex);
		return this;
	};

	/**
	 * Removes all the groups in the aggregation named groups.
	 * 
	 * @return {sap.ui.comp.smartform.Group[]} an array of the removed groups (might be empty).
	 * @public
	 */
	SmartForm.prototype.removeAllGroups = function() {
		if (this._oForm) {
			this._oForm.removeAllFormContainers();
		}
		return this.removeAllAggregation("groups");
	};

	/**
	 * Get all the smart fields of the form.
	 * 
	 * @return {sap.ui.comp.smartfield.SmartField[]} an array of smart fields (might be empty).
	 * @public
	 */
	SmartForm.prototype.getSmartFields = function() {
		var aSmartField = [];

		var aGroup = this.getGroups();
		aGroup.forEach(function(oGroup) {
			var aGroupElement = oGroup.getGroupElements();
			aGroupElement.forEach(function(oGroupElement) {
				var aField = oGroupElement.getFormElement().getFields();
				aField.forEach(function(oField) {
					if (oField.getMetadata().getName() === "sap.ui.comp.smartfield.SmartField") {
						aSmartField.push(oField);
					}
				});
			});
		});

		return aSmartField;
	};
	
	/**
	 * Cleans up the resources associated with this element and all its children.
	 * 
	 * @public
	 */
	SmartForm.prototype.exit = function() {
		if (this._oForm) {
			this._oForm.destroy();
		}
		if (this._oPanel) {
			this._oPanel.destroy();
		}
		if (this._oTitle) {
			this._oTitle.destroy();
		}
		this._sEditToggleId = "";
		this._oForm = null;
		this._oPanel = null;
		this._oTitle = null;
		this._bUpdateToolbar = true;
		this._sResizeListenerId = "";
		this._oRb = null;
	};

	return SmartForm;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/SmartForm.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.SmartFormRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.SmartFormRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.Form'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/SmartFormRenderer",['jquery.sap.global', 'sap/ui/layout/form/Form'],
	function(jQuery, Form) {
	"use strict";


	/**
	 * @class SmartForm renderer.
	 * @static
	 */
	var SmartFormRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *          oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control}
	 *          oControl an object representation of the control that should be rendered
	 */
	SmartFormRenderer.render = function(oRm, oControl) {
	
		oControl.getGroups().forEach(function(group) {
			oRm.renderControl(group);
		});
	
		var oToolbar = oControl._oCustomToolbar || oControl._oToolbar;
	
		if (oControl.mProperties["expandable"]) {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiCompSmartForm");
			oRm.writeClasses();
			oRm.write(">"); // div element
			oRm.renderControl(oControl._oPanel);
			oRm.write("</div>");
		} else {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiCompSmartForm");
			oRm.writeClasses();
			oRm.write(">"); // span element
			if (oToolbar) {
				oRm.renderControl(oToolbar);
			}
			oRm.renderControl(oControl._oForm);
			oRm.write("</div>");
		}
	};

	return SmartFormRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/SmartFormRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.DialogContentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.DialogContentRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/DialogContentRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class DialogContent renderer.
	 * @static
	 */
	var DialogContentRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	DialogContentRenderer.render = function(oRm, oControl) {
	
		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		// oRm.addClass("sapUiCompDialogContent");
		oRm.writeClasses();
		oRm.write(">"); // span element
		var oContent = oControl.getContent();
		oRm.renderControl(oContent);
		oRm.write("</div>");
	};
	

	return DialogContentRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/DialogContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FieldList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.flexibility.FieldList.
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FieldList'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FieldList",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control'],
	function(jQuery, library, Control) {
	"use strict";


	
	/**
	 * Constructor for a new smartform/flexibility/FieldList.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Contains list of forms, groups and fields which can could be modified by the SAPUI5 flexibility services
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.flexibility.FieldList
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FieldList = Control.extend("sap.ui.comp.smartform.flexibility.FieldList", /** @lends sap.ui.comp.smartform.flexibility.FieldList.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		aggregations : {
	
			/**
			 * Nodes representing either a Form, a Group or a field
			 */
			nodes : {type : "sap.ui.comp.smartform.flexibility.FieldListNode", multiple : true, singularName : "node"}
		},
		events : {
	
			/**
			 * Event is fired when the selected node has changed
			 */
			selectionChanged : {}
		}
	}});
	
	/**
	 * init
	 * 
	 * @public
	 */
	FieldList.prototype.init = function() {

		// // do something for initialization...
		this._oSelectedNode = null;
	};
	
	/**
	 * Returns the currently selected field list node
	 * 
	 * @returns {sap.ui.comp.smartform.flexibility.FieldListNode} node
	 * @public
	 */
	FieldList.prototype.getSelectedNode = function() {

		return this._oSelectedNode;
	};
	
	/**
	 * Registers to the Selected event of the provided node
	 * 
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode
	 *            node
	 * @private
	 */
	FieldList.prototype._registerNodeSelectionChangedEvent = function(oNode) {

		if (oNode) {
			oNode.attachSelected(this._handleSelectionChanged.bind(this));
		}
	};
	
	/**
	 * Deregisters to the Selected event of the provided node
	 * 
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode
	 *            node
	 * @private
	 */
	FieldList.prototype._deregisterNodeSelectionChangedEvent = function(oNode) {

		if (oNode) {
			oNode.detachSelected(this._handleSelectionChanged.bind(this)); // memory leak?
		}
	};
	
	/**
	 * Event handler for Selected event of the node
	 * 
	 * @param {object} oEvent
	 *            event
	 * @private
	 */
	FieldList.prototype._handleSelectionChanged = function(oEvent) {

		var oNode;
		oNode = oEvent.getParameter("target");
		if (oNode) {
			// this._setSelectedNode(oNode);
			this.fireSelectionChanged({
				node: oNode
			});
		}
	};
	
	/**
	 * Unselects the previoulsy registered node and selects the new one
	 * 
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode
	 *            node
	 * @private
	 */
	FieldList.prototype._setSelectedNode = function(oNode) {

		if (!oNode) {
			return;
		}
	
		if (this._oSelectedNode) {
			this._oSelectedNode.setIsSelected(false);
		}
		this._oSelectedNode = oNode;
		this._oSelectedNode.setIsSelected(true);
	};
	
	/** 
	 * @private Overwritten - called when node is added
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @returns {sap.ui.comp.smartform.flexibility.FieldListNode} added field list node
	 */
	FieldList.prototype.addNode = function(oNode) {

		this.addAggregation("nodes", oNode, true);
		this._registerNodeSelectionChangedEvent(oNode);
		return this;
	};
	
	/**
	 * @private Overwritten - called when node is destroyed
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @returns {sap.ui.comp.smartform.flexibility.FieldListNode} destroyed field list node
	 */
	FieldList.prototype.destroyNodes = function(oNode) {

		var aNodes, length, i;
		aNodes = this.getNodes();
		length = aNodes.length;
		for (i = 0; i < length; i++) {
			this._deregisterNodeSelectionChangedEvent(aNodes[i]);
		}
		this.destroyAggregation("nodes");
		return this;
	};
	
	/**
	 * @private Overwritten - called when node is removed
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oNode field list node
	 * @returns {sap.ui.comp.smartform.flexibility.FieldListNode | number} removed field list node
	 */
	FieldList.prototype.removeNode = function(oNode) {

	
		this.removeAggregation("nodes", oNode);
	
		if (typeof oNode === 'number') {
			oNode = this.getNodes([
				oNode
			]);
		}
		this._deregisterNodeSelectionChangedEvent(oNode);
	
		return this;
	};
	

	return FieldList;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/FieldList.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FieldListNodeRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FieldListNodeRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FieldListNodeRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class FieldListNode renderer.
	 * @static
	 */
	var FieldListNodeRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FieldListNodeRenderer.render = function(oRm, oControl) {

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiCompFieldListNode");
		if (!oControl.getIsVisible()) {
			oRm.addClass("sapUiCompFieldListNodeIsHidden");
		} else {
			oRm.addClass("sapUiCompFieldListNodeIsVisible");
		}
		if (oControl.getIsSelected()) {
			oRm.addClass("sapUiCompFieldListNodeIsSelected");
		}
		oRm.writeClasses();
		oRm.write(">"); // span element
	
		FieldListNodeRenderer.renderLayout(oRm, oControl);
		FieldListNodeRenderer.renderChildren(oRm, oControl);
	
		oRm.write("</div>");
	};
	
	/**
	 * Renders the layout control
	 * 
	 * @param {sap.ui.core.RenderManager} oRm RenderManager
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oControl field list node
	 * @private
	 */
	FieldListNodeRenderer.renderLayout = function(oRm, oControl) {

		oRm.renderControl(oControl._oLayout);
	};
	
	/**
	 * Renders the child nodes
	 * 
	 * @param {sap.ui.core.RenderManager} oRm RenderManager
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oControl field list node
	 * @private
	 */
	FieldListNodeRenderer.renderChildren = function(oRm, oControl) {

		var length, i, aChildren;
		aChildren = oControl.getNodes();
		length = aChildren.length;
		oRm.write('<div class="sapUiCompFieldListNodeBorder">');
		for (i = 0; i < length; i++) {
			oRm.renderControl(aChildren[i]);
		}
		oRm.write("</div>");
	};
	

	return FieldListNodeRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/FieldListNodeRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FieldListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FieldListRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FieldListRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class FieldList renderer.
	 * @static
	 */
	var FieldListRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.comp.smartform.flexibility.FieldList} oControl an object representation of the control that should be rendered
	 */
	FieldListRenderer.render = function(oRm, oControl) {

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiCompFieldList");
		oRm.writeClasses();
		oRm.write(">"); // span element
	
		FieldListRenderer.renderNodes(oRm, oControl);
	
		oRm.write("</div>");
	};
	
	/**
	 * Renders the child nodes from the aggregation nodes
	 * 
	 * @param {sap.ui.core.RenderManager} oRm RenderManager
	 * @param {sap.ui.comp.smartform.flexibility.FieldList} oControl field list node
	 * @private
	 */
	FieldListRenderer.renderNodes = function(oRm, oControl) {

		var aNodes, length, i;
		aNodes = oControl.getNodes();
		length = aNodes.length;
		for (i = 0; i < length; i++) {
			oRm.renderControl(aNodes[i]);
		}
	};
	

	return FieldListRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/FieldListRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.Input') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.flexibility.Input.
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.Input'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/Input",['jquery.sap.global', 'sap/m/Input', 'sap/ui/comp/library'],
	function(jQuery, Input1, library) {
	"use strict";


	
	/**
	 * Constructor for a new smartform/flexibility/Input.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Input field with special focus handling
	 * @extends sap.m.Input
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.flexibility.Input
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Input = Input1.extend("sap.ui.comp.smartform.flexibility.Input", /** @lends sap.ui.comp.smartform.flexibility.Input.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		events : {
	
			/**
			 * Fired when the field is readonly, focused and user pressed Space
			 */
			selectedByKeyboard : {}
		}
	}});
	
	
	Input.prototype.init = function() {
		Input1.prototype.init.call(this);
	};
	
	Input.prototype.onAfterRendering = function() {
		var oDomRef;
	
		Input1.prototype.onAfterRendering.apply(this);
		oDomRef = this.getDomRef();
		if (oDomRef) {
			oDomRef.tabIndex = 0;
		}
	};
	
	Input.prototype.onkeydown = function(oEvent) {
		var nKeyCode;
	
		Input1.prototype.onkeydown.apply(this, arguments);
		nKeyCode = oEvent.keyCode;
		if (nKeyCode === 32) { // Blank pressed
			if (this.getEditable() === false) {
				this.fireSelectedByKeyboard();
			}
		}
	
	};
	
	Input.prototype.onsapescape = function(oEvent) {
		Input1.prototype.onsapescape.apply(this, arguments);
		oEvent.stopPropagation(); // Prevent closing the dialog
		this.setEditable(false);
	};
	

	return Input;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/Input.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.InputRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.InputRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.InputRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/InputRenderer",['jquery.sap.global', 'sap/m/InputRenderer'],
	function(jQuery, InputRenderer1) {
	"use strict";


	/**
	 * @class Input renderer.
	 * @static
	 */
	var InputRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	InputRenderer.render = function(oRm, oControl) {
		InputRenderer1.render(oRm, oControl);
	};
	

	return InputRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/InputRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.PersonalizableInfo') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.PersonalizableInfo.
jQuery.sap.declare('sap.ui.comp.smartvariants.PersonalizableInfo'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/PersonalizableInfo",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new smartvariants/PersonalizableInfo.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Describes the control associated with the smart variant control.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.PersonalizableInfo
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var PersonalizableInfo = Element.extend("sap.ui.comp.smartvariants.PersonalizableInfo", /** @lends sap.ui.comp.smartvariants.PersonalizableInfo.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Describes the type of variant management.
			 */
			type : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Name of the data service
			 */
			dataSource : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Defines the property name of the controller containing the stableId.
			 */
			keyName : {type : "string", group : "Misc", defaultValue : null}
		},
		associations : {
	
			/**
			 * Contains the control that can be personalized.
			 */
			control : {type : "sap.ui.core.Control", multiple : false}
		}
	}});
	
	PersonalizableInfo.prototype.addControl = function(oControl) {
		this.addAssociation("control", oControl, true);
	};

	return PersonalizableInfo;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartvariants/PersonalizableInfo.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.transport.TransportDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.transport.TransportDialog.
jQuery.sap.declare('sap.ui.comp.transport.TransportDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/transport/TransportDialog",['jquery.sap.global', 'sap/m/Button', 'sap/m/ComboBox', 'sap/m/Dialog', 'sap/m/Input', 'sap/m/Label', 'sap/m/MessageToast', 'sap/ui/comp/library', 'sap/ui/core/ListItem', 'sap/ui/fl/Transports', 'sap/ui/layout/Grid', 'sap/ui/layout/GridData'],
	function(jQuery, Button, ComboBox, Dialog, Input, Label, MessageToast, library, ListItem, Transports, Grid, GridData) {
	"use strict";


	
	/**
	 * Constructor for a new transport/TransportDialog.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The Transport Dialog Control can be used to implement a value help for selecting an ABAP package and transport request. It is not a generic utility, but part of the Variantmanament and therefore cannot be used in any other application.
	 * @extends sap.m.Dialog
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.transport.TransportDialog
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var TransportDialog = Dialog.extend("sap.ui.comp.transport.TransportDialog", /** @lends sap.ui.comp.transport.TransportDialog.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * An ABAP package that can be used as default for the ABAP package selection.
			 */
			pkg : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The set of ABAP transport requests that can be selected by a user.
			 */
			transports : {type : "any", group : "Misc", defaultValue : null},
	
			/**
			 * The LREP object for which as transport request has to be selected
			 */
			lrepObject : {type : "any", group : "Misc", defaultValue : null},
	
			/**
			 * Flag indicating whether the selection of an ABAP package is to be hidden or not.
			 */
			hidePackage : {type : "boolean", group : "Misc", defaultValue : null}
		},
		events : {
	
			/**
			 * This event will be fired when the user clicks the OK button on the dialog.
			 */
			ok : {}, 
	
			/**
			 * This event will be fired when the user clicks the Cancel button on the dialog.
			 */
			cancel : {}
		}
	}});
	
	
	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	TransportDialog.prototype.init = function() {

		Dialog.prototype.init.apply(this);
	
		// initialize dialog and create member variables.
		this._oResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this.setTitle(this._oResources.getText("TRANSPORT_DIALOG_TITLE"));
		this.addStyleClass("sapUiCompTransportDialog");
	
		// add the content.
		this._oPackageLabel = null;
		this._oPackage = this._createPackageField();
		this._oTransport = this._createTransportCombo();
		this.addContent(this._createContentGrid());
		this.setContentWidth("250px");
	
		// okay, cancel and local-object buttons.
		this._createButtons();
	};
	
	/**
	 * Creates the content grid and places its content.
	 * @returns {sap.ui.layout.Grid} the content grid.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createContentGrid = function() {

		var oTransportLabel;
	
		this._oPackageLabel = new Label({
			text: this._oResources.getText("TRANSPORT_DIALOG_PACKAGE"),
			required : true,
			layoutData: new GridData({
				span: "L3 M3 S3"
			})
		}).addStyleClass("compFieldMargin");
		this._oPackageLabel.setLabelFor(this._oPackage);
		oTransportLabel = new Label({
			text: this._oResources.getText("TRANSPORT_DIALOG_TRANSPORT"),
			required : true,
			layoutData: new GridData({
				span: "L3 M3 S3",
				linebreakL: true,
				linebreakM: true,
				linebreakS: true
			})
		}).addStyleClass("compFieldMargin");
		oTransportLabel.setLabelFor(this._oTransport);
		
		return new Grid({
			width: "100%",
			defaultSpan: "L9 M9 S9",
			vSpacing: 0,
			hSpacing: 0,
			content: [ this._oPackageLabel, this._oPackage, oTransportLabel, this._oTransport ]
		}).addStyleClass("compTransportPadding");
	};
	
	/**
	 * Creates the footer buttons.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createButtons = function() {

		var that = this;
	
		this.addButton(new Button({
			text: this._oResources.getText("TRANSPORT_DIALOG_LOCAL_OBJECT"),
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_LOCAL_OBJECT"),
			press: function() {
				that._onLocal();			
			}
		})); 
		this.addButton(new Button({
			text: this._oResources.getText("TRANSPORT_DIALOG_OK"),
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_OK"),
			enabled: false,
			press: function() {
				that._onOkay();
			}
		}));
		this.addButton(new Button({
			text: this._oResources.getText("TRANSPORT_DIALOG_CANCEL"),
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_CANCEL"),
			press: function() {
				that.fireCancel();
				that.close();
				that.destroy();
			}
		}));
	};
	
	/**
	 * Event handler for local object button.
	
	 * @private
	 */
	TransportDialog.prototype._onLocal = function() {

		this.fireOk({
			selectedTransport: "",
			selectedPackage: this.getPkg() || "$TMP",
			dialog: true
		});
		this.close();
		this.destroy();
	};
	
	/**
	 * Event handler for okay button.
	 * 
	 * @private
	 */
	TransportDialog.prototype._onOkay = function() {

		var sTransport = this._oTransport.getSelectedKey();
	
		if (this._checkOkay(sTransport)) {
			this.fireOk({
				selectedTransport: sTransport,
				selectedPackage: this.getPkg() || this._oPackage.getValue(),
				dialog: true
			});
			this.close();
			this.destroy();
		} else {
			this.getButtons()[1].setEnabled(false);
			this._oTransport.setValueState(sap.ui.core.ValueState.Error);
			this._oTransport.setValueStateText(this.getTitle());
		}
	};
	
	/**
	 * Checks whether the Okay button triggers the okay callback.
	 * 
	 * @param {string} sTransport the ID of a transport request, can be <code>null</code>.
	 * @returns {boolean} <code>true</code>, if the okay callback can be triggered, <code>false</code> otherwise.
	 * 
	 * @private
	 */
	TransportDialog.prototype._checkOkay = function(sTransport) {

		if (sTransport) {
			return true;
		}
		
		return false;
	};
	
	/**
	 * Creates the transport <code>sap.ui.commons.ComboBox</code>.
	 * @returns {sap.ui.commons.ComboBox} the transport <code>sap.ui.commons.ComboBox</code>.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createTransportCombo = function() {

		var that = this;
	
		return new ComboBox({
			enabled: false,
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_TRANSPORT_TT"),
			width: "100%",
			selectionChange: function() {
				if (that._oPackage.getEnabled() && that._oPackage.getVisible() && (!that._oPackage.getValue() || that._oPackage.getValue() === "")) {
					return;
				}
				
				that.getButtons()[1].setEnabled(true);	
				that._oTransport.setValueState(sap.ui.core.ValueState.None);		
			},
			change : function(oEvent) {	
				var fCheck = function(oItem) {
					if ((oItem && oEvent.mParameters.newValue !== oItem.getText()) || !oItem) {
						return true;
					}
					
					return false;
				};
				
				if (oEvent && oEvent.mParameters && oEvent.mParameters.newValue) {
					if (fCheck(that._oTransport.getSelectedItem())) {
						that.getButtons()[1].setEnabled(false);
						that._oTransport.setValueState(sap.ui.core.ValueState.Error);
						that._oTransport.setValueStateText(that._oResources.getText("TRANSPORT_DIALOG_TRANSPORT_TT"));				
					}			
				}			
			}
		});
	};
	
	/**
	 * Creates the package <code>sap.ui.commons.ComboBox</code>.
	 * @returns {sap.ui.commons.ComboBox} the package <code>sap.ui.commons.ComboBox</code>.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createPackageField = function() {

		var that = this;
	
		return new Input({
			tooltip: this._oResources.getText("TRANSPORT_DIALOG_PACKAGE_TT"),
			width: "100%",
			change: function() {
				var oTransports, oPromise, oObject;
				
				oObject = that._createObjectInfo();
				oTransports = new sap.ui.fl.Transports(); // FIXME workaround to make test stub work with AMD
				oPromise = oTransports.getTransports(oObject);
				oPromise.then(function(oResult) {
					that._onPackageChangeSuccess(oResult);
				}, function(oResult) {
					that._onPackageChangeError(oResult);
				});			
			},
			liveChange: function(oEvent) {
				if (oEvent.mParameters.liveValue && oEvent.mParameters.liveValue.length > 3) {
					that._oTransport.setEnabled(true);
				}
			}
		}); //.addStyleClass("compFieldMargin");
	};
	
	/**
	 * Creates the object info which serves as input for the transport service and returns it.
	 * @returns {object} the object info which serves as input for the transport service.
	 * 
	 * @private
	 */
	TransportDialog.prototype._createObjectInfo = function() {

		var oObject, oResult = {
			"package" : this._oPackage.getValue() || ""
		};
		
		oObject = this.getProperty("lrepObject");
		
		if (oObject) {		
			if (oObject.name) {
				oResult.name = oObject.name;
			}
			
			if (oObject.type) {
				oResult.type = oObject.type;
			}
			
			if (oObject.namespace) {
				oResult.namespace = oObject.namespace;
			}
		}
		
		return oResult;
	};
	
	/**
	 * Event handler reacting to package change.
	 * @param {object}
	 *            oTransports the possible transport requests.
	 *            
	 * @private
	 */
	TransportDialog.prototype._onPackageChangeSuccess = function(oTransports) {

		if (oTransports) {
			if (oTransports.localonly) {
				this._oTransport.setEnabled(false);
				this.getButtons()[1].setEnabled(true);
			} else if (oTransports.transports && oTransports.transports.length > 0) {
				this._oTransport.setEnabled(true);
				this._setTransports(oTransports);
			} else if (oTransports.errorCode) {
				this.getButtons()[1].setEnabled(false);
				this._oPackage.setValueState(sap.ui.core.ValueState.Error);
				this._oPackage.setValueStateText(this._oResources.getText("TRANSPORT_DIALOG_" + oTransports.errorCode));
				this._setTransports(oTransports);
			} else {			
				MessageToast.show(this._oResources.getText("TRANSPORT_DIALOG_NO_TRANSPORTS"));
			}
		}
	};
	
	/**
	 * Sets the transport requests into the drop down.
	 * @param {object}
	 *            oTransports the possible transport requests.
	 *            
	 * @private
	 */
	TransportDialog.prototype._setTransports = function(oTransports) {

		var oLock, aTransports;
		
		//get the transports into an array.
		oLock = this._hasLock(oTransports.transports);
	
		if (oLock) {
			aTransports = [ oLock ];
		} else {
			aTransports = oTransports.transports;
		}
		
		//set the transports.
		this.setTransports(aTransports);
		
		//pre-select one, if necessary.
		if (aTransports && aTransports.length === 1) {
			this._oTransport.setValue(aTransports[0].description, true);
			this.getButtons()[1].setEnabled(true);
		}
		
		//clear the transport combo-box, if necessary.
		if (!aTransports || aTransports.length === 0) {
			this._oTransport.setSelectedKey(null);
			this._oTransport.setValueState(sap.ui.core.ValueState.None);
			this.getButtons()[1].setEnabled(false);
		}
	};
	
	/**
	 * Event handler reacting to package change.
	 * @param {object}
	 *            oResult response to requesting packages.
	 *            
	 * @private
	 */
	TransportDialog.prototype._onPackageChangeError = function(oResult) {

		MessageToast.show(oResult);
		this.setTransports([]);
	};
	
	/**
	 * Returns whether the LREP object is already locked in one of the transports.
	 * @param {array}
	 *            aTransports the available transports.
	 * @returns {object} the transport, if the LREP object is already locked in one of the transports, <code>null</code> otherwise.
	 * 
	 * @private
	 */
	TransportDialog.prototype._hasLock = function(aTransports) {

		var oTransport, len = aTransports.length;
	
		while (len--) {
			oTransport = aTransports[len];
	
			if (oTransport.locked) {
				return oTransport;
			}
		}
	
		return null;
	};
	
	/**
	 * An ABAP package that can be used as default for the ABAP package selection.
	 * The property can only be set once and afterwards it cannot be changed.
	 * @param {string}
	 *            sPackage an ABAP package that can be used as default for the ABAP package selection.
	 *
	 * @public
	 */
	TransportDialog.prototype.setPkg = function(sPackage) {

		if (sPackage && !this.getProperty("pkg")) {
			// set the property itself.
			this.setProperty("pkg", sPackage);
	
			// disable package selection.
			this._oPackage.setValue(sPackage);
			this._oPackage.setEnabled(false);
	
			// enable transport selection.
			this._oTransport.setEnabled(true);
	
			// correct the title.
			this.setTitle(this._oResources.getText("TRANSPORT_DIALOG_TITLE_SIMPLE"));
			
			//disable local object button, as package has been set from outside and therefore should not be changed.
			this.getButtons()[0].setVisible(false);
		}
	};
	
	/**
	 * The set of ABAP transport requests that can be selected by a user.
	 * @param {array}
	 *            aSelection the set of ABAP transport requests that can be selected by a user.
	 *            
	 * @public          
	 */
	TransportDialog.prototype.setTransports = function(aSelection) {

		var i, len = 0, oItem;
	
		if (aSelection) {
			this.setProperty("transports", aSelection);
			this._oTransport.removeAllItems();
			len = aSelection.length;
			
			for (i = 0; i < len; i++) {
				oItem = aSelection[i];
				this._oTransport.addItem(new ListItem({
					key: oItem.transportId,
					text: oItem.description
				}));
			}
			
			if (len === 1) {
				this._oTransport.setSelectedKey(aSelection[0].transportId);
				this.getButtons()[1].setEnabled(true);
			}
			
			// enable transport selection.
			if (len > 0) {
				this._oTransport.setEnabled(true);
			}
		}
	};
	
	/**
	 * The LREP object for which as transport request has to be selected. 
	 * The property can only be set once and afterwards it cannot be changed.
	 * @param {object}
	 *            oObject an LREP object for which as transport request has to be selected. The object has the attributes name, namespace and type.
	 *
	 * @public
	 */
	TransportDialog.prototype.setLrepObject = function(oObject) {

		if (oObject && !this.getProperty("lrepObject")) {
			this.setProperty("lrepObject", oObject);
		}
	};
	
	/**
	 * Flag indicating whether the selection of an ABAP package is to be hidden or not.
	 * @param {boolean}
	 *            bHide if set to <code>true</code>, the package selection is hidden.
	 *
	 * @public
	 */
	TransportDialog.prototype.setHidePackage = function(bHide) {

		//set the property itself.
		this.setProperty("hidePackage", bHide);
		
		//toggle package visibility.
		this._oPackage.setVisible(!bHide);
		this._oPackageLabel.setVisible(!bHide);
	
		if (bHide) {
			//set the local object button to enabled, 
			//as the end-user might want to "just" save the object without selecting a transport.
			this.getButtons()[0].setEnabled(bHide);
			
			//correct the title.
			this.setTitle(this._oResources.getText("TRANSPORT_DIALOG_TITLE_SIMPLE"));
		}
	};

	return TransportDialog;

}, /* bExport= */ true);

}; // end of sap/ui/comp/transport/TransportDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.transport.TransportDialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.transport.TransportDialogRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/transport/TransportDialogRenderer",['jquery.sap.global', 'sap/m/DialogRenderer'],
	function(jQuery, DialogRenderer) {
	"use strict";


	/**
	 * @class ValueHelpDialog renderer.
	 * @static
	 */
	var TransportDialogRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should be rendered
	 */
	TransportDialogRenderer.render = DialogRenderer.render;
	

	return TransportDialogRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/transport/TransportDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.transport.TransportSelection') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * @public
 * @name sap.ui.comp.transport.TransportSelection
 * @author SAP SE
 * @version 1.28.1
 * @since 1.26.0 
 * Helper object to select an ABAP transport for an LREP object. This is not a generic utility to select a transport request, but part
 *        of the SmartVariant control.
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.fl.Utils} Utils a reference to the flexibility utilities implementation.
 * @param {sap.ui.fl.Transports} Transports a reference to the transport service implementation.
 * @param {sap.ui.comp.transport.TransportDialog} TransportDialog a reference to the transport dialog implementation.
 * @param {sap.ui.fl.registry.Settings} FlexSettings a reference to the settings implementation
 * @returns {sap.ui.comp.transport.TransportSelection} a new instance of <code>sap.ui.comp.transport.TransportSelection</code>.
 */
jQuery.sap.declare('sap.ui.comp.transport.TransportSelection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/transport/TransportSelection",[	"jquery.sap.global", "sap/ui/fl/Utils", "sap/ui/fl/Transports", "sap/ui/comp/transport/TransportDialog", "sap/ui/fl/registry/Settings" ], function(jQuery, Utils, Transports, TransportDialog, FlexSettings) {
	"use strict";
	/**
	 * @public
	 * @constructor
	 */
	var TransportSelection = function() {
		this.oTransports = new sap.ui.fl.Transports();
		this.oUtils = sap.ui.fl.Utils;
	};

	/**
	 * Selects a transport request for a given LREP object.
	 * First checks if the Adaptation Transport Organizer (ATO) is enabled
	 * If ATO is enabled and LREP object is in CUSTOMER layer the request 'ATO_NOTIFICATION' has to be used which in the backend triggers that the change is added to an ATO collection
	 * If ATO is not enabled or LREP object not in CUSTOMER layer:
	 * If the LREP object is already assigned to an open transport request or the LREP object is
	 * assigned to a local ABAP package, no dialog to select a transport is started. Instead the success callback is invoked directly. The transport
	 * dialog is shown if a package or a transport request has still to be selected, so if more than one transport request is available for the
	 * current user and the LREP object is not locked in an open transport request.
	 * 
	 * @param {object} oObjectInfo the LREP object, which has the attributes name, name space, type, layer and package.
	 * @param {function} fOkay call-back to be invoked when a transport request has successfully been selected.
	 * @param {function} fError call-back to be invoked when an error occurred during selection of a transport request.
	 * @param {boolean} bCompactMode flag indicating whether the transport dialog should be opened in compact mode.
	 * @param {object} oControl Control instance
	 * @public
	 */
	TransportSelection.prototype.selectTransport = function(oObjectInfo, fOkay, fError, bCompactMode, oControl) {
		var that = this;

		if (oObjectInfo) {
			var sLayerType = Utils.getCurrentLayer(false);
			var sComponentName;
			if (oControl) {
				sComponentName = Utils.getComponentClassName(oControl);
			}
			// if component name and object layer are known and layer is CUSTOMER
			// check in settings if the adaptation transport organizer (ATO) is enabled
			if (sComponentName && sLayerType && sLayerType === 'CUSTOMER') {
				// retrieve the settings and check if ATO is enabled
				FlexSettings.getInstance(sComponentName).then(function(oSettings) {
					// ATO is enabled - signal that change is to be added to an ATO collection
					// instead of a transport
					if (oSettings.isAtoEnabled()) {
						var oTransport = { transportId: "ATO_NOTIFICATION" };
						fOkay(that._createEventObject(oObjectInfo, oTransport));
					// ATO is not enabled - use CTS 
					} else {
						that._selectTransport(oObjectInfo, fOkay, fError, bCompactMode);
					}
				});
			// do not have the required info to check for ATO or not CUSTOMER layer - use CTS
			} else {
				that._selectTransport(oObjectInfo, fOkay, fError, bCompactMode);
			}
		}
	};
	
	/**
	 * Selects a transport request for a given LREP object. If the LREP object is already assigned to an open transport request or the LREP object is
	 * assigned to a local ABAP package, no dialog to select a transport is started. Instead the success callback is invoked directly. The transport
	 * dialog is shown if a package or a transport request has still to be selected, so if more than one transport request is available for the
	 * current user and the LREP object is not locked in an open transport request.
	 * 
	 * @param {object} oObjectInfo the LREP object, which has the attributes name, name space, type, layer and package.
	 * @param {function} fOkay call-back to be invoked when a transport request has successfully been selected.
	 * @param {function} fError call-back to be invoked when an error occurred during selection of a transport request.
	 * @param {boolean} bCompactMode flag indicating whether the transport dialog should be opened in compact mode.
	 * @private
	 */
	TransportSelection.prototype._selectTransport = function(oObjectInfo, fOkay, fError, bCompactMode) {
		var oPromise, that = this;

		if (oObjectInfo) {
			oPromise = this.oTransports.getTransports(oObjectInfo);
			oPromise.then(function(oResult) {
				var oTransport;

				if (that._checkDialog(oResult)) {
					that._openDialog({
						hidePackage: !that.oUtils.doesSharedVariantRequirePackage(),
						pkg: oObjectInfo["package"],
						transports: oResult.transports,
						lrepObject: that._toLREPObject(oObjectInfo)
					}, fOkay, fError, bCompactMode);
				} else {
					oTransport = that._getTransport(oResult);
					fOkay(that._createEventObject(oObjectInfo, oTransport));
				}
			}, function(oResult) {
				fError(oResult);
			});
		}
	};

	/**
	 * Creates an event object similar to the UI5 event object.
	 * 
	 * @param {object} oObjectInfo identifies the LREP object.
	 * @param {object} oTransport the transport request that has been selected.
	 * @return {object} event object.
	 * @private
	 */
	TransportSelection.prototype._createEventObject = function(oObjectInfo, oTransport) {
		return {
			mParameters: {
				selectedTransport: oTransport.transportId,
				selectedPackage: oObjectInfo["package"],
				dialog: false
			},
			getParameters: function() {
				return this.mParameters;
			},
			getParameter: function(sName) {
				return this.mParameters[sName];
			}
		};
	};

	/**
	 * Creates an LREP object description for the transport dialog.
	 * 
	 * @param {object} oObjectInfo identifies the LREP object.
	 * @return {object} LREP object description for the transport dialog.
	 * @private
	 */
	TransportSelection.prototype._toLREPObject = function(oObjectInfo) {
		var oObject = {};

		if (oObjectInfo.namespace) {
			oObject.namespace = oObjectInfo.namespace;
		}

		if (oObjectInfo.name) {
			oObject.name = oObjectInfo.name;
		}

		if (oObjectInfo.type) {
			oObject.type = oObjectInfo.type;
		}

		return oObject;
	};

	/**
	 * Opens the dialog to select a transport request.
	 * 
	 * @param {object} oConfig configuration for the dialog, e.g. package and transports.
	 * @param {function} fOkay call-back to be invoked when a transport request has successfully been selected.
	 * @param {function} fError call-back to be invoked when an error occurred during selection of a transport request.
	 * @param {boolean} bCompactMode flag indicating whether the transport dialog should be opened in compact mode.
	 * @returns {sap.ui.comp.transport.TransportDialog} the dialog.
	 * @private
	 */
	TransportSelection.prototype._openDialog = function(oConfig, fOkay, fError, bCompactMode) {
		var oDialog = new TransportDialog(oConfig);
		oDialog.attachOk(fOkay);
		oDialog.attachCancel(fError);

		// toggle compact style.
		if (bCompactMode) {
			oDialog.addStyleClass("sapUiSizeCompact");
		} else {
			oDialog.removeStyleClass("sapUiSizeCompact");
		}

		oDialog.open();

		return oDialog;
	};

	/**
	 * Returns a transport to assign an LREP object to.
	 * 
	 * @param {object} oTransports the available transports.
	 * @returns {object} a transport to assign an LREP object to, can be <code>null</code>.
	 * @private
	 */
	TransportSelection.prototype._getTransport = function(oTransports) {
		var oTransport;

		if (!oTransports.localonly) {
			oTransport = this._hasLock(oTransports.transports);
		} else {
			oTransport = {
				transportId: ""
			};
		}

		return oTransport;
	};

	/**
	 * Returns whether the dialog to select a transport should be started.
	 * 
	 * @param {object} oTransports the available transports.
	 * @returns {boolean} <code>true</code>, if the LREP object is already locked in one of the transports, <code>false</code> otherwise.
	 * @private
	 */
	TransportSelection.prototype._checkDialog = function(oTransports) {
		if (oTransports) {
			if (oTransports.localonly || this._hasLock(oTransports.transports)) {
				return false;
			}
		}

		return true;
	};

	/**
	 * Returns whether the LREP object is already locked in one of the transports.
	 * 
	 * @param {array} aTransports the available transports.
	 * @returns {object} the transport, if the LREP object is already locked in one of the transports, <code>null</code> otherwise.
	 * @private
	 */
	TransportSelection.prototype._hasLock = function(aTransports) {
		var oTransport, len = aTransports.length;

		while (len--) {
			oTransport = aTransports[len];

			if (oTransport.locked) {
				return oTransport;
			}
		}

		return false;
	};

	return TransportSelection;
}, true);

}; // end of sap/ui/comp/transport/TransportSelection.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.valuehelpdialog.ItemsCollection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// EXC_ALL_CLOSURE_003
jQuery.sap.declare('sap.ui.comp.valuehelpdialog.ItemsCollection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/valuehelpdialog/ItemsCollection",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * Constructs a class to map key/object pairs
	 * 
	 * @constructor
	 * @public
	 * @author Peter Harbusch
	 */
	var ItemsCollection = function() {
		this.items = {};
	};
	
	/**
	 * add or overwrite a key in the map and the associated obj
	 * 
	 * @param {string} sKey - the key of the obj in the map
	 * @param {object} obj - the obj which has to been stored in the map
	 * @public
	 */
	ItemsCollection.prototype.add = function(sKey, obj) {
		this.items[sKey] = obj;
	};
	
	/**
	 * removes the key in the map and the associated obj
	 * 
	 * @param {string} sKey - the key of the obj in the map
	 * @public
	 */
	ItemsCollection.prototype.remove = function(sKey) {
		delete this.items[sKey];
	};
	
	/**
	 * removes all the items
	 * 
	 * @public
	 */
	ItemsCollection.prototype.removeAll = function() {
		this.items = {};
	};
	
	/**
	 * returns the obj of the key on the map
	 * 
	 * @param {string} sKey - the key of the obj in the map
	 * @returns {object} the object with the given key
	 * @public
	 */
	ItemsCollection.prototype.getItem = function(sKey) {
		return this.items[sKey];
	};
	
	/**
	 * returns an array of all keys in the map
	 * 
	 * @returns {array} the array of all the map keys
	 * @public
	 */
	ItemsCollection.prototype.getItems = function() {
		var aKeys = [];
		for ( var item in this.items) {
			aKeys.push(item);
		}
		return aKeys;
	};
	
	/**
	 * returns an array of all selected tokens in the map
	 * 
	 * @param {string} sKey - the property name of the obj in the map which will be used for the Display Key in the tokens returned in the array
	 * @param {string} sDescriptionKey - the property name of the obj in the map which will be returned in the array
	 * @param {string} sDisplayBehaviour - the behaviour/format of the token text (See: sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR)
	 * @returns {array} array of objects with the given key and the text value
	 * @public
	 */
	ItemsCollection.prototype.getSelectedItemsTokenArray = function(sKey, sDescriptionKey, sDisplayBehaviour) {
		var aTokens = [];
		for ( var sItemKey in this.items) {
			var oItem = this.items[sItemKey];
			var sText, sDisplayKey;
			
			if (typeof oItem === "string") {
				sDisplayKey = sItemKey;
				sText = oItem;
			} else {
				sDisplayKey = oItem[sKey];
				sText = oItem[sDescriptionKey];
	
				if (sText === undefined) {
					sText = this.items[sItemKey];
				} else {
					if (sDisplayBehaviour) {
						sText = sap.ui.comp.smartfilterbar.FilterProvider.getFormattedExpressionFromDisplayBehaviour(sDisplayBehaviour, sDisplayKey, sText);
					} else {
						sText = sText + " (" + sDisplayKey + ")";
					}
				}
			}
			
			var oToken = new sap.m.Token({
				key: sDisplayKey,
				text: sText,
				tooltip: sText
			});
			
			if (typeof oItem !== "string") {
				oToken.data("row", oItem);
				oToken.data("longKey", sItemKey);
			}
			aTokens.push(oToken);
		}
		return aTokens;
	};
	
	/**
	 * returns an array of all objects in the map
	 * 
	 * @returns {array} the array of all the map objects
	 * @public
	 */
	ItemsCollection.prototype.getModelData = function() {
		var aModelItems = [];
		for ( var itemKey in this.items) {
			var item = this.items[itemKey];
			if (typeof item === "string") {
				item = {
					missing: itemKey
				};
			}
			aModelItems.push(item);
		}
		return aModelItems;
	};
	

	return ItemsCollection;

}, /* bExport= */ true);

}; // end of sap/ui/comp/valuehelpdialog/ItemsCollection.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.valuehelpdialog.ValueHelpDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.valuehelpdialog.ValueHelpDialog.
jQuery.sap.declare('sap.ui.comp.valuehelpdialog.ValueHelpDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/valuehelpdialog/ValueHelpDialog",['jquery.sap.global', 'sap/m/Dialog', 'sap/m/MessageBox', 'sap/m/MultiInput', 'sap/m/Token', 'sap/ui/comp/library', './ItemsCollection', 'sap/ui/core/Control', 'sap/ui/core/format/DateFormat', 'sap/ui/core/format/NumberFormat', 'sap/ui/table/Table'],
	function(jQuery, Dialog, MessageBox, MultiInput, Token, library, ItemsCollection, Control, DateFormat, NumberFormat, Table) {
	"use strict";


	
	/**
	 * Constructor for a new valuehelpdialog/ValueHelpDialog.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The ValueHelpDialog Control can be used to implement an F4 value help for a multi-input field.
	 * @extends sap.m.Dialog
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.valuehelpdialog.ValueHelpDialog
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ValueHelpDialog = Dialog.extend("sap.ui.comp.valuehelpdialog.ValueHelpDialog", /** @lends sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * This property defines the value for the basic search field.
			 * @since 1.24
			 */
			basicSearchText : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * This property enables multi-selection in a table.
			 * @since 1.24
			 */
			supportMultiselect : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * This property enables the Ranges button on the dialog.
			 * @since 1.24
			 */
			supportRanges : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * This property defines the column/key name used for the token text.
			 * @since 1.24
			 */
			descriptionKey : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * This is the key property of the OData service for handling in the table and tokens
			 * @since 1.24
			 */
			key : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * When this property is set to true, the value help dialog only shows range tokens.
			 * @since 1.24
			 */
			supportRangesOnly : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * defines the max number of include ranges.
			 * @since 1.24
			 */
			maxIncludeRanges : {type : "string", group : "Misc", defaultValue : '-1'},
	
			/**
			 * defines the max number of exclude ranges
			 * @since 1.24
			 */
			maxExcludeRanges : {type : "string", group : "Misc", defaultValue : '-1'},
	
			/**
			 * This represents the displayFormat of the Range Values. With the value "UpperCase" the entered value of the Range will be converted to upperCase.
			 * @since 1.24
			 */
			displayFormat : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * This represents how the item token text should be displayed on the ValueHelpDialog.
			 * Use one of the valid sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR const values.
			 * 
			 * @since 1.24
			 */
			tokenDisplayBehaviour : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * set the dialog into a FilterDialog mode, which only shows ranges and hide the tokens.
			 * @since 1.24
			 */
			filterMode : {type : "boolean", group : "Misc", defaultValue : false}
		},
		aggregations : {
	
			/**
			 * This allows a SmartFilterBar to be added to the ValueHelp dialog.
			 */
			filterBar : {type : "sap.ui.core.Control", multiple : false}
		},
		events : {
	
			/**
			 * This event will be fired when the user clicks the OK button on the dialog.
			 * @since 1.24
			 */
			ok : {}, 
	
			/**
			 * This event will be fired when the user clicks the Cancel button on the dialog.
			 * @since 1.24
			 */
			cancel : {}
		}
	}});
	
	
	/**
	 * This method allows you to specify the KeyFields for the ranges. You can set an array of object with Key and Label properties to define the keyfields.
	 *
	 * @name sap.ui.comp.valuehelpdialog.ValueHelpDialog#setRangeKeyFields
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * This method must be used to assign a list of tokens to the value help dialog.
	 *
	 * @name sap.ui.comp.valuehelpdialog.ValueHelpDialog#setTokens
	 * @function
	 * @param {sap.m.Token[]} aATokens
	 *         array of Token controls.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	// EXC_ALL_CLOSURE_003
	
	/**
	 * sets the support for multiselection.
	 * 
	 * @public
	 * @since 1.24
	 * @param {boolean} bEnabled enabled or disabled multiselection
	 */
	ValueHelpDialog.prototype.setSupportMultiselect = function(bEnabled) {
		this.setProperty("supportMultiselect", bEnabled);
	
		this.theTable.setSelectionMode(bEnabled ? sap.ui.table.SelectionMode.MultiToggle : sap.ui.table.SelectionMode.Single);
		if (!bEnabled) {
			this._oTokenizerGrid.addStyleClass("displayNone");
		} else {
			this._oTokenizerGrid.removeStyleClass("displayNone");
		}
		this.getBeginButton().setVisible(this.getSupportMultiselect());
		return this;
	};
	
	/**
	 * sets the support for ranges. When you disable ranges the dialog does not provide a "Define Condition" link in the header which opens the ranges UI
	 * in the value help dialog.
	 * 
	 * @public
	 * @since 1.24
	 * @param {boolean} bEnabled enabled or disabled ranges support
	 */
	ValueHelpDialog.prototype.setSupportRanges = function(bEnabled) {
		this.setProperty("supportRanges", bEnabled);
	
		if (bEnabled && !this.getSupportRangesOnly()) {
			if (!this._oRangeButton) {
				this._oRangeButton = new sap.m.Button({
					type: sap.m.ButtonType.Transparent,
					text: this._oRb.getText("VALUEHELPDLG_RANGES"),
					press: this._onRangesPressed()
				}).addStyleClass("compVHRangesLink");
				
				this._oHeaderBar.addContentRight(this._oRangeButton);
			} else {
				this._oRangeButton.setVisible(true);
			}
		}
		if (!bEnabled && !this.getSupportRangesOnly() && this._oRangeButton) {
			this._oRangeButton.setVisible(false);
		}
		
		return this;
	};
	
	/**
	 * press handler for the "Define Condition" (ranges) button
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._onRangesPressed = function() {
		var that = this;
	
		return function() {
			if (that.getSupportRanges()) {
				that.bCollectiveSearchActive = that.oSelectionButton.getVisible();
				that._fillRanges(true);
			}
		};
	};
	
	/**
	 * called when the dialog will be opened to make only the ranges accessible/visible and to hide e.g. the back button
	 * 
	 * @private
	 * @param {boolean} bIsBackSupport makes Back button visible
	 */
	ValueHelpDialog.prototype._fillRanges = function(bIsBackSupport) {
		this._showRanges();
	
		if (this._oRangeButton) {
			this._oRangeButton.setVisible(false);
		}
		if (this.oSelectionTitle) {
			this.oSelectionTitle.setVisible(false);
		}
		if (this.oSelectionButton) {
			this.oSelectionButton.setVisible(false);
		}
	
		this._oBackButton.setVisible(bIsBackSupport);
	
		this.getBeginButton().setVisible(this.getSupportRangesOnly() || this.getSupportMultiselect());
	
		this._oTitle.setText(this.getFilterMode() ? this.getTitle() : this._oRb.getText("VALUEHELPDLG_RANGESTITLE", this.getTitle()));
	};
	
	/**
	 * press handler for the "Back" (to main list) button
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._onBackPressed = function() {
		var that = this;
	
		return function() {
			var fnCallback = function() {
				that._showNormalTable();
	
				if (that._oRangeButton) {
					that._oRangeButton.setVisible(true);
				}
				if (that.oSelectionTitle) {
					that.oSelectionTitle.setVisible(that.bCollectiveSearchActive);
				}
				if (that.oSelectionButton) {
					that.oSelectionButton.setVisible(that.bCollectiveSearchActive);
				}
	
				that._oBackButton.setVisible(false);
	
				that._oTitle.setText(that._oRb.getText("VALUEHELPDLG_TITLE", that.getTitle()));
			};
	
			that._validateRanges(fnCallback);
		};
	};
	
	/**
	 * press handler for the "Selected Items" link
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._onSelectedItemsPressed = function() {
		var that = this;
	
		return function() {
			var fnCallback = function() {
				that.bCollectiveSearchActive = that.oSelectionButton.getVisible();
	
				that._showSelectedItems();
	
				if (that._oRangeButton) {
					that._oRangeButton.setVisible(false);
				}
				if (that.oSelectionTitle) {
					that.oSelectionTitle.setVisible(false);
				}
				if (that.oSelectionButton) {
					that.oSelectionButton.setVisible(false);
				}
	
				that._oBackButton.setVisible(true);
	
				that._oTitle.setText(that._oRb.getText("VALUEHELPDLG_SELECTEDITEMSTITLE", that.getTitle()));
			};
	
			that._validateRanges(fnCallback);
		};
	};
	
	/**
	 * sets the Title of the dialog. The value will be used for the different titles which we display on the dialog. The dialog title changes depending on
	 * the content. Select: {sTitle} Define Conditions: {sTitle} Selected Items: {sTitle}
	 * 
	 * @public
	 * @since 1.24
	 * @param {string} sTitle
	 */
	ValueHelpDialog.prototype.setTitle = function(sTitle) {
		this.setProperty("title", sTitle);
	
		if (this._oTitle) {
			this._oTitle.setText(this._oRb.getText("VALUEHELPDLG_TITLE", sTitle));
		}
	};
	
	/**
	 * sets the FilterBar into the Value Help dialog.
	 * 
	 * @public
	 * @since 1.24
	 * @param {FilterBar/SmartFilterBar} oControl
	 */
	ValueHelpDialog.prototype.setFilterBar = function(oCtrl) {
		this.setAggregation("filterBar", oCtrl);
	
		if (this._oMainGrid && oCtrl) {
			if (this._oFilterBar) {
				this._oMainGrid.removeContent(this._oFilterBar);
			}
			this._oFilterBar = oCtrl;
			// insert the filterbar into the main grid
			this._oMainGrid.insertContent(oCtrl, 0);
	
			// try to fill the basic search text into the SmartFilterBar and set the initial Focus.
			if (this._oFilterBar.getBasicSearchControl && this._oFilterBar.getBasicSearchControl()) {
				var oBasicSearchField = this._oFilterBar.getBasicSearchControl();
				oBasicSearchField.setValue(this.getBasicSearchText());
	
				this.setInitialFocus(oBasicSearchField);
			}
		}
	};
	
	/**
	 * return current FilterBar of Value Help dialog.
	 * 
	 * @public
	 * @since 1.24
	 * @returns {FilterBar/SmartFilterBar} the current FilterBar instance
	 */
	ValueHelpDialog.prototype.getFilterBar = function() {
		return this._oFilterBar;
	};
	
	/**
	 * sets the Basic search text. The value will be set into the basic search field of the Filterbar
	 * 
	 * @public
	 * @since 1.24
	 * @param {string} sText the text for the basic search field
	 */
	ValueHelpDialog.prototype.setBasicSearchText = function(sText) {
		this.setProperty("basicSearchText", sText);
	
		if (this._oFilterBar && this._oFilterBar.getBasicSearchControl && this._oFilterBar.getBasicSearchControl()) {
			this._oFilterBar.getBasicSearchControl().setValue(sText);
		}
	};
	
	/**
	 * sets the array of tokens. The sap.mTokens will be added into the Dialog Tokenizer "Selected Items" or "Excluded Items". normal Tokens will added
	 * into the Selected Items Tokenizer and selected in the table new sap.m.Token({key: "0001", text:"SAP A.G. (0001)"}); Tokens with the extra data
	 * "range" will be handled as Range tokens or exclude Range tokens. new sap.m.Token({key: "i1", text: "ID: a..z"}).data("range", { "exclude": false,
	 * "operation": sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, "keyField": "CompanyCode", "value1": "a", "value2": "z"}); You the the
	 * Selected or Range tokens back via the Ok event in the parameters
	 * 
	 * @public
	 * @since 1.24
	 * @param {array} aTokens the complete list of tokens
	 */
	ValueHelpDialog.prototype.setTokens = function(aTokens) {
		if (aTokens.length) {
			var n = 0, sKey;
			for (var i = 0; i < aTokens.length; i++) {
				var token = aTokens[i];
				if (token.data("range")) {
					var range = token.data("range");
					sKey = token.getKey();
					if (!sKey) {
						sKey = "range_" + n;
						n++;
					}
					var theTokenText = this._getFormatedRangeTokenText(range.operation, range.value1, range.value2, range.exclude, range.keyField);
					this._addToken2Tokenizer(sKey, theTokenText, range.exclude ? this._oExcludedTokens : this._oSelectedTokens);
	
					this._oSelectedRanges[sKey] = range;
				} else {
					sKey = token.getKey();
					var sText = token.getText();
					var sLongKey = token.data("longKey");
					var oRowData = token.data("row");
					if (!sLongKey) {
						sLongKey = sKey;
					}
					this._oSelectedItems.add(sLongKey, oRowData ? oRowData : token.getText());
	
					this._oSelectedTokens.addToken(new Token({
						key: sLongKey,
						text: sText,
						tooltip: sText
					}));
				}
			}
		} else {
			this._oSelectedItems.removeAll();
			this._oSelectedRanges = {};
		}
	};
	
	/**
	 * opens the dialog when SupportRangesOnly is set to True we directly show the Ranges part
	 * 
	 * @public
	 * @since 1.24
	*/
	ValueHelpDialog.prototype.open = function() {
		if (this.getSupportRangesOnly() || this.getFilterMode()) {
			this._fillRanges(false);
		}
		this.setContentWidth(this._getDefaultContentWidth());
	
		Dialog.prototype.open.apply(this);
	};
	
	/**
	 * gives access to the internal table instance
	 * 
	 * @public
	 * @since 1.28
	 */
	ValueHelpDialog.prototype.getTable = function() {
		return this.theTable;
	};
	
	/**
	 * return the default ContentWidth for the dialog
	 * 
	 * @private
	 * @returns the width in px as string
	 */
	ValueHelpDialog.prototype._getDefaultContentWidth = function() {
		var nColumns = 0;
		if (this.theTable) {
			nColumns = this.theTable.getColumns().length;
		}
		var nWidth = Math.max(1080, nColumns * 130);
		return nWidth + "px";
	};
	
	/**
	 * Reset the table binding and change the table NoDataText to "Please press Search Button"
	 * 
	 * @public
	 * @since 1.24
	*/
	ValueHelpDialog.prototype.resetTableState = function() {
		if (this.theTable) {
			this.theTable.unbindRows();
			this.theTable.setNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"));
		}
	};
	
	/**
	 * Change the table NoDataText to "Please press Search Button"
	 * 
	 * @public
	 * @since 1.24
	 */
	ValueHelpDialog.prototype.TableStateSearchData = function() {
		if (this.theTable) {
			this.theTable.setNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"));
		}
	};
	
	/**
	 * Change the table NoDataText to "No Data found!"
	 * 
	 * @public
	 * @since 1.24
	 */
	ValueHelpDialog.prototype.TableStateDataFilled = function() {
		if (this.theTable) {
			this.theTable.setNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_NODATA"));
		}
	};
	
	/**
	 * Change the table NoDataText to "Searching..."
	 * 
	 * @public
	 * @since 1.28
	 */
	ValueHelpDialog.prototype.TableStateDataSearching = function() {
		if (this.theTable) {
			this.theTable.setNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_SEARCHING"));
		}
	};
	
	/**
	 * Initialize the control
	 * 
	 * @public
	 */
	ValueHelpDialog.prototype.init = function() {
		Dialog.prototype.init.apply(this);
	
		// init the Dialog itself
		this.addStyleClass("compValueHelpDialog");
		this.setHorizontalScrolling(false);
		this.setVerticalScrolling(true);
	
		// init some resources
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this._sTableTitle1 = this._oRb.getText("VALUEHELPDLG_TABLETITLE1");
		this._sTableTitle2 = this._oRb.getText("VALUEHELPDLG_TABLETITLE2");
		this._sTableTitleNoCount = this._oRb.getText("VALUEHELPDLG_TABLETITLENOCOUNT");
		this._sSelectedItemsTitle = this._oRb.getText("VALUEHELPDLG_SELECTEDITEMS");
		this._sNoneSelectedItemsTitle = this._oRb.getText("VALUEHELPDLG_NONESELECTEDITEMS");
	
		if (!this._aIncludeRangeOperations) {
			this.setIncludeRangeOperations([
				sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LT, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LE, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GT, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GE
			]);
		}
	
		if (!this._aExcludeRangeOperations) {
			this.setExcludeRangeOperations([
				sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ
			]);
		}
	
		this._oSelectedItems = new ItemsCollection();
		this._oSelectedRanges = {};
	
		this._createHeaderBar();
	
		this._createTable();
	
		this._createTokenizer();
		this._updateTokenizer();
	
		this._oInnerGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			vSpacing: 0,
			hSpacing: 0,
			content: [
				this._oFilterBar, this.theTable
			]
		}).addStyleClass("compVHPadding");
	
		this._oMainGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			vSpacing: 0,
			hSpacing: 0,
			content: [
				this._oInnerGrid, this._oTokenizerGrid
			]
		});
	
		this.addContent(this._oMainGrid);
	
		this._fillFooter();
	};
	
	/**
	 * select or deselect the row in the table with the given key
	 * 
	 * @private
	 * @param {string} sKey the key of the row
	 * @param {boolean} bSelect specifies if the row should be selected or deselected.
	 */
	ValueHelpDialog.prototype._changeTableRowSelectionForKey = function(sKey, bSelect) {
		var i;
		var rows = this.theTable.getBinding("rows");
	
		if (rows.aKeys) {
			for (i = 0; i < rows.aKeys.length; i++) {
				if (rows.aKeys[i] === sKey) {
					if (bSelect) {
						this.theTable.addSelectionInterval(i, i);
					} else {
						this.theTable.removeSelectionInterval(i, i);
					}
					return;
				}
			}
		} else {
			this.oRows = this.theTable.getBinding("rows");
			for (i = 0; i < this.oRows.aIndices.length; i++) {
				var oContext = this.theTable.getContextByIndex(i);
				if (oContext) {
					var obj = oContext.getObject();
					if (obj[this.getKey()] === sKey) {
						if (bSelect) {
							this.theTable.addSelectionInterval(i, i);
						} else {
							this.theTable.removeSelectionInterval(i, i);
						}
						return;
					}
				}
			}
		}
	
	};
	
	/**
	 * updates the selection of rows in the table. should be called after a binding update of the table.
	 * 
	 * @public
	 * @since 1.24
	*/
	ValueHelpDialog.prototype.update = function() {
		var i, j, obj, oContext;
		this.oRows = this.theTable.getBinding("rows");
	
		this.ignoreSelectionChange = true;
		this.theTable.clearSelection();
	
		var aItems = this._oSelectedItems.getItems();
		var sRowKeyPartPrefix = this.getKeys() && this.getKeys().length > 1 ? this.getKey() + "=" : "";
	
		if (this.oRows.aKeys) {
			// in case of a ODataModel binding the aKeys exist and the row will be found via the keys.
			for (j = 0; j < aItems.length; j++) {
				var sKey = aItems[j];
				var sRowKeyPart = sRowKeyPartPrefix + "'" + sKey + "'";
	
				for (i = 0; i < this.oRows.aKeys.length; i++) {
					var sRowKey = this.oRows.aKeys[i];
					var bIsRow = sRowKey === sKey;
					if (bIsRow || // either the rowKey is equal the token key or we search if the main key with the value is part of the rowKey 
						sRowKey.indexOf(sRowKeyPart) >= 0) {
	
						if (!bIsRow) { // in this case we will update the old key and use the longKey from the rows
							this._oSelectedItems.remove(sKey); // remove the old  key
							// and update the Token key
							var token = this._getTokenByKey(sKey, this._oSelectedTokens);
							if (token) {
								token.setKey(sRowKey);
							}
						}
						
						// update the row data in the selectedItems List
						oContext = this.theTable.getContextByIndex(i);
						if (oContext) {
							obj = oContext.getObject();
							this._oSelectedItems.add(sRowKey, obj);
						}
	
						// make the row selected
						this.theTable.addSelectionInterval(i, i);
						break;
					}
				}
			}
		} else {
			for (j = 0; j < aItems.length; j++) {
				var key = aItems[j];
	
				for (i = 0; i < this.oRows.aIndices.length; i++) {
					oContext = this.theTable.getContextByIndex(i);
					if (oContext) {
						obj = oContext.getObject();
						if (obj[this.getKey()] === key) {
							this._oSelectedItems.add(obj[this.getKey()], obj);
							this.theTable.addSelectionInterval(i, i);
							break;
						}
					}
				}
			}
		}
	
		this.ignoreSelectionChange = false;
	
		this._updateTitles();
	};
	
	/**
	 * create the header bar, the controls for the header and adds it into the CustomHeader
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._createHeaderBar = function() {
		this._oBackButton = new sap.m.Button({
			type: sap.m.ButtonType.Transparent,
			icon: "sap-icon://nav-back",
			text: this._oRb.getText("VALUEHELPDLG_BACK"),
			press: this._onBackPressed(),
			visible: false
		});
	
		this._oTitle = new sap.m.Text({
			text: this._oRb.getText("VALUEHELPDLG_TITLE", this.getTitle()),
			wrapping: false
		}).addStyleClass("titleText").unbindText(); // Text is not set via binding, but by calling setText
	
		// !!! this is a workaround to support the "collective Search" in the Value Help dialog.
		// the oSelectionText and oSelectionButton are accessed outside the dialog!!!
		this.oSelectionTitle = new sap.m.Text({
			visible: false,
			wrapping: false
		}).addStyleClass("titleText");
	
		this.oSelectionButton = new sap.m.Button({
			icon: "sap-icon://navigation-down-arrow",
			visible: false
		});
		// !!!--------------!!!
	
		this._oHeaderBar = new sap.m.Bar({
			contentLeft: [
				this._oBackButton
			],
			contentMiddle: [
				this._oTitle, this.oSelectionTitle, this.oSelectionButton
			]
		});
		this.setCustomHeader(this._oHeaderBar);
	};
	
	/**
	 * create the footer buttons
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._fillFooter = function() {
		var that = this;
	
		this.setBeginButton(new sap.m.Button({
			text: that._oRb.getText("VALUEHELPDLG_OK"),
			press: that._onCloseAndTakeOverValues(),
			visible: this.getSupportMultiselect()
		}));
	
		this.setEndButton(new sap.m.Button({
			text: that._oRb.getText("VALUEHELPDLG_CANCEL"),
			press: that._onCancel()
		}));
	};
	
	/**
	 * create the Tokenizer part of the dialog
	 * 
	 * @private
	 * @returns grid with all elements
	 */
	ValueHelpDialog.prototype._createTokenizer = function() {
		var that = this;
	
		if (this._oTokenizerGrid) {
			return this._oTokenizerGrid;
		}
	
		this._oSelectedTokenTitle = new sap.m.Text().addStyleClass("compVHSelectedItemsText");
	
		this._oSelectedTokens = new sap.m.Tokenizer({
			tokenChange: function(oControlEvent) {
				if (that._ignoreRemoveToken) {
					return;
				}
	
				if (oControlEvent.getParameter("type") === MultiInput.TokenChangeType.Removed) {
					var sKey = oControlEvent.getParameter("token").getKey();
					if (that._oSelectedRanges && that._oSelectedRanges[sKey]) {
						// remove range
						that._removeRangeByKey(sKey, false);
						that._updateTitles();
					} else {
						// remove single selected item
						that._oSelectedItems.remove(sKey);
						that._removeTokenFromTokenizer(sKey, that._oSelectedTokens);
						that._updateTitles();
	
						that.ignoreSelectionChange = true;
						that._changeTableRowSelectionForKey(sKey, false);
						that.ignoreSelectionChange = false;
					}
	
					// reset focus to other token
					setTimeout(function() {
						var i = that._oSelectedTokens.getTokens().length - 1;
						if (i >= 0) {
							that._oSelectedTokens.getTokens()[i].focus();
						}
					});
				}
			}
		}).addStyleClass("compVHTokensDiv");
	
		// this "remove all" button is a workaround and should be part of the Tokenizer itself
		this._oRemoveAllSelectedItemsBtn = new sap.m.Button({
			type: sap.m.ButtonType.Transparent,
			icon: sap.ui.core.IconPool.getIconURI("sys-cancel"),
			press: function() {
				that._oSelectedTokens.removeAllTokens();
	
				for ( var sKey in that._oSelectedRanges) {
					that._removeRangeByKey(sKey, false);
				}
	
				that._oSelectedItems.removeAll();
				that.ignoreSelectionChange = true;
				that.theTable.clearSelection();
				that.ignoreSelectionChange = false;
	
				that._updateTitles();
			}
		}).addStyleClass("compVHRemoveAllBtn");
	
		var oHContainer1 = new sap.ui.layout.HorizontalLayout({
			content: [
				this._oSelectedTokens, this._oRemoveAllSelectedItemsBtn
			]
		}).addStyleClass("compVHTokenizerHLayout");
	
		this._oIncludeTokenGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: [
				this._oSelectedTokenTitle, oHContainer1
			]
		});
	
		this._oExcludedTokenTitle = new sap.m.Text().addStyleClass("compVHSelectedItemsText");
	
		this._oExcludedTokens = new sap.m.Tokenizer({
			tokenChange: function(oControlEvent) {
				if (that._ignoreRemoveToken) {
					return;
				}
	
				if (oControlEvent.getParameter("type") === MultiInput.TokenChangeType.Removed) {
					var sKey = oControlEvent.getParameter("token").getKey();
					that._removeRangeByKey(sKey, true);
					that._updateTitles();
				}
			}
		}).addStyleClass("compVHTokensDiv");
	
		// this "remove all" button is a workaround and should be part of the Tokenizer itself
		this._oRemoveAllExcludeItemsBtn = new sap.m.Button({
			type: sap.m.ButtonType.Transparent,
			icon: sap.ui.core.IconPool.getIconURI("sys-cancel"),
			press: function() {
				that._oExcludedTokens.removeAllTokens();
	
				for ( var sKey in that._oSelectedRanges) {
					that._removeRangeByKey(sKey, true);
				}
				that._updateTitles();
			}
		}).addStyleClass("compVHRemoveAllBtn");
	
		var oHContainer2 = new sap.ui.layout.HorizontalLayout({
			content: [
				this._oExcludedTokens, this._oRemoveAllExcludeItemsBtn
			]
		}).addStyleClass("compVHTokenizerHLayout");
	
		this._oExcludeTokenGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: [
				this._oExcludedTokenTitle, oHContainer2
			]
		});
	
		this._oShowAllLink = new sap.m.Button({
			type: sap.m.ButtonType.Transparent,
			text: this._oRb.getText("VALUEHELPDLG_SHOWALL"),
			press: this._onSelectedItemsPressed(),
			visible: (this.fSingleRowCallback !== undefined) && (!this.getSupportRangesOnly())
		}).addStyleClass("compVHShowAllLink");
	
		this._oTokenizerGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: [
				this._oIncludeTokenGrid, this._oExcludeTokenGrid, this._oShowAllLink
			]
		}).addStyleClass("compVHDarkBackground");
	
		if (!this.getSupportMultiselect()) {
			this._oTokenizerGrid.addStyleClass("displayNone");
		}
	
		return this._oTokenizerGrid;
	};
	
	/**
	 * adds/modify a token in a tokenizer control.
	 * 
	 * @private
	 * @param {string} sKey of the token
	 * @param {string} sText the token text
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 */
	ValueHelpDialog.prototype._addToken2Tokenizer = function(sKey, sText, oTokenizer) {
		var token = this._getTokenByKey(sKey, oTokenizer);
		if (token) {
			// update existing token
			token.setText(sText);
			token.setTooltip(sText);
		} else {
			// create a new token
			oTokenizer.addToken(new Token({
				key: sKey,
				text: sText,
				tooltip: sText
			}));
			this._updateTokenizer();
		}
	};
	
	/**
	 * search a token by key in the given tokenizer
	 * 
	 * @private
	 * @param {string} sKey of the token
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 * @returns {sap.m.Token} the found token instance or null
	 */
	ValueHelpDialog.prototype._getTokenByKey = function(sKey, oTokenizer) {
		var aTokens = oTokenizer.getTokens();
		for (var i = 0; i < aTokens.length; i++) {
			var token = aTokens[i];
			if (token.getKey() === sKey) {
				return token;
			}
		}
		return null;
	};
	
	/**
	 * removes a token from the selected or excluded tokenizer
	 * 
	 * @private
	 * @param {string} sKey of the token
	 */
	ValueHelpDialog.prototype._removeToken = function(sKey) {
		if (!this._removeTokenFromTokenizer(sKey, this._oSelectedTokens)) {
			this._removeTokenFromTokenizer(sKey, this._oExcludedTokens);
		}
	};
	
	/**
	 * removes a token from a tokenizer
	 * 
	 * @private
	 * @param {string} sKey of the token
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 * @returns {boolean} true when the token hase been foudna removed, else false
	 */
	ValueHelpDialog.prototype._removeTokenFromTokenizer = function(sKey, oTokenizer) {
		var token = this._getTokenByKey(sKey, oTokenizer);
		if (token) {
			this._ignoreRemoveToken = true;
			oTokenizer.removeToken(token);
			this._ignoreRemoveToken = false;
			this._updateTokenizer();
			return true;
		}
		return false;
	};
	
	/**
	 * updating the tokenizer title, RemoveAll button and ShowAll link
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._updateTokenizer = function() {
		var n1 = this._oSelectedTokens.getTokens().length;
		var sText = this._sSelectedItemsTitle.replace("{0}", n1.toString());
		this._oSelectedTokenTitle.setText(n1 === 0 ? this._sNoneSelectedItemsTitle : sText);
		this._oRemoveAllSelectedItemsBtn.setEnabled(n1 !== 0);
	
		var n2 = this._oExcludedTokens.getTokens().length;
		this._oExcludedTokenTitle.setText(this._oRb.getText("VALUEHELPDLG_EXCLUDEDITEMS", n2.toString()));
	
		if (n2 === 0) {
			this._oExcludeTokenGrid.addStyleClass("displayNone");
		} else {
			this._oExcludeTokenGrid.removeStyleClass("displayNone");
		}
	
		this._oShowAllLink.setVisible(!this.getSupportRangesOnly() && this.fSingleRowCallback !== undefined && (n1 + n2 > 0));
	
		this._onMyResize();
	};
	
	/**
	 * remove a single range from the UI and the internal selectedRanges list.
	 * 
	 * @private
	 * @param {string} sKey the key of the range
	 * @param {boolean} isExclude specifies if the removed range must be an included or excluded range
	 */
	ValueHelpDialog.prototype._removeRangeByKey = function(sKey, isExclude) {
		var range = this._oSelectedRanges[sKey];
		if (range.exclude === isExclude) {
			if (!range._oGrid) {
				delete this._oSelectedRanges[sKey];
				
				if (this._oFilterPanel) {
					if (range.exclude) {
						this._oFilterPanel._oExcludeFilterPanel.removeCondition(sKey);
					} else {
						this._oFilterPanel._oIncludeFilterPanel.removeCondition(sKey);
					}
				}
			}
		}
	};
	
	/**
	 * makes the main view (Filterbar and result Table) visible in the dialog.
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._showNormalTable = function() {
		this.removeAllContent();
		this.setVerticalScrolling(true);
		this.setContentHeight("");
		this.setContentWidth(this._getDefaultContentWidth());
	
		this._oMainGrid.addContent(this._oTokenizerGrid);
		this.addContent(this._oMainGrid);
	
		this._updateTitles();
	};
	
	// ################################################################################
	// Start Ranges handling
	// ################################################################################
	
	/**
	 * makes the ranges view (included and excluded range fields) visible in the dialog.
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._showRanges = function() {
		this.removeAllContent();
		this.setVerticalScrolling(false);
	
		if (!this.getSupportRangesOnly() && !this.getFilterMode()) {
			// to avoid a dialog resize when we add or remove ranges the dialog get a fixed size
			this.setContentHeight(this._iResizeDomHeight + "px");
			this._onMyResize();
		}
	
		this.addContent(this._getRanges());
		if (this.getMaxIncludeRanges() === "-1" && this.getMaxExcludeRanges() !== "0" && !this.getFilterMode()) {
			this._oRanges.addContent(this._oTokenizerGrid);
		}
	};
	
	/**
	 * create and returns the Ranges grid
	 * 
	 * @private
	 * @returns the ranges grid
	 */
	ValueHelpDialog.prototype._getRanges = function() {
		if (!this._oRanges) {
			this._oRanges = this._createRanges();
		}
		return this._oRanges;
	};
	
	/**
	 * create a new instance of ranges grid with all inner controls
	 * 
	 * @private
	 * @returns the ranges grid
	 */
	ValueHelpDialog.prototype._createRanges = function() {
	
		jQuery.sap.require("sap.m.P13nConditionPanel");
		jQuery.sap.require("sap.m.P13nFilterPanel");
	
		this._oFilterPanel = new sap.m.P13nFilterPanel({
			maxIncludes: this.getMaxIncludeRanges(),
			maxExcludes: this.getMaxExcludeRanges(),
			containerQuery: true,
			addFilterItem: jQuery.proxy(function(oEvent) {
				// sap.m.MessageToast.show("AddFilterItem");
	
				var params = oEvent.mParameters;
				var oRange = {
					exclude: params.filterItemData.exclude,
					keyField: params.filterItemData.columnKey,
					operation: params.filterItemData.operation,
					value1: params.filterItemData.value1,
					value2: params.filterItemData.value2
				};
				this._oSelectedRanges[params.key] = oRange;
	
				var sTokenText = this._getFormatedRangeTokenText(oRange.operation, oRange.value1, oRange.value2, oRange.exclude, oRange.keyField);
				this._addToken2Tokenizer(params.key, sTokenText, oRange.exclude ? this._oExcludedTokens : this._oSelectedTokens);
				this._updateTokenizer();
			}, this),
			removeFilterItem: jQuery.proxy(function(oEvent) {
				// sap.m.MessageToast.show("RemoveFilterItem");
	
				var params = oEvent.mParameters;
				delete this._oSelectedRanges[params.key];
				this._removeToken(params.key);
				this._updateTokenizer();
			}, this),
			updateFilterItem: jQuery.proxy(function(oEvent) {
				// sap.m.MessageToast.show("UpdateFilterItem");
	
				var params = oEvent.mParameters;
				var oRange = this._oSelectedRanges[params.key];
				oRange.exclude = params.filterItemData.exclude;
				oRange.keyField = params.filterItemData.columnKey;
				oRange.operation = params.filterItemData.operation;
				oRange.value1 = params.filterItemData.value1;
				oRange.value2 = params.filterItemData.value2;
				
				var sTokenText = this._getFormatedRangeTokenText(oRange.operation, oRange.value1, oRange.value2, oRange.exclude, oRange.keyField);
				this._addToken2Tokenizer(params.key, sTokenText, oRange.exclude ? this._oExcludedTokens : this._oSelectedTokens);
				this._updateTokenizer();
			}, this)
		});
	
		this._oFilterPanel.setIncludeOperations(this._aIncludeRangeOperations);
		this._oFilterPanel.setExcludeOperations(this._aExcludeRangeOperations);
	
		// this._oFilterPanel.setKeyFields([{key: "KeyField1", text: "Field1"}, {key: "KeyField2", text: "Field2", type : "date", isDefault: true}]);
		if (this._aRangeKeyFields) {
			this._aRangeKeyFields.forEach(function(item) {
				item["text"] = item.label;
			});
			this._oFilterPanel.setKeyFields(this._aRangeKeyFields);
		}
		
	// var oCondition1= { "key": "i1", "text": "CompanyCode: a..z" , "exclude": false, "operation": sap.m.P13nConditionOperation.BT, "keyField":
	// "CompanyCode", "value1": "a", "value2": "z"};
	// var oCondition2= { "key": "i2", "text": "CompanyCode: =foo" , "exclude": false, "operation": sap.m.P13nConditionOperation.EQ, "keyField":
	// "CompanyCode", "value1": "foo", "value2": ""};
	// var oCondition3= { "key": "e1", "text": "CompanyCode: !(=foo)", "exclude": true , "operation": sap.m.P13nConditionOperation.EQ, "keyField":
	// "CompanyCode", "value1": "foo", "value2": ""};
	// var aConditions= [oCondition1, oCondition2, oCondition3];
	
		var aConditions = [];
		if (this._oSelectedRanges) {
			for ( var rangeId in this._oSelectedRanges) {
				var rangeData = this._oSelectedRanges[rangeId];
				aConditions.push({
					key: rangeId,
					exclude: rangeData.exclude,
					keyField: rangeData.keyField,
					operation: rangeData.operation,
					value1: rangeData.value1,
					value2: rangeData.value2
				});
			}
		}
	
		this._oFilterPanel.setConditions(aConditions);
	
		this._oRangeScrollContainer = new sap.m.ScrollContainer({
			vertical: true,
			horizontal: false,
			width: "100%",
			height: "300px",
			content: [
				this._oFilterPanel
			]
		});
	
		var oRangeFieldsGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			vSpacing: 0,
			hSpacing: 0,
			content: [
				this._oRangeScrollContainer
			]
		});
	
		this._sValidationDialogTitle = this._oRb.getText("VALUEHELPVALDLG_TITLE");
		this._sValidationDialogMessage = this._oRb.getText("VALUEHELPVALDLG_MESSAGE");
		this._sValidationDialogFieldMessage = this._oRb.getText("VALUEHELPVALDLG_FIELDMESSAGE");
	
		return oRangeFieldsGrid;
	};
	
	/**
	 * check if the entered/modified ranges are correct, marks invalid fields yellow (Warning state) and opens a popup message dialog to give the user the
	 * feedback that some values are wrong or missing.
	 * 
	 * @private
	 * @params {function} fnCallback which we call when all ranges are valid or the user ignores the wrong/missing fields by pressing Yes on a message
	 *         dialog.
	 */
	ValueHelpDialog.prototype._validateRanges = function(fnCallback) {
		if (this._oRanges && this.getContent()[0] === this._getRanges()) { // we only check the ranges when the range part is visible
	
			// show warnings on invalid fields.
			var bIsIncludeRangesValid = this._oFilterPanel.validateConditions();
	
			if (!bIsIncludeRangesValid) {
				// open a simple confirm box
				MessageBox.show(this._sValidationDialogMessage, {
					icon: MessageBox.Icon.WARNING,
					title: this._sValidationDialogTitle,
					actions: [
						MessageBox.Action.OK, MessageBox.Action.CANCEL
					],
					styleClass: !!this.$().closest(".sapUiSizeCompact").length ? "sapUiSizeCompact" : "",
					onClose: function(sResult) {
						if (sResult === MessageBox.Action.OK && fnCallback) {
							fnCallback();
						}
					}
				});
				return;
			}
	
		}
	
		fnCallback();
	};
	
	// ################################################################################
	// Start Selected Items handling
	// ################################################################################
	
	/**
	 * makes the Selected Items table visible in the dialog.
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._showSelectedItems = function() {
		this.removeAllContent();
		this.setVerticalScrolling(true);
		this.setContentHeight("");
		this.setContentWidth(this._getDefaultContentWidth());
	
		this.addContent(this._getSelectedItemsTable());
	
		var table = this._oSelectedItemsTable;
	
		var oModel = table.getModel();
		var aModelData = this._oSelectedItems.getModelData();
		this._updateMissingRows(aModelData);
		oModel.setData(aModelData);
	
		this.ignoreSelectionChange = true;
		table.clearSelection();
		table.addSelectionInterval(0, this._oSelectedItems.getItems().length - 1);
		this.ignoreSelectionChange = false;
	
		var n = table.getSelectedIndices() ? table.getSelectedIndices().length : 0;
		table.setTitle(this._oRb.getText("VALUEHELPDLG_SELECTEDITEMS", n.toString()));
	};
	
	/**
	 * callback handling to fetch missing rows for the selectedItems Table
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._updateMissingRows = function(aModelData) {
		if (this.fSingleRowCallback && this.getContent()[0] === this._getSelectedItemsTable()) {
			var i = this._getMissingRowIndex(aModelData);
			if (i >= 0) {
				var that = this;
	
				this.fSingleRowCallback(aModelData[i].missing, function(oData) {
					delete aModelData[i].missing;
					aModelData[i] = oData;
					that._oSelectedItems.add(oData[that.getKey()], oData);
	
					that._updateMissingRows(aModelData);
					that.invalidate();
				});
			}
		}
	};
	
	/**
	 * setter for the singleRowCallback function
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype.setUpdateSingleRowCallback = function(fSingleRowCallback) {
		this.fSingleRowCallback = fSingleRowCallback;
	
		if (this._oShowAllLink) {
			// hide the ShowAll link when there is not Callback set
			this._oShowAllLink.setVisible(this.fSingleRowCallback !== undefined);
		}
	};
	
	/**
	 * search the next missing row index in the givven array of model data
	 * 
	 * @private
	 * @returns {int} row index of missing data else -1
	 */
	ValueHelpDialog.prototype._getMissingRowIndex = function(aModelData) {
		for (var i = 0; i < aModelData.length; i++) {
			if (aModelData[i].missing) {
				return i;
			}
		}
		return -1;
	};
	
	/**
	 * create and return the SelectedItems table
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._getSelectedItemsTable = function() {
		if (!this._oSelectedItemsTable) {
			this._oSelectedItemsTable = this._createSelectedItemsTable();
		}
		return this._oSelectedItemsTable;
	};
	
	/**
	 * create the SelectedItems table
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._createSelectedItemsTable = function() {
		var that = this;
	
		var oTable = new Table({
			title: this._oRb.getText("VALUEHELPDLG_SELECTEDITEMS"),
			selectionBehavior: sap.ui.table.SelectionBehavior.Row,
			selectionMode: sap.ui.table.SelectionMode.MultiToggle,
			noDataText: this._oRb.getText("VALUEHELPDLG_SELECTEDITEMSTABLE_NODATA"),
			rowHeight: 32,
	
			rowSelectionChange: function(oControlEvent) {
				if (that.ignoreSelectionChange) {
					return;
				}
	
				// collect all the new selected or removed items
				var table = oControlEvent.getSource();
	
				var aIndices = oControlEvent.getParameter("rowIndices");
				var i, n = aIndices.length;
				for (i = 0; i < n; i++) {
					var index = aIndices[i];
					var oContext = table.getContextByIndex(index);
					var oRow = oContext ? oContext.getObject() : null;
	
					if (oRow) {
						var sKey = oRow[that.getKey()];
	
						that.ignoreSelectionChange = true;
						if (table.isIndexSelected(index)) {
							that._oSelectedItems.add(sKey, oRow);
							that._addToken2Tokenizer(sKey, that._getFormatedTokenText(sKey), that._oSelectedTokens);
							that._changeTableRowSelectionForKey(sKey, true);
						} else {
							that._oSelectedItems.remove(sKey);
							that._removeTokenFromTokenizer(sKey, that._oSelectedTokens);
							that._changeTableRowSelectionForKey(sKey, false);
						}
						that.ignoreSelectionChange = false;
					}
				}
	
				n = table.getSelectedIndices() ? table.getSelectedIndices().length : 0;
				table.setTitle(that._oRb.getText("VALUEHELPDLG_SELECTEDITEMS", n.toString()));
			}
		}).addStyleClass("compVHSelectedItemsTable");
	
		oTable.bindAggregation("columns", "columns>/cols", function(sId, oContext) {
			return new sap.ui.table.Column(sId, {
				label: "{columns>label}",
				template: new sap.m.Text({
					wrapping: false
				}).bindText(oContext.getProperty("template")),
				width: "{columns>width}"
			});
		});
	
		oTable.bindRows("/");
	
		var oModel = new sap.ui.model.json.JSONModel();
		oTable.setModel(oModel);
	
		return oTable;
	};
	
	// ################################################################################
	// Start main Table handling
	// ################################################################################
	
	/**
	 * create the main table
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._createTable = function() {
		var that = this;
	
		var oTable = new Table({
			title: "Items",
			selectionBehavior: sap.ui.table.SelectionBehavior.Row,
			selectionMode: this.getSupportMultiselect() ? sap.ui.table.SelectionMode.MultiToggle : sap.ui.table.SelectionMode.Single,
			noDataText: this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"),
			rowHeight: 32,
			// visibleRowCountMode: sap.ui.table.VisibleRowCountMode.Auto,
	
			rowSelectionChange: function(oControlEvent) {
				if (that.ignoreSelectionChange) {
					return;
				}
	
				// collect all the new selected or removed items
				var table = oControlEvent.getSource();
				var aIndices = oControlEvent.getParameter("rowIndices");
				var i, n = aIndices.length;
				var index;
				var oContext;
				var oRow;
	
				for (i = 0; i < n; i++) {
					index = aIndices[i];
					oContext = table.getContextByIndex(index);
					oRow = oContext ? oContext.getObject() : null;
	
					if (!oRow) {
						MessageBox.show(that._oRb.getText("VALUEHELPDLG_SELECTIONFAILED"), {
							icon: MessageBox.Icon.ERROR,
							title: that._oRb.getText("VALUEHELPDLG_SELECTIONFAILEDTITLE"),
							actions: [
								MessageBox.Action.OK
							],
							styleClass: !!this.$().closest(".sapUiSizeCompact").length ? "sapUiSizeCompact" : ""
						});
						return;
					}
				}
	
				var bUsePath = false;
				if (that.theTable.getBinding("rows").aKeys) {
					bUsePath = true;
				}
	
				for (i = 0; i < n; i++) {
					index = aIndices[i];
					oContext = table.getContextByIndex(index);
					oRow = oContext ? oContext.getObject() : null;
	
					if (oRow) {
						var sKey;
						if (bUsePath) {
							sKey = oContext.sPath.substring(1);
						} else {
							sKey = oRow[that.getKey()];
						}
	
						if (table.isIndexSelected(index)) {
							that._oSelectedItems.add(sKey, oRow);
							that._addToken2Tokenizer(sKey, that._getFormatedTokenText(sKey), that._oSelectedTokens);
						} else {
							that._oSelectedItems.remove(sKey);
							that._removeTokenFromTokenizer(sKey, that._oSelectedTokens);
						}
					}
				}
	
				that._updateTitles();
	
				if (!that.getSupportMultiselect()) {
					// in case of single select we fireOk
					that._onCloseAndTakeOverValues()();
				}
			}
		}).addStyleClass("compVHMainTable");
	
		oTable.bindAggregation("columns", "columns>/cols", function(sId, oContext) {
			var ctrl, oTooltip;
	
			// Tooltip is only possible for certain (string) fields
			// ignore it for all types other than string!
			if (oContext.getProperty("type") === "string") {
				oTooltip = {
					path: oContext.getProperty("template")
				};
			}
	
			if (oContext.getProperty("type") === "boolean") {
				ctrl = new sap.m.CheckBox({
					enabled: false,
					selected: {
						path: oContext.getProperty("template")
					}
				});
			} else {
				ctrl = new sap.m.Text({
					wrapping: false,
					text: {
						path: oContext.getProperty("template"),
						type: oContext.getProperty("oType")
					},
					tooltip: oTooltip
				});
			}
	
			return new sap.ui.table.Column(sId, {
				label: "{columns>label}",
				tooltip: "{columns>label}",
				template: ctrl,
				width: "{columns>width}",
				hAlign: ctrl instanceof sap.m.CheckBox ? sap.ui.core.HorizontalAlign.Center : sap.ui.core.HorizontalAlign.Begin,
				// sorting is remove at the moment
				// sortProperty: oContext.getProperty("sort"),
				// sorted: oContext.getProperty("sorted"),
				filterProperty: oContext.getProperty("filter")
			});
		});
	
		this.theTable = oTable;
	};
	
	/**
	 * handler for the Ok close handling. The function prepares the list of all selected items and token and fire the Ok event.
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._onCloseAndTakeOverValues = function() {
		var that = this;
	
		return function(oEvent) {
	
			var fnCallback = function() {
				var range;
				var aTokens = that._oSelectedItems.getSelectedItemsTokenArray(that.getKey(), that.getDescriptionKey(), that.getTokenDisplayBehaviour());
	
				if (that._oSelectedRanges) {
					var i = 0;
					// if the user has changed the ranges we return the new ranges from the selectedRanges
					for ( var rangeId in that._oSelectedRanges) {
						range = that._oSelectedRanges[rangeId];
						var sTokenValue = range.tokenValue;
						if (!sTokenValue) {
							sTokenValue = that._getFormatedRangeTokenText(range.operation, range.value1, range.value2, range.exclude, range.keyField);
						}
	
						if (!range._oGrid || range._oGrid.select.getSelected()) {
							aTokens.push(new Token({
								key: "range_" + i,
								text: sTokenValue,
								tooltip: sTokenValue
							}).data("range", {
								"exclude": range.exclude,
								"operation": range.operation,
								"keyField": range.keyField,
								"value1": range.value1,
								"value2": range.value2
							}));
	
							i++;
						}
					}
				}
	
				that.fireOk({
					"tokens": aTokens
				});
			};
	
			that._validateRanges(fnCallback);
		};
	};
	
	/**
	 * handler for the cancel button. the function fire the Cancel event
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._onCancel = function() {
		var that = this;
	
		return function(oEvent) {
			that.fireCancel();
		};
	};
	
	/**
	 * update all titles (table and tokenizer) of the main view
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._updateTitles = function() {
		this._updateTableTitle();
		this._updateTokenizer();
	};
	
	/**
	 * update title of the main table
	 * 
	 * @private
	 */
	ValueHelpDialog.prototype._updateTableTitle = function() {
		var length = 0;
		this.oRows = this.theTable.getBinding("rows");
		var bSupportCount = false; // at the moment we do not support the Items Count in the table header
		if (bSupportCount && this.getModel() && this.getModel().isCountSupported) {
			bSupportCount = this.getModel().isCountSupported();
		}
	
		if (bSupportCount) {
			if (this.oRows) {
				length = this.oRows.getLength();
			}
			this.theTable.setTitle(this._sTableTitle1.replace("{0}", length));
		} else {
			this.theTable.setTitle(this._sTableTitleNoCount);
		}
	};
	
	ValueHelpDialog.prototype.onBeforeRendering = function() {
		Dialog.prototype.onBeforeRendering.apply(this);
	
		this._deregisterMyResizeHandler();
	};
	
	ValueHelpDialog.prototype.onAfterRendering = function() {
		Dialog.prototype.onAfterRendering.apply(this);
	
		if (this.theTable) {
			this._registerMyResizeHandler();
			this._updateTitles();
		}
	};
	
	ValueHelpDialog.prototype.fireAfterOpen = function(p) {
		Dialog.prototype.fireAfterOpen.apply(this);
	
		if (this.theTable) {
			// we have to rerender the table on the value help dialog when we open the dialog to avoid some table render layout problems.
			this.theTable.invalidate();
		}
	
		if (this.getSupportRangesOnly() || this.getFilterMode()) {
			this.setContentHeight(this._iResizeDomHeight + "px");
			this.setContentWidth(this._iResizeDomWidth + "px");
			this._onMyResize();
		}
	};
	
	ValueHelpDialog.prototype.exit = function() {
		this._deregisterMyResizeHandler();
	
		var destroyHelper = function(o) {
			if (o && o.destroy) {
				o.destroy();
			}
			return null;
		};
	
		this._oTokenizerGrid = destroyHelper(this._oTokenizerGrid);
		this._oRanges = destroyHelper(this._oRanges);
		this._oFilterPanel = destroyHelper(this._oFilterPanel);
		this._oSelectedItemsTable = destroyHelper(this._oSelectedItemsTable);
		this.theTable = destroyHelper(this.theTable);
	
		this._aKeys = destroyHelper(this._aKeys);
		this._aRangeKeyFields = destroyHelper(this._aRangeKeyFields);
		this._aIncludeRangeOperations = destroyHelper(this._aIncludeRangeOperations);
		this._aExcludeRangeOperations = destroyHelper(this._aExcludeRangeOperations);
	
		this._oFilterBar = destroyHelper(this._oFilterBar);
	
		this._oRb = destroyHelper(this._oRb);
		this._sTableTitle1 = destroyHelper(this._sTableTitle1);
		this._sTableTitle2 = destroyHelper(this._sTableTitle2);
		this._sTableTitleNoCount = destroyHelper(this._sTableTitleNoCount);
		this._sSelectedItemsTitle = destroyHelper(this._sSelectedItemsTitle);
		this._sNoneSelectedItemsTitle = destroyHelper(this._sNoneSelectedItemsTitle);
	
		this._sValidationDialogTitle = destroyHelper(this._sValidationDialogTitle);
		this._sValidationDialogMessage = destroyHelper(this._sValidationDialogMessage);
		this._sValidationDialogFieldMessage = destroyHelper(this._sValidationDialogFieldMessage);
	
		this._oSelectedItems = destroyHelper(this._oSelectedItems);
		this._oSelectedRanges = destroyHelper(this._oSelectedRanges);
	};
	
	/**
	 * setter for a keys array
	 * 
	 * @public
	 * @since 1.24
	 * @param {array} array of strings with the keys
	 */
	ValueHelpDialog.prototype.setKeys = function(aKeys) {
		this._aKeys = aKeys;
	};
	
	ValueHelpDialog.prototype.getKeys = function() {
		return this._aKeys;
	};
	
	/**
	 * setter for a RangeKeyFields array
	 * 
	 * @public
	 * @since 1.24
	 * @param {array} array of Range KeyFields [{key: "CompanyCode", label: "ID"}, {key:"CompanyName", label : "Name"}]
	 */
	ValueHelpDialog.prototype.setRangeKeyFields = function(aRangeKeyFields) {
		this._aRangeKeyFields = aRangeKeyFields;
	};
	
	ValueHelpDialog.prototype.getRangeKeyFields = function() {
		return this._aRangeKeyFields;
	};
	
	/**
	 * setter for the supported Include range operations array
	 * 
	 * @public
	 * @since 1.24
	 * @param {array} array of Range operations [sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT,
	 *        sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ]
	 */
	ValueHelpDialog.prototype.setIncludeRangeOperations = function(aOperation) {
		this._aIncludeRangeOperations = aOperation;
	
		if (this._oFilterPanel) {
			this._oFilterPanel.setIncludeOperations(this._aIncludeRangeOperations);
		}
	};
	
	/**
	 * setter for the supported Exclude range operations array
	 * 
	 * @public
	 * @since 1.24
	 * @param {array} array of Range operations [sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT,
	 *        sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ]
	 */
	ValueHelpDialog.prototype.setExcludeRangeOperations = function(aOperation) {
		this._aExcludeRangeOperations = aOperation;
	
		if (this._oFilterPanel) {
			this._oFilterPanel.setExcludeOperations(this._aExcludeRangeOperations);
		}
	};
	
	/**
	 * creating a key for the table row
	 * 
	 * @internal
	 * @param {string} sKey is the key of the row in the table
	 * @returns {string} with the row key of the element in the table
	 */
	ValueHelpDialog.prototype._createRowKey = function(sKey) {
		var path = this.oRows.sPath;
		var sParams = "";
		var aKeys = this.getKeys();
		var i, n = aKeys.length;
	
		if (path[0] === "/") {
			path = path.substr(1);
		}
		for (i = 0; i < n; i++) {
			if (i > 0) {
				sParams += ",";
			}
			if (n > 1) {
				sParams += aKeys[i] + "=";
			}
			sParams += "'" + ((aKeys[i] === this.getKey()) ? sKey : ".*") + "'";
		}
	
		return path + "\\(" + sParams + "\\)";
	};
	
	/**
	 * creates and returns the Token text for the selected item
	 * 
	 * @private
	 * @param {string} sKey the key of the selectedItems item
	 * @returns {string} the token text for the selected items with the sKey
	 */
	ValueHelpDialog.prototype._getFormatedTokenText = function(sKey) {
		var oItem = this._oSelectedItems.getItem(sKey);
		var sTokenText = oItem[this.getDescriptionKey()];
		var sDisplayKey = oItem[this.getKey()];
		if (sTokenText === undefined) {
			if (typeof oItem === "string") {
				sTokenText = oItem;
			} else {
				sTokenText = sKey;
			}
		} else {
			if (sTokenText === "") {
				sTokenText = sKey;
			} else {
				// We call the require here since external applications using the ValueHelpDialog shouldn't need to require anything else.
				// TODO: Remove this once we move this logic to an Util
				jQuery.sap.require("sap.ui.comp.smartfilterbar.FilterProvider");
				sTokenText = sap.ui.comp.smartfilterbar.FilterProvider.getFormattedExpressionFromDisplayBehaviour(this.getTokenDisplayBehaviour() ? this.getTokenDisplayBehaviour() : sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.descriptionAndId, sDisplayKey, sTokenText);
			}
		}
	
		return sTokenText;
	};
	
	/**
	 * creates and returns the Token text for a range
	 * 
	 * @private
	 * @param {string} sOperation the operation type sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation
	 * @param {string} sValue1 text of the first range field
	 * @param {string} sValue2 text of the seoncd range field
	 * @param {boolean} bExclude indicates if the range is a Exclude range
	 * @param {string} sKeyField id
	 * @returns {string} the range token text
	 */
	ValueHelpDialog.prototype._getFormatedRangeTokenText = function(sOperation, sValue1, sValue2, bExclude, sKeyField) {
		var sTokenText = "";
		var oCurrentKeyField;
		var oFormatter;
		
		if (this._aRangeKeyFields && this._aRangeKeyFields.length > 1) {
			// search the current KeyField 
			for (var i = 0; i < this._aRangeKeyFields.length; i++) {
				oCurrentKeyField = this._aRangeKeyFields[i];
				if (typeof oCurrentKeyField !== "string") {
					if (oCurrentKeyField.key === sKeyField) {
						break;
					}
				}
			}
		}
	
		if (oCurrentKeyField) {
			switch (oCurrentKeyField.type) {
				case "numeric":
					var oFloatFormatOptions;
					if (oCurrentKeyField.precision || oCurrentKeyField.scale) {
						oFloatFormatOptions = {};
						if (oCurrentKeyField.precision) {
							oFloatFormatOptions["maxIntegerDigits"] = parseInt(oCurrentKeyField.precision, 10);
						}
						if (oCurrentKeyField.scale) {
							oFloatFormatOptions["maxFractionDigits"] = parseInt(oCurrentKeyField.scale, 10);
						}
					}
					oFormatter = NumberFormat.getFloatInstance(oFloatFormatOptions);
					break;
				case "date":
					oFormatter = DateFormat.getDateInstance();
					break;
			}
			
			if (oFormatter) {
				if (sValue1) {
					sValue1 = oFormatter.format(sValue1);
				}
				if (sValue2) {
					sValue2 = oFormatter.format(sValue2);
				}
			}
		}
		
		if (sValue1 !== "") {
			switch (sOperation) {
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Initial:
					sTokenText = "=''";
					break;
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ:
					sTokenText = "=" + sValue1;
					break;
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GT:
					sTokenText = ">" + sValue1;
					break;
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GE:
					sTokenText = ">=" + sValue1;
					break;
	
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LT:
					sTokenText = "<" + sValue1;
					break;
	
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LE:
					sTokenText = "<=" + sValue1;
					break;
	
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains:
					sTokenText = "*" + sValue1 + "*";
					break;
	
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith:
					sTokenText = sValue1 + "*";
					break;
	
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith:
					sTokenText = "*" + sValue1;
					break;
	
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT:
					if (sValue2 !== "") {
						sTokenText = sValue1 + "..." + sValue2;
						break;
					}
			}
	
		}
	
		if (bExclude && sTokenText !== "") {
			sTokenText = "!(" + sTokenText + ")";
		}
	
		if (oCurrentKeyField && oCurrentKeyField.label && sTokenText !== "") {
			sTokenText = oCurrentKeyField.label + ": " + sTokenText;
		}
	
		return sTokenText;
	};
	
	ValueHelpDialog.prototype._onMyResize = function() {
		if (!this.getDomRef("scroll")) {
			return;
		}
	
		if (this._oRangeScrollContainer) {
			var iTokensHeight = this._oTokenizerGrid.getDomRef() ? this._oTokenizerGrid.getDomRef().offsetHeight : 0;
			var iScrollHeight = this.getDomRef("scroll").offsetHeight;
			this._oRangeScrollContainer.$().css("height", (iScrollHeight - iTokensHeight) + "px");
		}
	
	};
	
	ValueHelpDialog.prototype._reposition = function() {
		Dialog.prototype._reposition.apply(this);
	
		this._onMyResize();
	};
	
	Dialog.prototype._deregisterMyResizeHandler = function() {
		if (this._sResizeListenerId2) {
			sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId2);
			this._sResizeListenerId2 = null;
		}
	};
	
	ValueHelpDialog.prototype._registerMyResizeHandler = function() {
		if (!this._fnMyContentResize) {
			this._fnMyContentResize = jQuery.proxy(this._onMyResize, this);
		}
	
		if (!this._sResizeListenerId2 && this.getDomRef()) {
			var oResizeDomRef = this.getDomRef("scroll");
			this._sResizeListenerId2 = sap.ui.core.ResizeHandler.register(oResizeDomRef, this._fnMyContentResize);
		}
	};
	
	sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation = {
		BT: "BT",
		EQ: "EQ",
		Contains: "Contains",
		StartsWith: "StartsWith",
		EndsWith: "EndsWith",
		LT: "LT",
		LE: "LE",
		GT: "GT",
		GE: "GE",
		Initial: "Initial"
	};
	

	return ValueHelpDialog;

}, /* bExport= */ true);

}; // end of sap/ui/comp/valuehelpdialog/ValueHelpDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.valuehelpdialog.ValueHelpDialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.valuehelpdialog.ValueHelpDialogRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/valuehelpdialog/ValueHelpDialogRenderer",['jquery.sap.global', 'sap/m/DialogRenderer'],
	function(jQuery, DialogRenderer) {
	"use strict";


	/**
	 * @class ValueHelpDialog renderer.
	 * @static
	 */
	var ValueHelpDialogRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ValueHelpDialogRenderer.render = DialogRenderer.render;
	

	return ValueHelpDialogRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/valuehelpdialog/ValueHelpDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.EditableVariantItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.EditableVariantItem.
jQuery.sap.declare('sap.ui.comp.variants.EditableVariantItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItem'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/EditableVariantItem",['jquery.sap.global', 'sap/m/ColumnListItem', 'sap/ui/comp/library'],
	function(jQuery, ColumnListItem, library) {
	"use strict";


	
	/**
	 * Constructor for a new variants/EditableVariantItem.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Editable Variant List item for the Management Popup
	 * @extends sap.m.ColumnListItem
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.EditableVariantItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var EditableVariantItem = ColumnListItem.extend("sap.ui.comp.variants.EditableVariantItem", /** @lends sap.ui.comp.variants.EditableVariantItem.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Key of the List Item
			 * @since 1.22.0
			 */
			key : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Indicator if a variant is visible for all users.
			 * @since 1.26.0
			 */
			global : {type : "boolean", group : "Misc", defaultValue : null},
	
			/**
			 * ABAP Package the variant is assigned. Used for transport functionality
			 * @since 1.26.0
			 */
			lifecyclePackage : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Identifier of the transport object the variant is assigned to.
			 * @since 1.26.0
			 */
			lifecycleTransportId : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Variant namespace
			 * @since 1.26.0
			 */
			namespace : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Indication if variant can be changed
			 * @since 1.26.0
			 */
			readOnly : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Flags for a variant to indicate why it might be read-only
			 * @since 1.26.0
			 * @deprecated Since version 1.28. 
			 * AccessOptions have been replaced by labelReadOnly
			 */
			accessOptions : {type : "string", group : "Misc", defaultValue : null, deprecated: true},
	
			/**
			 * Indicates if the variant label can be changed
			 * @since 1.28.0
			 */
			labelReadOnly : {type : "boolean", group : "Misc", defaultValue : false}
		}
	}});
	

	return EditableVariantItem;

}, /* bExport= */ true);

}; // end of sap/ui/comp/variants/EditableVariantItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.EditableVariantItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.variants.EditableVariantItemRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItemRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/EditableVariantItemRenderer",['jquery.sap.global', 'sap/m/ColumnListItemRenderer'],
	function(jQuery, ColumnListItemRenderer) {
	"use strict";


	/**
	 * @class EditableVariantItem renderer.
	 * @static
	 */
	var EditableVariantItemRenderer = sap.ui.core.Renderer.extend(ColumnListItemRenderer);
	

	return EditableVariantItemRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/variants/EditableVariantItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.VariantItem.
jQuery.sap.declare('sap.ui.comp.variants.VariantItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/VariantItem",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Item'],
	function(jQuery, library, Item) {
	"use strict";


	
	/**
	 * Constructor for a new variants/VariantItem.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * VariantItem for VariantManagement item collection
	 * @extends sap.ui.core.Item
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.VariantItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var VariantItem = Item.extend("sap.ui.comp.variants.VariantItem", /** @lends sap.ui.comp.variants.VariantItem.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Attribute for usage in Smart Filter Bar
			 * @since 1.26.0
			 */
			executeOnSelection : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Is the user allowed to change the item's data
			 * @since 1.26.0
			 */
			readOnly : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Identifier of the transport object the variant is assigned to.
			 * @since 1.26.0
			 */
			lifecycleTransportId : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Indicator if a variant is visible for all users.
			 * @since 1.26.0
			 */
			global : {type : "boolean", group : "Misc", defaultValue : null},
	
			/**
			 * ABAP Package the variant is assigned. Used for transport functionality.
			 * @since 1.26.0
			 */
			lifecyclePackage : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Variant namespace
			 * @since 1.26.0
			 */
			namespace : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Flags for a variant to indicate why it might be read-only
			 * @since 1.26.0
			 * @deprecated Since version 1.28. 
			 * AccessOptions have been replaced by labelReadOnly
			 */
			accessOptions : {type : "string", group : "Misc", defaultValue : null, deprecated: true},
	
			/**
			 * Indicates if the variant label can be changed
			 * @since 1.26.0
			 */
			labelReadOnly : {type : "boolean", group : "Misc", defaultValue : false}
		}
	}});
	

	return VariantItem;

}, /* bExport= */ true);

}; // end of sap/ui/comp/variants/VariantItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.variants.VariantItemRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/VariantItemRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class VariantItem renderer.
	 * @static
	 */
	var VariantItemRenderer = sap.ui.core.Renderer.extend(sap.ui.core.ItemRenderer);
	

	return VariantItemRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/variants/VariantItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantManagement') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.VariantManagement.
jQuery.sap.declare('sap.ui.comp.variants.VariantManagement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectList'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/VariantManagement",['jquery.sap.global', 'sap/m/ActionSheet', 'sap/m/Button', 'sap/m/CheckBox', 'sap/m/Dialog', 'sap/m/Input', 'sap/m/Label', 'sap/m/ResponsivePopover', 'sap/m/SelectList', 'sap/ui/comp/library', 'sap/ui/comp/transport/TransportSelection', './EditableVariantItem', './VariantItem', 'sap/ui/core/Control', 'sap/ui/core/Item', 'sap/ui/core/ValueState', 'sap/ui/layout/HorizontalLayout'],
	function(jQuery, ActionSheet, Button, CheckBox, Dialog, Input, Label, ResponsivePopover, SelectList, library, TransportSelection, EditableVariantItem, VariantItem, Control, Item, ValueState, HorizontalLayout) {
	"use strict";

	/**
	 * Constructor for a new variants/VariantManagement.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The variant management control can be used to manage variants, such as filter bar variants or table variants.
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.VariantManagement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var VariantManagement = Control.extend("sap.ui.comp.variants.VariantManagement", /** @lends sap.ui.comp.variants.VariantManagement.prototype */ { metadata : {
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * Provides a string value to set the initially selected variant.
			 * @since 1.22.0
			 */
			initialSelectionKey : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Enables or disables the control.
			 * @since 1.22.0
			 */
			enabled : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected variant.
			 * @since 1.22.0
			 */
			defaultVariantKey : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The key of the currently selected item. Returns null if the default item ist selected.
			 * @since 1.24.0
			 */
			selectionKey : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Indicates that a Create Tile is visible in the Create dialog.
			 * @since 1.26.0
			 */
			showCreateTile : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Indicates that Execute on Selection is visible in the Create and in the Management Dialog
			 * @since 1.26.0
			 */
			showExecuteOnSelection : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Indicates that a share function is available in Variant Management
			 * @since 1.26.0
			 */
			showShare : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Enables the lifecycle support for VariantItems.
			 * @since 1.26.0
			 */
			lifecycleSupport : {type : "boolean", group : "Misc", defaultValue : false},
			
			/**
			 * Alternative text for the "Standard" item.
			 * @since 1.28.0
			 */
			standardItemText : {type : "string", group : "Misc", defaultValue : null}

		},
		defaultAggregation : "items",
		aggregations : {
	
			/**
			 * Aggregation for items displayed by the variant management control.
			 * @since 1.22.0
			 * @deprecated Since version 1.26.0. 
			 * Additional information needed for each item. New Collection variantItems introduced.
			 */
			items : {type : "sap.ui.core.Item", multiple : true, singularName : "item", deprecated: true}, 
	
			/**
			 * Main aggregation for variant items displayed by the Variant Management control
			 * @since 1.26.0
			 */
			variantItems : {type : "sap.ui.comp.variants.VariantItem", multiple : true, singularName : "variantItem"}
		},
		events : {
	
			/**
			 * Event fired if the save variant dialog is closed with ok for a variant.
			 * @since 1.22.0
			 */
			save : {}, 
	
			/**
			 * Event fired if users apply changes to variants in the manage variants dialog.
			 * @since 1.22.0
			 */
			manage : {}, 
	
			/**
			 * Event fired if a new variant is selected.
			 * @since 1.22.0
			 */
			select : {}
		}
	}});
	
	/**
	 * Constructs and initializes the VariantManagement control
	 */
	VariantManagement.prototype.init = function() {
		var that = this;
		this.STANDARDVARIANTKEY = "*standard*";
		this.aRemovedVariants = [];
		this.aRenamedVariants = [];
		this.aRemovedVariantTransports = [];
		this.aExeVariants = [];
		this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this.lastSelectedVariantKey = this.STANDARDVARIANTKEY;
		this.bVariantItemMode = false;
		this.oSelectedItem = null;
		this.sNewDefaultKey = "";
		this.bDirty = false;
		this.bManagementTableInitialized = false;
		this.sTransport = null;
		this.sPackage = null;
		this.aEvents = [];
		this.bEventRunning = false;
		this.bPopoverOpen = false;
		this.oVariantSelectionPage = null;
		this.oActions = null;
		this.oActionSheet = null;
		this.oActionSheetManage = null;
		this.oActionSheetSave = null;
		this.oActionSheetSaveAs = null;
		this.bManualVariantKey = false;
		this.bFireSelect = false;
		this.bExecuteOnSelectForStandard = false;
	
		jQuery.sap.require("sap.ui.model.json.JSONModel");
		this.oModel = new sap.ui.model.json.JSONModel({
			enabled: false
		});
		this.setModel(this.oModel, "save_enablement");
	
		this.oVariantManage = new Button(this.getId() + "-manage", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGE"),
			enabled: false,
			press: function() {
				that._openVariantManagementDialog();
			}
		});
		this.oVariantManage.addStyleClass("sapUiHideOnPhone");
	
		this.oVariantSave = new Button(this.getId() + "-mainsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE"),
			press: function() {
				var oEvent = that._createEvent("variantSavePressed", that._variantSavePressed);
				that._addEvent(oEvent);
			},
			enabled: false
		});
		this.oVariantSave.setModel(this.oModel);
		this.oVariantSave.addStyleClass("sapUiHideOnPhone");
	
		this.oVariantSaveAs = new Button(this.getId() + "-saveas", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEAS"),
			press: function() {
				that._openSaveAsDialog();
			}
		});
		this.oVariantSaveAs.addStyleClass("sapUiHideOnPhone");
	
		this.oVariantText = new Label(this.getId() + "-text");
		this._setStandardText();
		this.oVariantText.addStyleClass("sapUICompVarMngmtText");
		this.oVariantText.addStyleClass("sapUICompVarMngmtEnabled");
		this.oVariantText.addStyleClass("sapMH4Style");
	
		this.oVariantModifiedText = new Label(this.getId() + "-modified", {
			visible: false
		});
		this.oVariantModifiedText.setText("*");// (" + this.oResourceBundle.getText("VARIANT_MANAGEMENT_MODIFIED") + ")");
		this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtText");
		this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtModified");
		this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtEnabled");
		this.oVariantModifiedText.addStyleClass("sapMH4Style");
	
		this.oVariantPopoverTrigger = new Button(this.getId() + "-trigger", {
			type: sap.m.ButtonType.Transparent,
			icon: "sap-icon://arrow-down",
			press: function() {
				that._openVariantSelection();
			}
		});
		this.oVariantText.setLabelFor(this.oVariantPopoverTrigger);
		this.oVariantLayout = new HorizontalLayout({
			content: [
				this.oVariantText, this.oVariantModifiedText, this.oVariantPopoverTrigger
			]
		});
		this.oVariantLayout.addStyleClass("sapUICompVarMngmtLayout");
		this.addDependent(this.oVariantLayout);
		this.oVariantList = new SelectList(this.getId() + "-list", {
			selectionChange: function(event) {
				that.lastSelectedVariantKey = this.getSelectedItem().getKey();
				that._setSelectionByKey(this.getSelectedItem().getKey());
				that.oVariantPopOver.close();
				that.bDirty = false;
				that.oVariantModifiedText.setVisible(false);
				that.oModel.setProperty("/enabled", false);
				that.bFireSelect = true;
			}
		});
		this.oVariantList.setNoDataText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_NODATA"));
	
		this.oActionSheetManage = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGE"),
			enabled: false,
			press: function(oEvent) {
				that._openVariantManagementDialog();
			}
		});
		this.oActionSheetSave = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE"),
			enabled: false,
			press: function(oEvent) {
				var olEvent = that._createEvent("variantSavePressed", that._variantSavePressed);
				that._addEvent(olEvent);
			}
		});
		this.oActionSheetSaveAs = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEAS"),
			press: function(oEvent) {
				that._openSaveAsDialog();
			}
		});
		this.oActionSheet = new ActionSheet(this.getId() + "-actionsheet", {
			showCancelButton: true,
			buttons: [
				this.oActionSheetManage, this.oActionSheetSave, this.oActionSheetSaveAs
			],
			placement: sap.m.PlacementType.Top
		});
		this.oActions = new Button(this.getId() + "-actions", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_ACTIONS"),
			press: function() {
				that.oActionSheet.openBy(this);
			}
		});
		this.oActions.addStyleClass("sapUiVisibleOnlyOnPhone");
	
		this.oVariantSelectionPage = new sap.m.Page(this.getId() + "selpage", {
			content: [
				this.oVariantList
			],
			footer: new sap.m.Toolbar({
				content: [
					new sap.m.ToolbarSpacer(this.getId() + "-spacer"), this.oVariantManage, this.oVariantSave, this.oVariantSaveAs, this.oActions
				]
			}),
			showNavButton: false,
			showHeader: false
		});
		this.oVariantPopOver = new ResponsivePopover(this.getId() + "-popover", {
			title: this.oResourceBundle.getText("VARIANT_MANAGEMENT_VARIANTS"),
			contentWidth: "400px",
			placement: sap.m.PlacementType.Bottom,
			content: [
				this.oVariantSelectionPage
			],
			afterOpen: function() {
				that.bPopoverOpen = true;
			},
			afterClose: function() {
				that.bPopoverOpen = false;
				if (that.bFireSelect == true) {
					that.bFireSelect = false;
					setTimeout(function() {
						that._fireSelectAsync();
					}, 0);
				}
			},
			contentHeight: "300px"
		});
		this.oVariantPopOver.addStyleClass("sapUICompVarMngmtPopover");
	
		/* save new dialog */
		this.oInputName = new Input(this.getId() + "-name", {
			liveChange: function(oEvent) {
				var sValue = this.getValue();
				sValue = sValue.trim();
				if (sValue === "") {
					this.setValueState(ValueState.Error);
					this.setValueStateText(that.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
				} else {
					this.setValueState(ValueState.None);
					this.setValueStateText(null);
				}
			}
		});
		this.oLabelName = new Label(this.getId() + "-namelabel", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_NAME"),
			required: true
		});
		this.oLabelName.setLabelFor(this.oInputName);
	
		this.oDefault = new CheckBox(this.getId() + "-default", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SETASDEFAULT"),
			enabled: true,
			visible: true,
			width: "100%"
		});
	
		this.oExecuteOnSelect = new CheckBox(this.getId() + "-execute", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_EXECUTEONSELECT"),
			enabled: true,
			visible: false,
			width: "100%"
		});
	
		this.oCreateTile = new CheckBox(this.getId() + "-tile", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CREATETILE"),
			enabled: true,
			visible: false,
			width: "100%"
		});
	
		this.oShare = new CheckBox(this.getId() + "-share", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SHARE"),
			enabled: true,
			visible: false,
			select: function(oControlEvent) {
				var oEvent = that._createEvent("inputfieldChange", that._handleShareSelected);
				oEvent.args.push(oControlEvent);
				that._addEvent(oEvent);
			},
			width: "100%"
		});
	
		this.oInputKey = new Input(this.getId() + "-key", {
			liveChange: function(oEvent) {
				var sValue = this.getValue();
				sValue = sValue.trim();
				if (sValue === "") {
					this.setValueState(ValueState.Error);
					this.setValueStateText(that.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
				} else {
					this.setValueState(ValueState.None);
					this.setValueStateText(null);
				}
			}
		});
	
		this.oLabelKey = new Label(this.getId() + "-keylabel", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_KEY"),
			required: true
		});
		this.oLabelName.setLabelFor(this.oInputKey);
	
		this.oSaveSave = new Button(this.getId() + "-variantsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_OK"),
			press: function() {
				var oEvent = that._createEvent("variantSaveAs", that._handleVariantSaveAs);
				that._addEvent(oEvent);
			},
			enabled: true
		});
		this.oSaveDialogOptionsGrid = new sap.ui.layout.Grid({
			defaultSpan: "L6 M6 S12"
		});
	
		this.oSaveDialog = new Dialog(this.getId() + "-savedialog", {
			title: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEDIALOG"),
			beginButton: this.oSaveSave,
			endButton: new Button(this.getId() + "-variantcancel", {
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CANCEL"),
				press: function() {
					that.oSaveDialog.close();
				}
			}),
			content: [
				this.oLabelName, this.oInputName, this.oLabelKey, this.oInputKey, this.oSaveDialogOptionsGrid
			],
			stretch: sap.ui.Device.system.phone
		});
		this.oSaveDialog.setParent(this);
		this.oSaveDialog.addStyleClass("sapUiPopupWithPadding");
		this.oSaveDialog.setInitialFocus(this.oInputName.getId());
	
		this.oManagementTable = new sap.m.Table(this.getId() + "-managementTable");
	
		this.oManagementSave = new Button(this.getId() + "-managementsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_OK"),
			enabled: true,
			press: function() {
				var oEvent = that._createEvent("managementSave", that._handleManageSavePressed);
				that._addEvent(oEvent);
			}
		});
	
		this.oManagementDialog = new Dialog(this.getId() + "-managementdialog", {
			contentWidth: "600px",
			customHeader: new sap.m.Bar(this.getId() + "-managementHeader", {
				contentMiddle: [
					new sap.m.Text(this.getId() + "-managementHeaderText", {
						text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGEDIALOG")
					})
				]
			}),
			beginButton: this.oManagementSave,
			endButton: new Button(this.getId() + "-managementcancel", {
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CANCEL"),
				press: function() {
					that.aRemovedVariants = [];
					that.oManagementDialog.close();
				}
			}),
			content: [
				this.oManagementTable
			],
			stretch: sap.ui.Device.system.phone,
			afterClose: function() {
				if (that.bFireSelect == true) {
					that.bFireSelect = false;
					setTimeout(function() {
						that._fireSelectAsync();
					}, 0);
				}
			}
		});
		this.oManagementDialog.setParent(this);
		this.oManagementDialog.addStyleClass("sapUiPopupWithPadding");
	};
	
	// exit destroy all controls created in init
	VariantManagement.prototype.exit = function() {
		if (this.oVariantManage) {
			this.oVariantManage.destroy();
			this.oVariantManage = undefined;
		}
		if (this.oVariantSave) {
			this.oVariantSave.destroy();
			this.oVariantSave = undefined;
		}
		if (this.oVariantList) {
			this.oVariantList.destroy();
			this.oVariantList = undefined;
		}
		if (this.oInputName) {
			this.oInputName.destroy();
			this.oInputName = undefined;
		}
		if (this.oLabelName) {
			this.oLabelName.destroy();
			this.oLabelName = undefined;
		}
		if (this.oDefault) {
			this.oDefault.destroy();
			this.oDefault = undefined;
		}
		if (this.oSaveSave) {
			this.oSaveSave.destroy();
			this.oSaveSave = undefined;
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.destroy();
			this.oSaveDialog = undefined;
		}
		if (this.oManagementTable) {
			this.oManagementTable.destroy();
			this.oManagementTable = undefined;
		}
		if (this.oManagementSave) {
			this.oManagementSave.destroy();
			this.oManagementSave = undefined;
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.destroy();
			this.oManagementDialog = undefined;
		}
		if (this.oVariantText) {
			this.oVariantText.destroy();
			this.oVariantText = undefined;
		}
		if (this.oVariantPopoverTrigger) {
			this.oVariantPopoverTrigger.destroy();
			this.oVariantPopoverTrigger = undefined;
		}
		if (this.oVariantLayout) {
			this.oVariantLayout.destroy();
			this.oVariantLayout = undefined;
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.destroy();
			this.oVariantPopOver = undefined;
		}
		if (this.oVariantSaveAs) {
			this.oVariantSaveAs.destroy();
			this.oVariantSaveAs = undefined;
		}
		if (this.oShare) {
			this.oShare.destroy();
			this.oShare = undefined;
		}
		if (this.oCreateTile) {
			this.oCreateTile.destroy();
			this.oCreateTile = undefined;
		}
		if (this.oSaveDialogOptionsGrid) {
			this.oSaveDialogOptionsGrid.destroy();
			this.oSaveDialogOptionsGrid = undefined;
		}
		if (this.oVariantSelectionPage) {
			this.oVariantSelectionPage.destroy();
			this.oVariantSelectionPage = undefined;
		}
		if (this.oActions) {
			this.oActions.destroy();
			this.oActions = undefined;
		}
		if (this.oActionSheetManage) {
			this.oActionSheetManage.destroy();
			this.oActionSheetManage = undefined;
		}
		if (this.oActionSheetSave) {
			this.oActionSheetSave.destroy();
			this.oActionSheetSave = undefined;
		}
		if (this.oActionSheetSaveAs) {
			this.oActionSheetSaveAs.destroy();
			this.oActionSheetSaveAs = undefined;
		}
		if (this.oInputKey) {
			this.oInputKey.destroy();
			this.oInputKey = undefined;
		}
		if (this.oLabelKey) {
			this.oLabelKey.destroy();
			this.oLabelKey = undefined;
		}
	};
	
	VariantManagement.prototype.addItem = function(oItem) {
		oItem = this.validateAggregation("items", oItem, true);
		this.bVariantItemMode = false;
		this.addAggregation("items", oItem, false);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};
	
	VariantManagement.prototype.insertItem = function(oItem, iIndex) {
		var _iIndex = iIndex;
		oItem = this.validateAggregation("items", oItem, true);
		this.bVariantItemMode = false;
		this.insertAggregation("items", oItem, _iIndex);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};
	
	VariantManagement.prototype.removeItem = function(oItem) {
		this.removeAggregation("items", oItem);
		this._manageButtonState();
		return oItem;
	};
	
	VariantManagement.prototype.removeAllItems = function() {
		var ret = this.removeAllAggregation("items");
		this._manageButtonState();
		this._setSelectedItem(null);
		return ret;
	};
	
	VariantManagement.prototype.destroyItems = function() {
		this.destroyAggregation("items");
		this._manageButtonState();
		this._setSelectedItem(null);
		return this;
	};
	
	VariantManagement.prototype._getItems = function() {
		if (this.bVariantItemMode) {
			return this.getVariantItems();
		} else {
			return this.getItems();
		}
	};
	
	VariantManagement.prototype._removeItem = function(oItem) {
		if (this.bVariantItemMode) {
			return this.removeVariantItem(oItem);
		} else {
			return this.removeItem(oItem);
		}
	};
	
	VariantManagement.prototype.getItemByKey = function(sKey) {
		var oItems = this._getItems();
		for (var iCount = 0; iCount < oItems.length; iCount++) {
			if (sKey == oItems[iCount].getKey()) {
				return oItems[iCount];
			}
		}
		return null;
	};
	
	VariantManagement.prototype.addVariantItem = function(oVariantItem) {
		oVariantItem = this.validateAggregation("variantItems", oVariantItem, true);
		this.bVariantItemMode = true;
		this.addAggregation("variantItems", oVariantItem, false);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oVariantItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};
	
	VariantManagement.prototype.insertVariantItem = function(oVariantItem, iIndex) {
		var _iIndex = iIndex;
		oVariantItem = this.validateAggregation("variantItems", oVariantItem, true);
		this.bVariantItemMode = true;
		this.insertAggregation("variantItems", oVariantItem, _iIndex);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oVariantItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};
	
	VariantManagement.prototype._setSelectedItem = function(oItem) {
		this.oSelectedItem = oItem;
		if (oItem != null) {
			this.oVariantText.setText(oItem.getText());
		} else {
			this._setStandardText();
		}
	};
	
	VariantManagement.prototype._getSelectedItem = function() {
		return this.oSelectedItem;
	};

	VariantManagement.prototype.setInitialSelectionKey = function(sKey) {
		this.setProperty("initialSelectionKey", sKey, true); // do not re-render !
		this._setSelectionByKey(sKey);
	};
	
	VariantManagement.prototype.setEnabled = function(bEnabled) {
		this.setProperty("enabled", bEnabled, false);
		if (this.oVariantPopoverTrigger) {
			this.oVariantPopoverTrigger.setEnabled(bEnabled);
		}
		if (!bEnabled) {
			this.oVariantText.removeStyleClass("sapUICompVarMngmtEnabled");
			this.oVariantModifiedText.removeStyleClass("sapUICompVarMngmtEnabled");
			this.oVariantText.addStyleClass("sapUICompVarMngmtDisabled");
			this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtDisabled");
		} else {
			this.oVariantText.removeStyleClass("sapUICompVarMngmtDisabled");
			this.oVariantModifiedText.removeStyleClass("sapUICompVarMngmtDisabled");
			this.oVariantText.addStyleClass("sapUICompVarMngmtEnabled");
			this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtEnabled");
		}
	};
	
	/**
	 * The string given as "sKey" will be used to set the initial selected item of the Variant Management. If an item exists with the matching key the
	 * item will be marked as selected If the key is set before any items are added the Variant Management will try to set the selection when the items
	 * are added in "addItem" or "insterItem".
	 * 
	 * @param {sap.ui.core.Item} oItem the Item to be compared
	 * @param {string} sKey the string used to be compared with the item's key attribute
	 */
	VariantManagement.prototype._setSelection = function(oItem, sKey) {
		if (oItem.getKey() === sKey) {
			this._setSelectedItem(oItem);
			this.fireSelect({
				key: sKey
			});
		}
	};
	
	VariantManagement.prototype.addStyleClass = function(sStyleClass) {
		if (Control.prototype.addStyleClass) {
			Control.prototype.addStyleClass.apply(this, arguments);
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.addStyleClass(sStyleClass);
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.addStyleClass(sStyleClass);
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.addStyleClass(sStyleClass);
		}
	};
	
	VariantManagement.prototype.removeStyleClass = function(sStyleClass) {
		if (Control.prototype.addStyleClass) {
			Control.prototype.removeStyleClass.apply(this, arguments);
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.removeStyleClass(sStyleClass);
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.removeStyleClass(sStyleClass);
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.removeStyleClass(sStyleClass);
		}
	};
	
	/**
	 * Removes the current variant selection and resets to default value.
	 *
	 * @public
	 * @since 1.22.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	VariantManagement.prototype.clearVariantSelection = function() {
		this.setInitialSelectionKey(this.STANDARDVARIANTKEY);
		this._setSelectedItem(null);
	};
	
	/**
	 * If the oControl has the ".sapUiSizeCompact" class it will be also set on the oDialog
	 * 
	 * @param {sap.ui.core.Control} oControl the control to be checked for compact
	 * @param {sap.ui.core.Control} oDialog the dialog/popover to receive the compact style class
	 */
	VariantManagement.prototype._setDialogCompactStyle = function(oControl, oDialog) {
		if (this._checkDialogCompactStyle(oControl)) {
			oDialog.addStyleClass("sapUiSizeCompact");
		} else {
			oDialog.removeStyleClass("sapUiSizeCompact");
		}
	};
	
	/**
	 * If the oControl has the ".sapUiSizeCompact" the function will return true
	 * 
	 * @param {sap.ui.core.Control} oControl the control to be checked for compact
	 * @returns {boolean} result
	 */
	VariantManagement.prototype._checkDialogCompactStyle = function(oControl) {
		if (oControl.$().closest(".sapUiSizeCompact").length > 0) {
			return true;
		} else {
			return false;
		}
	};
	
	/**
	 * Check and set Manage Button State
	 */
	VariantManagement.prototype._manageButtonState = function() {
		if (this._getItems() && this._getItems().length > 0) {
			this.oVariantManage.setEnabled(true);
			this.oActionSheetManage.setEnabled(true);
		} else {
			this.oVariantManage.setEnabled(false);
			this.oActionSheetManage.setEnabled(false);
		}
	};
	
	VariantManagement.prototype.getSelectionKey = function() {
		var sKey = null;
		var oItem = this._getSelectedItem();
		if (oItem !== null) {
			sKey = oItem.getKey();
		} else if (this.bVariantItemMode) {
			sKey = this.STANDARDVARIANTKEY;
		} else {
			sKey = null;
		}
		return sKey;
	};
	
	VariantManagement.prototype._setSelectionByKey = function(sKey) {
		var oItems = this._getItems();
		var bFound = false;
		if (oItems.length > 0) {
			for (var iI = 0; iI < oItems.length; iI++) {
				if (oItems[iI].getKey() === sKey) {
					this._setSelectedItem(oItems[iI]);
					bFound = true;
					break;
				}
			}
		}
		if (!bFound) {
			this._setSelectedItem(null);
		}
	};
	
	VariantManagement.prototype.replaceKey = function(sOldKey, sNewKey) {
		var oItems = this._getItems();
		if (oItems.length > 0) {
			for (var iI = 0; iI < oItems.length; iI++) {
				if (oItems[iI].getKey() === sOldKey) {
					oItems[iI].setKey(sNewKey);
					if (this.getDefaultVariantKey() == sOldKey) {
						this.setDefaultVariantKey(sNewKey);
					}
					if (this._getSelectedItem() === oItems[iI]) { // ask Franz?
						this._setSelectedItem(null);
					}
					break;
				}
			}
		}
	};
	
	VariantManagement.prototype.currentVariantSetModified = function(bFlag) {
		if (bFlag) {
			if (!this.bDirty) {
				this.oVariantModifiedText.setVisible(true);
				this.bDirty = true;
				this.oModel.setProperty("/enabled", true);
			}
		} else if (this.bDirty) {
			this.oVariantModifiedText.setVisible(false);
			this.bDirty = false;
			this.oModel.setProperty("/enabled", false);
		}
	};
	
	VariantManagement.prototype.currentVariantGetModified = function() {
		return this.bDirty;
	};
	
	VariantManagement.prototype._openVariantSelection = function() {
		var oItems = null;
		var iCount = 0;
		var oItem = null;
		var oVariantListItem;
		if (this.bPopoverOpen == true) {
			return;
		}
		this.bPopoverOpen = true;
		this.oVariantList.destroyItems();
		if (this.bVariantItemMode == true || (this.bVariantItemMode == false && (this.getSelectionKey() === this.STANDARDVARIANTKEY || this.getSelectionKey() === null))) {
			var sText;
			if (this.bVariantItemMode == false) {
				sText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT");
			} else {
				sText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_STANDARD");
			}
			if (this.getStandardItemText() !== null && this.getStandardItemText() != "") {
				sText = this.getStandardItemText();
			}
			oVariantListItem = new VariantItem(this.oVariantPopoverTrigger.getId() + "-item-standard", {
				key: this.STANDARDVARIANTKEY,
				text: sText,
				readOnly: true,
				executeOnSelection: this.bExecuteOnSelectForStandard
			});
			this.oVariantList.addItem(oVariantListItem);
			if (this.getSelectionKey() == oVariantListItem.getKey() || this.getSelectionKey() === null) {
				this.oVariantList.setSelectedItem(oVariantListItem);
			}
		}
		this.oVariantSave.setEnabled(false);
		this.oActionSheetSave.setEnabled(false);
		if (this.bVariantItemMode === false && this.getSelectionKey() !== null) {
			this.oVariantSave.setEnabled(true);
			this.oActionSheetSave.setEnabled(true);
		}
		oItems = this._getItems();
		oItems.sort(this._compareItems);
		for (iCount = 0; iCount < oItems.length; iCount++) {
			oItem = oItems[iCount];
			oVariantListItem = new VariantItem(this.oVariantPopoverTrigger.getId() + "-item-" + iCount, {
				key: oItem.getKey(),
				text: oItem.getText()
			});
			if (oItem.getReadOnly) {
				oVariantListItem.setReadOnly(oItem.getReadOnly());
			}
			if (oItem.getExecuteOnSelection) {
				oVariantListItem.setExecuteOnSelection(oItem.getExecuteOnSelection());
			}
			if (oItem.getGlobal) {
				oVariantListItem.setGlobal(oItem.getGlobal());
			}
			if (oItem.getLifecyclePackage) {
				oVariantListItem.setLifecyclePackage(oItem.getLifecyclePackage());
			}
			if (oItem.getLifecycleTransportId) {
				oVariantListItem.setLifecycleTransportId(oItem.getLifecycleTransportId());
			}
			if (oItem.getNamespace) {
				oVariantListItem.setNamespace(oItem.getNamespace());
			}
			if (oItem.getAccessOptions) {
				oVariantListItem.setAccessOptions(oItem.getAccessOptions());
			}
			if (oItem.getLabelReadOnly) {
				oVariantListItem.setLabelReadOnly(oItem.getLabelReadOnly());
			}
	
			this.oVariantList.addItem(oVariantListItem);
			if (this.getSelectionKey() == oVariantListItem.getKey()) {
				this.oVariantList.setSelectedItem(oVariantListItem);
			}
		}
		if (this.bDirty) {
			var oSelectedItem = this.oVariantList.getItemByKey(this.getSelectionKey());
			if (oSelectedItem) {
				if (!oSelectedItem.getReadOnly()) {
					this.oVariantSave.setEnabled(true);
					this.oActionSheetSave.setEnabled(true);
				}
			}
		}
		this._setDialogCompactStyle(this, this.oVariantPopOver);
		this._manageButtonState();
		this.oVariantPopOver.setInitialFocus(this.oVariantList.getSelectedItem().getId());
		this.oVariantPopOver.openBy(this.oVariantPopoverTrigger.$("img")[0]);
	};
	
	VariantManagement.prototype.onclick = function(oEvent) {
		if (this.getEnabled()) {
			this._openVariantSelection();
		}
	};
	
	VariantManagement.prototype.onkeydown = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.F4 || oEvent.altKey === true && oEvent.which === jQuery.sap.KeyCodes.ARROW_UP || oEvent.altKey === true && oEvent.which === jQuery.sap.KeyCodes.ARROW_DOWN) {
			if (this.getEnabled()) {
				this._openVariantSelection();
			}
		}
	};
	
	VariantManagement.prototype._initalizeManagementTableColumns = function() {
		if (this.bManagementTableInitialized) {
			return;
		}
		this.oManagementTable.addColumn(new sap.m.Column({
			header: new sap.m.Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_NAME")
			})
		}));
		this.oManagementTable.addColumn(new sap.m.Column({
			header: new sap.m.Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_VARIANTTYPE")
			}),
			width: "4rem",
			demandPopin: true,
			popinDisplay: sap.m.PopinDisplay.Inline,
			minScreenWidth: sap.m.ScreenSize.Tablet
		}));
		this.oManagementTable.addColumn(new sap.m.Column({
			header: new sap.m.Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT")
			}),
			width: "4rem",
			demandPopin: true,
			popinDisplay: sap.m.PopinDisplay.Inline,
			minScreenWidth: sap.m.ScreenSize.Tablet
		}));
		if (this.getShowExecuteOnSelection()) {
			this.oManagementTable.addColumn(new sap.m.Column({
				header: new sap.m.Text({
					text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_EXECUTEONSELECT")
				}),
				width: "4rem",
				hAlign: sap.ui.core.TextAlign.Center,
				demandPopin: true,
				popinDisplay: sap.m.PopinDisplay.Inline,
				minScreenWidth: sap.m.ScreenSize.Tablet
			}));
		}
		this.oManagementTable.addColumn(new sap.m.Column({
			width: "2.5rem",
			hAlign: sap.ui.core.TextAlign.Center
		}));
		this.bManagementTableInitialized = true;
	};
	
	VariantManagement.prototype._initalizeSaveAsDialog = function() {
		this.oSaveDialogOptionsGrid.removeAllContent();
	
		this.oShare.setVisible(this.getShowShare());
		this.oExecuteOnSelect.setVisible(this.getShowExecuteOnSelection());
		this.oCreateTile.setVisible(this.getShowCreateTile());
	
		this.oSaveDialogOptionsGrid.addContent(this.oDefault);
		if (this.getShowShare()) {
			this.oSaveDialogOptionsGrid.addContent(this.oShare);
		}
		if (this.getShowExecuteOnSelection()) {
			this.oSaveDialogOptionsGrid.addContent(this.oExecuteOnSelect);
		}
		if (this.getShowCreateTile()) {
			this.oSaveDialogOptionsGrid.addContent(this.oCreateTile);
		}
	};
	
	VariantManagement.prototype._variantSavePressed = function() {
		var oItem = this._getSelectedItem();
		var bDefault = false;
		if (this.getDefaultVariantKey() == oItem.getKey()) {
			bDefault = true;
		}
		if (oItem.getLifecyclePackage && oItem.getGlobal() == true) {
			var that = this;
			var fOkay = function(sPackage, sTransport) {
				that.oVariantPopOver.close();
				that.sPackage = sPackage;
				that.sTransport = sTransport;
				that.fireSave({
					name: oItem.getText(),
					overwrite: true,
					key: oItem.getKey(),
					def: bDefault,
					lifecyclePackage: that.sPackage,
					lifecycleTransportId: that.sTransport
				});
				oItem.setLifecycleTransportId(that.sTransport);
				that.bDirty = false;
				that.oVariantModifiedText.setVisible(false);
				that.oModel.setProperty("/enabled", false);
				that._eventDone();
			};
			var fError = function(oResult) {
				that.sTransport = null;
				that.sPackage = null;
				that._cancelAllEvents();
			};
			this._assignTransport(oItem, fOkay, fError, this.oVariantText);
		} else {
			this.oVariantPopOver.close();
			this.fireSave({
				name: oItem.getText(),
				overwrite: true,
				key: oItem.getKey(),
				def: bDefault
			});
			this.bDirty = false;
			this.oVariantModifiedText.setVisible(false);
			this.oModel.setProperty("/enabled", false);
			this._eventDone();
		}
	};
	
	VariantManagement.prototype._assignTransport = function(oVariant, fOkay, fError, oControl) {
		var oObject = {
			type: "variant",
			name: "",
			namespace: ""
		};
		oObject["package"] = "";
		if (oVariant !== null) {
			oObject["package"] = oVariant.getLifecyclePackage();
			oObject["name"] = oVariant.getKey();
			oObject["namespace"] = oVariant.getNamespace();
		}
		var _fOkay = function(oResult) {
			var sPackage;
			var sTransport;
			sTransport = oResult.getParameters().selectedTransport;
			sPackage = oResult.getParameters().selectedPackage;
			fOkay(sPackage, sTransport);
		};
		var _fError = function(oResult) {
			fError(oResult);
		};
		if (this.getLifecycleSupport()) {
			var sTransport = null;
			if (oVariant) {
				sTransport = oVariant.getLifecycleTransportId();
			}
			if (sTransport != null && sTransport.trim().length > 0) {
				fOkay(oObject["package"], sTransport);
			} else {
				var oTransports = new TransportSelection();
				oTransports.selectTransport(oObject, _fOkay, _fError, this._checkDialogCompactStyle(oControl), oControl);
			}
		} else {
			fOkay(oObject["package"], "");
		}
	};
	
	VariantManagement.prototype.getDefaultVariantKey = function() {
		var sValue = this.getProperty("defaultVariantKey");
		if (sValue === "") {
			if (this.bVariantItemMode) {
				sValue = this.STANDARDVARIANTKEY;
			}
		}
		return sValue;
	};
	
	VariantManagement.prototype._compareItems = function(first, second) {
		var sFirst = first.getText();
		var sSecond = second.getText();
		var sFirstU = sFirst.toUpperCase();
		var sSecondU = sSecond.toUpperCase();
		if (sFirstU == sSecondU) {
			if (sFirst == sSecond) {
				return 0;
			}
			if (sFirst < sSecond) {
				return -1;
			}
			if (sFirst > sSecond) {
				return 1;
			}
		}
		if (sFirstU < sSecondU) {
			return -1;
		}
		if (sFirstU > sSecondU) {
			return 1;
		}
	};
	
	VariantManagement.prototype._accessOptionsText = function(sOptions) {
		var sMessage = null;
		switch (sOptions) {
			case "R":
				sMessage = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LAYER");
				break;
			case "RD":
				sMessage = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LANGUAGE");
				break;
			default:
				sMessage = null;
		}
		return sMessage;
	};
	
	VariantManagement.prototype._openSaveAsDialog = function() {
		this._initalizeSaveAsDialog();
		if (this._getSelectedItem()) {
			this.oInputName.setValue(this._getSelectedItem().getText());
		} else {
			this.oInputName.setValue("");
		}
		this.oInputName.setEnabled(true);
		this.oInputName.setValueState(ValueState.None);
		this.oInputName.setValueStateText(null);
		this.oDefault.setSelected(false);
		this.oShare.setSelected(false);
		this.oCreateTile.setSelected(false);
		this.oExecuteOnSelect.setSelected(false);
		this._setDialogCompactStyle(this, this.oSaveDialog);
		this.oVariantPopOver.close();
		this.sTransport = null;
		this.sPackage = null;
		if (this.bManualVariantKey) {
			this.oInputKey.setVisible(true);
			this.oInputKey.setEnabled(true);
			this.oInputKey.setValueState(ValueState.None);
			this.oInputKey.setValueStateText(null);
			this.oLabelKey.setVisible(true);
		} else {
			this.oInputKey.setVisible(false);
			this.oLabelKey.setVisible(false);
		}
	
		this.oSaveDialog.open();
	};
	
	VariantManagement.prototype._checkManageItemNameChange = function(oManageItem) {
		var sText = "";
		var bTextChanged = true;
		var oInputField = null;
		var that = this;
		oInputField = oManageItem.getCells()[0];
		sText = oInputField.getValue();
		sText = sText.trim();
		var oEditableVariantItem = oManageItem;
		var sKey = oEditableVariantItem.getKey();
		if (sText.length === 0) {
			var oItem = this.oVariantList.getItemByKey(sKey); // ???
			oInputField.setValue(oItem.getText());
			oInputField.setValueState(ValueState.None);
			oInputField.setValueStateText(null);
		}
		if (this.oVariantList.getItemByKey(sKey).getText().trim() != sText) {
			bTextChanged = true;
		}
		if (bTextChanged) {
			if (oEditableVariantItem.getGlobal()) {
				var fOkay = function(sPackage, sTransport) {
					oEditableVariantItem.setLifecyclePackage(sPackage);
					oEditableVariantItem.setLifecycleTransportId(sTransport);
					that._eventDone();
				};
	
				var fError = function(oResult) {
					var oItem = that.oVariantList.getItemByKey(sKey); // ???
					oInputField.setValue(oItem.getText());
					that._cancelAllEvents();
				};
				this._assignTransport(oEditableVariantItem, fOkay, fError, this.oManagementDialog);
			} else {
				this._eventDone();
			}
		}
	};
	
	VariantManagement.prototype._handleManageSavePressed = function() {
		var oNewItems = this.oManagementTable.getItems();
		var oItem;
		var fireSelect = false;
		var sName = "";
		var oOriginalItem = null;
		var iD = 0;
	
		for (var iG = 0; iG < oNewItems.length; iG++) {
			oItem = this.oVariantList.getItemByKey(oNewItems[iG].getKey());
			if (oNewItems[iG].getCells()[0].getValue) {
				sName = oNewItems[iG].getCells()[0].getValue();
			}
			if (oNewItems[iG].getCells()[0].getText) {
				sName = oNewItems[iG].getCells()[0].getText();
			}
			sName = sName.trim();
			if (oItem.getText() !== sName) {
				this.aRenamedVariants.push({
					key: oItem.getKey(),
					name: sName
				});
				oOriginalItem = this.getItemByKey(oNewItems[iG].getKey());
				oOriginalItem.setText(sName);
				if (oOriginalItem.setLifecyclePackage) {
					oOriginalItem.setLifecyclePackage(oNewItems[iG].getLifecyclePackage());
					oOriginalItem.setLifecycleTransportId(oNewItems[iG].getLifecycleTransportId());
				}
	
				if (this.lastSelectedVariantKey === oItem.getKey()) {
					this.oVariantText.setText(sName);
					this.bDirty = false;
					this.oVariantModifiedText.setVisible(false);
					this.oModel.setProperty("/enabled", false);
				}
			}
	
			if (this.getShowExecuteOnSelection() && oItem.getExecuteOnSelection && oItem.getExecuteOnSelection() != oNewItems[iG].getCells()[3].getSelected()) {
				// execute on selection changed
				var bFlag = oNewItems[iG].getCells()[3].getSelected();
				var oItemTmp = this.getItemByKey(oNewItems[iG].getKey());
				if (oItemTmp && oItemTmp.setExecuteOnSelection) {
					oItemTmp.setExecuteOnSelection(bFlag);
					this.aExeVariants.push({
						key: oItem.getKey(),
						exe: bFlag
					});
					if (oItemTmp.setLifecyclePackage) {
						oItemTmp.setLifecyclePackage(oNewItems[iG].getLifecyclePackage());
						oItemTmp.setLifecycleTransportId(oNewItems[iG].getLifecycleTransportId());
					}
				}
			}
		}
	
		this.oManagementDialog.close();
		this._manageButtonState();
		if (this.bVariantItemMode === false) {
			if (this.getDefaultVariantKey() != this.sNewDefaultKey) {
				var oItemTmpDef = null;
				if (this.sNewDefaultKey == this.STANDARDVARIANTKEY) {
					oItemTmpDef = this.getItemByKey(this.getDefaultVariantKey());
					this.fireSave({
						name: oItemTmpDef.getText(),
						overwrite: true,
						key: oItemTmpDef.getKey(),
						def: false
					});
				} else {
					oItemTmpDef = this.getItemByKey(this.sNewDefaultKey);
					this.fireSave({
						name: oItemTmpDef.getText(),
						overwrite: true,
						key: oItemTmpDef.getKey(),
						def: true
					});
				}
			}
		}
		this.setDefaultVariantKey(this.sNewDefaultKey);
	
		for (iD = 0; iD < this.aRemovedVariants.length; iD++) {
			oItem = this.getItemByKey(this.aRemovedVariants[iD]);
			for (var iE = 0; iE < this.aRemovedVariantTransports.length; iE++) {
				if (this.aRemovedVariants[iD] === this.aRemovedVariantTransports[iE].key) {
					var oManageItem = this.aRemovedVariantTransports[iE];
					if (oItem.setLifecyclePackage) {
						oItem.setLifecycleTransportId(oManageItem.transport);
					}
					break;
				}
			}
		}
	
		this.fireManage({
			renamed: this.aRenamedVariants,
			deleted: this.aRemovedVariants,
			exe: this.aExeVariants,
			def: this.getDefaultVariantKey()
		});
	
		for (iD = 0; iD < this.aRemovedVariants.length; iD++) {
			oItem = this.getItemByKey(this.aRemovedVariants[iD]);
			if (oItem) {
				this._removeItem(oItem);
				oItem.destroy();
			}
			if (this.lastSelectedVariantKey === this.aRemovedVariants[iD]) {
				fireSelect = true;
				this._setSelectedItem(null);
				this.bDirty = false;
				this.oVariantModifiedText.setVisible(false);
				this.oModel.setProperty("/enabled", false);
			}
		}
	
		if (fireSelect) {
			this.bFireSelect = true;
		}
		this._eventDone();
	};
	
	// new event processor handling
	VariantManagement.prototype._createEvent = function(sName, fCallback) {
		var oEvent = {
			name: sName,
			fFunc: fCallback,
			args: []
		};
		return oEvent;
	};
	
	VariantManagement.prototype._handleNextEvent = function() {
		if (this.aEvents.length > 0) {
			if (!this.bEventRunning) {
				this.bEventRunning = true;
				var nextEvent = this.aEvents.pop();
				nextEvent.fFunc.apply(this, nextEvent.args);
			}
			// else {
			// if(bShow)
			// // console.log("Event still running");
			// }
			// } else {
			// // console.log("No Events to process");
		}
	};
	
	VariantManagement.prototype._addEvent = function(oEvent) {
		this.aEvents.push(oEvent);
		this._handleNextEvent();
	};
	
	VariantManagement.prototype._cancelAllEvents = function() {
		this.aEvents = [];
		this.bEventRunning = false;
	};
	
	VariantManagement.prototype._eventDone = function() {
		this.bEventRunning = false;
		this._handleNextEvent();
	};
	
	VariantManagement.prototype._handleManageExecuteOnSelectionChanged = function(oCheckBox) {
		var that = this;
		var oManageItem = oCheckBox.getParent();
		if (oManageItem.getGlobal()) {
			var fOkay = function(sPackage, sTransport) {
				oManageItem.setLifecyclePackage(sPackage);
				oManageItem.setLifecycleTransportId(sTransport);
				that._eventDone();
			};
			var fError = function(oResult) {
				oCheckBox.setSelected(!oCheckBox.getSelected());
				that._cancelAllEvents();
			};
			this._assignTransport(oManageItem, fOkay, fError, this.oManagementDialog);
		} else {
			this._eventDone();
		}
	};
	
	VariantManagement.prototype._handleManageDeletePressed = function(oButton) {
		var oItem = oButton.getParent();
		if (oItem.getGlobal()) {
			var that = this;
			var fOkay = function(sPackage, sTransport) {
				var sKey = oItem.getKey();
				that.aRemovedVariants.push(sKey);
				that.oManagementTable.removeItem(oItem);
				if (oItem.getKey() === that.sNewDefaultKey) {
					that.oManagementTable.getItems()[0].getCells()[2].setSelected(true);
					that.sNewDefaultKey = that.STANDARDVARIANTKEY;
				}
				oItem.destroy();
				var oTransportAssignment = {
					key: sKey,
					transport: sTransport
				};
				that.aRemovedVariantTransports.push(oTransportAssignment);
				that._eventDone();
			};
			var fError = function(oResult) {
				that._cancelAllEvents();
			};
			this._assignTransport(oItem, fOkay, fError, this.oManagementDialog);
		} else {
			this.aRemovedVariants.push(oItem.getKey());
			this.oManagementTable.removeItem(oItem);
			if (oItem.getKey() === this.sNewDefaultKey) {
				this.oManagementTable.getItems()[0].getCells()[2].setSelected(true);
				this.sNewDefaultKey = this.STANDARDVARIANTKEY;
			}
			oItem.destroy();
			this._eventDone();
		}
	};
	
	VariantManagement.prototype._handleShareSelected = function(oControlEvent) {
		var that = this;
		if (oControlEvent.getParameters().selected) {
			var fOkay = function(sPackage, sTransport) {
				that.sTransport = sTransport;
				that.sPackage = sPackage;
				that._eventDone();
			};
			var fError = function(oResult) {
				that.oShare.setSelected(false);
				that.sTransport = null;
				that.sPackage = null;
				that._cancelAllEvents();
			};
			this._assignTransport(null, fOkay, fError, this.oSaveDialog);
		} else {
			this.sTransport = null;
			this.sPackage = null;
			this._eventDone();
		}
	};
	
	VariantManagement.prototype._handleVariantSaveAs = function() {
		var sKey = "SV" + new Date().getTime();
		var sName = this.oInputName.getValue();
		var sManualKey = this.oInputKey.getValue();
		var sTransport = "";
		var sPackage = "";
		var bExecuteOnSelect = false;
		var bCreateTile = false;
		var oItem = null;
		sName = sName.trim();
		if (sName == "") {
			this.oInputName.setValueState(ValueState.Error);
			this.oInputName.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
			this._cancelAllEvents();
			return;
		}
		sManualKey = sManualKey.trim();
		if (this.bManualVariantKey && sManualKey == "") {
			this.oInputKey.setValueState(ValueState.Error);
			this.oInputKey.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
			this._cancelAllEvents();
			return;
		}
		if (this.bManualVariantKey) {
			sKey = sManualKey;
		}
		this.oSaveDialog.close();
		if (this.oExecuteOnSelect !== null) {
			bExecuteOnSelect = this.oExecuteOnSelect.getSelected();
		}
		if (this.oCreateTile !== null) {
			bCreateTile = this.oCreateTile.getSelected();
		}
		if (this.bVariantItemMode) {
			oItem = new VariantItem({
				key: sKey,
				text: sName,
				readOnly: false,
				executeOnSelection: bExecuteOnSelect,
				global: this.oShare.getSelected(),
				lifecycleTransportId: this.sTransport,
				lifecyclePackage: this.sPackage
			});
			this.addVariantItem(oItem);
			this._setSelectedItem(oItem);
		} else {
			oItem = new Item({
				key: sKey,
				text: sName
			});
			this.addItem(oItem);
			this._setSelectedItem(oItem);
		}
		if (this.oDefault.getSelected()) {
			this.setDefaultVariantKey(sKey);
		}
		if (this.oShare.getSelected()) {
			sPackage = this.sPackage;
			sTransport = this.sTransport;
		}
		this._manageButtonState();
		this.fireSave({
			name: sName,
			overwrite: false,
			def: this.oDefault.getSelected(),
			key: sKey,
			exe: this.oExecuteOnSelect.getSelected(),
			tile: bCreateTile,
			global: this.oShare.getSelected(),
			lifecyclePackage: sPackage,
			lifecycleTransportId: sTransport
		});
		this.bDirty = false;
		this.oVariantModifiedText.setVisible(false);
		this.oModel.setProperty("/enabled", false);
		this._eventDone();
	};
	
	VariantManagement.prototype._setBackwardCompatibility = function(bFlag) {
		if (this.getItems().length === 0 && this.getVariantItems().length === 0) {
			this.bVariantItemMode = !bFlag;
		}
		this._setStandardText();
	};
	
	VariantManagement.prototype._setStandardText = function() {
		var sKey = this.getSelectionKey();
		if (sKey === null || sKey === this.STANDARDVARIANTKEY) {
			if (this.bVariantItemMode == false) {
				this.oVariantText.setText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT"));
			} else {
				this.oVariantText.setText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_STANDARD"));
			}
			if (this.getStandardItemText() !== null && this.getStandardItemText() != "") {
				this.oVariantText.setText(this.getStandardItemText());
			}
		}
	};
	
	VariantManagement.prototype._openVariantManagementDialog = function() {
		var oItem;
		var oItems = null;
		var iItemNo = 0;
		var oManageItem;
		var oNameCell;
		var oTypeCell;
		var oDefaultCell;
		var oExecuteCell;
		var oDeleteCell;
		var sTypeText;
		var sTooltip;
		var fLiveChange;
		var fChange;
		var fSelectRB;
		var fSelectCB;
		var fPress;
	
		var that = this;
	
		this.oManagementTable.destroyItems();
	
		fLiveChange = function(oControlEvent) {
			var sText = this.getValue();
			sText = sText.trim();
			if (sText.length === 0) {
				this.setValueState(ValueState.Error);
				this.setValueStateText(that.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
			}
		};
	
		fChange = function(oControlEvent) {
			var oEvent = that._createEvent("inputfieldChange", that._checkManageItemNameChange);
			oEvent.args.push(this.getParent());
			that._addEvent(oEvent);
		};
	
		fSelectRB = function(oControlEvent) {
			if (oControlEvent.getParameters().selected === true) {
				var oItem = this.getParent();
				that.sNewDefaultKey = oItem.getKey();
			}
		};
	
		fSelectCB = function(oControlEvent) {
			var oEvent = that._createEvent("executeOnSelectionChange", that._handleManageExecuteOnSelectionChanged);
			oEvent.args.push(this);
			that._addEvent(oEvent);
		};
	
		fPress = function(oControlEvent) {
			var oEvent = that._createEvent("manageDeletePressed", that._handleManageDeletePressed);
			oEvent.args.push(this);
			that._addEvent(oEvent);
		};
	
		this._initalizeManagementTableColumns();
		this.sNewDefaultKey = this.getDefaultVariantKey();
	
		if (this.oVariantList.getItems()[0].getKey() !== this.STANDARDVARIANTKEY && this.bVariantItemMode == false) {
			oItem = new VariantItem(this.oVariantManage.getId() + "-item-standard", {
				key: this.STANDARDVARIANTKEY,
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT"),
				readOnly: true,
				executeOnSelection: false
			});
			this.oVariantList.insertItem(oItem, 0);
		}
		oItems = this.oVariantList.getItems();
		for (var iH = 0; iH < oItems.length; iH++) {
			if (oItems[iH].getReadOnly() || oItems[iH].getLabelReadOnly()) {
				var sOptions = oItems[iH].getAccessOptions();
				sTooltip = this._accessOptionsText(sOptions);
			} else {
				sTooltip = null;
			}
			if (oItems[iH].getReadOnly()) {
				sTooltip = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LAYER");
			} else if (oItems[iH].getLabelReadOnly() === true) {
				sTooltip = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LANGUAGE");
			}
	
			if (oItems[iH].getKey() === this.STANDARDVARIANTKEY) {
				sTooltip = null;
			}
			oManageItem = new EditableVariantItem(this.oVariantManage.getId() + "-edit-" + iItemNo, {
				key: oItems[iH].getKey(),
				global: oItems[iH].getGlobal(),
				lifecyclePackage: oItems[iH].getLifecyclePackage(),
				lifecycleTransportId: oItems[iH].getLifecycleTransportId(),
				namespace: oItems[iH].getNamespace(),
				labelReadOnly: oItems[iH].getLabelReadOnly(),
				vAlign: sap.ui.core.VerticalAlign.Middle
			});
			if (oItems[iH].getKey() === this.STANDARDVARIANTKEY || oItems[iH].getReadOnly() === true || oItems[iH].getLabelReadOnly() === true) {
				oNameCell = new sap.m.Text(this.oVariantManage.getId() + "-text-" + iItemNo, {
					text: oItems[iH].getText()
				});
				oNameCell.addStyleClass("sapUICompVarMngmtLbl");
				if (sTooltip) {
					oNameCell.setTooltip(sTooltip);
				}
			} else {
				oNameCell = new Input(this.oVariantManage.getId() + "-input-" + iItemNo, {
					value: oItems[iH].getText(),
					liveChange: fLiveChange,
					change: fChange
				});
			}
			oManageItem.addCell(oNameCell);
	
			if (oItems[iH].getGlobal()) {
				sTypeText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_SHARED");
			} else {
				sTypeText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_PRIVATE");
			}
			oTypeCell = new sap.m.Text(this.oVariantManage.getId() + "-type-" + iItemNo, {
				text: sTypeText
			});
			oTypeCell.addStyleClass("sapUICompVarMngmtType");
			oManageItem.addCell(oTypeCell);
	
			oDefaultCell = new sap.m.RadioButton(this.oVariantManage.getId() + "-def-" + iItemNo, {
				groupName: this.oVariantManage.getId(),
				select: fSelectRB
			});
			if (this.sNewDefaultKey === oItems[iH].getKey() || oItems[iH].getKey() === this.STANDARDVARIANTKEY && this.sNewDefaultKey === "") {
				oDefaultCell.setSelected(true);
			}
			oManageItem.addCell(oDefaultCell);
	
			if (this.getShowExecuteOnSelection()) {
				oExecuteCell = new CheckBox(this.oVariantManage.getId() + "-exe-" + iItemNo, {
					selected: false,
					enabled: false,
					select: fSelectCB
				});
				if (oItems[iH].getExecuteOnSelection) {
					oExecuteCell.setEnabled(!oItems[iH].getReadOnly());
					oExecuteCell.setSelected(oItems[iH].getExecuteOnSelection());
					if (sTooltip) {
						oExecuteCell.setTooltip(sTooltip);
					}
				}
				oManageItem.addCell(oExecuteCell);
			}
	
			oDeleteCell = new Button(this.oVariantManage.getId() + "-del-" + iItemNo, {
				icon: "sap-icon://sys-cancel",
				enabled: true,
				type: sap.m.ButtonType.Transparent,
				press: fPress,
				tooltip: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DELETE")
			});
			if (oManageItem.getKey() === this.STANDARDVARIANTKEY || (oItems[iH].getReadOnly && oItems[iH].getReadOnly())) {
				oDeleteCell.setEnabled(false);
			}
			oDeleteCell.addStyleClass("sapUiCompVarMngmtDel");
			oManageItem.addCell(oDeleteCell);
	
			this.oManagementTable.addItem(oManageItem);
			iItemNo++;
		}
		this.aRemovedVariants = [];
		this.aRemovedVariantTransports = [];
		this.aRenamedVariants = [];
	
		this.aExeVariants = [];
		this._setDialogCompactStyle(this, this.oManagementDialog);
		oItem = this.oVariantList.getSelectedItem();
		if (oItem) {
			this.lastSelectedVariantKey = oItem.getKey();
		}
		this.oVariantPopOver.close();
		this.oManagementDialog.open();
	};
	
	VariantManagement.prototype._enableManualVariantKey = function(bEnable) {
		this.bManualVariantKey = bEnable;
	};
	
	VariantManagement.prototype._fireSelectAsync = function(sKey) {
		var slKey;
		if (sKey === undefined || sKey === null) {
			var oItem = this._getSelectedItem();
			if (oItem === null) {
				slKey = this.STANDARDVARIANTKEY;
			} else {
				slKey = oItem.getKey();
			}
		}
		this.fireSelect({
			key: slKey
		});
	};
	
	VariantManagement.prototype._executeOnSelectForStandardVariant = function(bSelect) {
		this.bExecuteOnSelectForStandard = bSelect;
	};
	
	return VariantManagement;

}, /* bExport= */ true);

}; // end of sap/ui/comp/variants/VariantManagement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantManagementRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.variants.VariantManagementRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/VariantManagementRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class VariantManagement renderer.
	 * @static
	 */
	var VariantManagementRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	VariantManagementRenderer.render = function(oRm, oControl) {
		oRm.write("<div ");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiCompVarMngmt");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.oVariantLayout);
		oRm.write("</div>");
	};
	

	return VariantManagementRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/variants/VariantManagementRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterItem.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterItem",['jquery.sap.global', 'sap/m/Label', 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/core/TooltipBase'],
	function(jQuery, Label, library, Element, TooltipBase) {
	"use strict";


	
	/**
	 * Constructor for a new filterbar/FilterItem.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * FilterItem represents a selection filed in the basic area of the FilterBar control
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FilterItem = Element.extend("sap.ui.comp.filterbar.FilterItem", /** @lends sap.ui.comp.filterbar.FilterItem.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * the label of the control
			 */
			label : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * the name of the field
			 */
			name : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * mandatory flag
			 */
			mandatory : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * visibility state of the FilterItem
			 */
			visible : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * provide a tooltip for the item. The Tooltip will be assigned to the label.
			 */
			labelTooltip : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Determines if a filter is part of the currently selected variant. This property is ONLY used internally and must not be used by the filter bar consumers.
			 * @since 1.26.1
			 */
			partOfCurrentVariant : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Controls the visibility of a filter item in the FilterBar
			 * @since 1.26.1
			 */
			visibleInFilterBar : {type : "boolean", group : "Misc", defaultValue : true}
		},
		aggregations : {
	
			/**
			 * the control which will be placed into te basic area
			 */
			control : {type : "sap.ui.core.Control", multiple : false}
		},
		events : {
	
			/**
			 * Fired when the value of a property, for example vVisible, has changed
			 */
			change : {
				parameters : {
	
					/**
					 * Name of the changed property
					 */
					propertyName : {type : "string"}
				}
			}
		}
	}});
	
	
	/**
	 * initialize the filter item
	 * 
	 * @public
	 */
	FilterItem.prototype.init = function() {
		this._oLabel = null;
	};
	
	/**
	 * setter for visible
	 * 
	 * @public
	 * @param {boolean} bIsVisible property
	 */
	FilterItem.prototype.setVisible = function(bIsVisible) {
		this.setProperty("visible", bIsVisible);
		this.fireChange({
			propertyName: "visible"
		});
	};
	
	/**
	 * setter for visible in filter bar
	 * 
	 * @public
	 * @since 1.26.1
	 * @param {boolean} bIsVisible property
	 * @param {boolean} bTriggerWithoutChangeNotification if set, the change notification will not be fired
	 */
	FilterItem.prototype.setVisibleInFilterBar = function(bIsVisible) {
		this.setProperty("visibleInFilterBar", bIsVisible);
	
		this.fireChange({
			propertyName: "visibleInFilterBar"
		});
	};
	
	/**
	 * setter for label
	 * 
	 * @private
	 * @returns {sap.m.Label} label control
	 */
	FilterItem.prototype._createLabelControl = function() {
	
		var sText = this.getLabel();
	
		var oLabelCtrl = new Label({
			text: sText,
			required: this.getMandatory(),
			textAlign: "Begin"
		});
	
		return oLabelCtrl;
	};
	
	/**
	 * setter for mandatory flag
	 * 
	 * @public
	 * @param {string} bValue property
	 */
	FilterItem.prototype.setMandatory = function(bValue) {
		this.setProperty("mandatory", bValue);
	
		if (this._oLabel) {
			this._oLabel.setRequired(bValue);
		}
	
		this.fireChange({
			propertyName: "mandatory"
		});
	};
	
	/**
	 * setter for label
	 * 
	 * @public
	 * @param {string} sValue property
	 */
	FilterItem.prototype.setLabel = function(sValue) {
		this.setProperty("label", sValue);
	
		if (!this._oLabel) {
			this._oLabel = this._createLabelControl();
		}
	
		if (!this.getLabelTooltip()) {
			this.setLabelTooltip(sValue);
		}
	
		this._oLabel.setText(sValue);
	
		this.fireChange({
			propertyName: "label"
		});
	};
	
	/**
	 * setter for tooltip
	 * 
	 * @public
	 * @param {string} sText property
	 */
	FilterItem.prototype.setLabelTooltip = function(sText) {
		this.setProperty("labelTooltip", sText);
	
		if (!this._oLabel) {
			this._oLabel = this._createLabelControl();
		}
	
		this._oLabel.setTooltip(sText);
	};
	
	/**
	 * retrieves the label control. Needed because of an eventual binding to the label
	 * 
	 * @public
	 * @returns {sap.m.Label} the label control
	 */
	FilterItem.prototype.getLabelControl = function() {
	
		if (!this._oLabel) {
			this._oLabel = this._createLabelControl();
		}
	
		return this._oLabel;
	};
	
	/**
	 * destroys this element
	 * 
	 * @public
	 */
	FilterItem.prototype.destroy = function() {
		Element.prototype.destroy.apply(this, arguments);
	
		this._oLabel = null;
	};
	

	return FilterItem;

}, /* bExport= */ true);

}; // end of sap/ui/comp/filterbar/FilterItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.VariantConverterFrom') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.filterbar.VariantConverterFrom'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateRangeSelection'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/VariantConverterFrom",['jquery.sap.global', 'sap/ui/comp/smartfilterbar/ControlConfiguration', 'sap/ui/comp/valuehelpdialog/ValueHelpDialog', 'sap/m/MultiComboBox', 'sap/m/DatePicker', 'sap/m/DateRangeSelection'],
	function(jQuery, ControlConfiguration, ValueHelpDialog, MultiComboBox, DatePicker, DateRangeSelection) {
	"use strict";


	/**
	 * Constructs a utility class to convert the filter bar variant from/to internal to suite format
	 * 
	 * @constructor
	 * @public
	 * @author Franz Mueller
	 */
	var VariantConverterFrom = function() {
	};
	
	/**
	 * the variant in suite format will be transformed to the internal format
	 * 
	 * @public
	 * @param {string} sSuiteContent object representing the variant data
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @returns {object} variant in the internal format
	 */
	VariantConverterFrom.prototype.convert = function(sSuiteContent, oFilterBar) {
		var oContent = null;
		var oSuiteContent;
	
		if (sSuiteContent) {
	
			oSuiteContent = JSON.parse(sSuiteContent);
	
			if (oFilterBar && oFilterBar.getFilterBarViewMetadata && oSuiteContent && (oSuiteContent.Parameters || oSuiteContent.SelectOptions)) {
	
				oContent = {};
				if (oSuiteContent.Parameters) {
					this._addParameters(oSuiteContent.Parameters, oFilterBar, oContent);
				}
	
				if (oSuiteContent.SelectOptions) {
					this._addSelectOptions(oSuiteContent.SelectOptions, oFilterBar, oContent);
				}
	
				oContent = JSON.stringify(oContent);
			}
		}
	
		return oContent;
	};
	
	/**
	 * retrievee the meta data for a givven filter
	 * 
	 * @private
	 * @param {string} sName of the filter
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @returns {object} meta data of the filter; null otherwise
	 */
	VariantConverterFrom.prototype._getParameterMetaData = function(sName, oFilterBar) {
		var i, j;
		var oGroup;
	
		var aFilterMetaData = oFilterBar.getFilterBarViewMetadata();
		if (aFilterMetaData) {
			for (i = 0; i < aFilterMetaData.length; i++) {
				oGroup = aFilterMetaData[i];
				for (j = 0; j < oGroup.fields.length; j++) {
					if (sName === oGroup.fields[j].fieldName) {
						return oGroup.fields[j];
					}
				}
			}
		}
	
		return null;
	};
	
	/**
	 * convert a simple parameter
	 * 
	 * @private
	 * @param {object} oSuiteParameters object representing the suite single value parameters
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @param {object} oContent representing the resulting internal format
	 */
	VariantConverterFrom.prototype._addParameters = function(oSuiteParameters, oFilterBar, oContent) {
		var i;
		var sName, sValue;
		var oFilterMetaData;
	
		for (i = 0; i < oSuiteParameters.length; i++) {
			sValue = oSuiteParameters[i].PropertyValue;
			sName = oSuiteParameters[i].PropertyName;
	
			var oFilterItem = oFilterBar.determineFilterItemByName(sName);
			if (oFilterItem) {
				oFilterMetaData = this._getParameterMetaData(sName, oFilterBar);
				if (oFilterMetaData) {
	
					this._addAccordingMetaData(oContent, oFilterMetaData, sValue);
	
				} else {
					jQuery.sap.log.error("neither metadata nor custom information for filter '" + sName + "'");
				}
			} else {
				jQuery.sap.log.warning("unknown filter '" + sName + "'");
			}
		}
	};
	
	/**
	 * convert a simple parameter
	 * 
	 * @private
	 * @param {object} oSuiteSelectOptions object representing the suite SelectOptions entity
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @param {object} oContent representing the resulting internal format
	 */
	VariantConverterFrom.prototype._addSelectOptions = function(oSuiteSelectOptions, oFilterBar, oContent) {
		var i;
		var sName, aRanges;
		var oFilterMetaData, oControl;
	
		for (i = 0; i < oSuiteSelectOptions.length; i++) {
			sName = oSuiteSelectOptions[i].PropertyName;
			aRanges = oSuiteSelectOptions[i].Ranges;
	
			var oFilterItem = oFilterBar.determineFilterItemByName(sName);
			if (oFilterItem) {
				oFilterMetaData = this._getParameterMetaData(sName, oFilterBar);
				if (oFilterMetaData) {
					oControl = oFilterBar.determineControlByFilterItem(oFilterItem);
					this._addRangesAccordingMetaData(oContent, oFilterMetaData, aRanges, oControl);					
	
				} else {
					jQuery.sap.log.error("neither metadata nor custom information for filter '" + name + "'");
				}
			} else {
				jQuery.sap.log.warning("unknown filter '" + name + "'");
			}
		}
	};
	
	VariantConverterFrom.prototype._addRangesAccordingMetaData = function(oContent, oFilterMetaData, aRanges, oControl, sName) {
		var i, oItem, oObj;
	
		var fConvertOption = function(sSuiteOption, sValue) {
			var sInternalOperation = sSuiteOption;
			if (sSuiteOption === "CP") {
				sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains;
	
				if (sValue) {
					var nIndexOf = sValue.indexOf('*');
					var nLastIndex = sValue.lastIndexOf('*');
	
					if ((nIndexOf === 0) && (nLastIndex !== (sValue.length - 1))) {
						sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith;
						sValue = sValue.substring(1, sValue.length);
					} else if ((nIndexOf !== 0) && (nLastIndex === (sValue.length - 1))) {
						sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith;
						sValue = sValue.substring(0, sValue.length - 1);
					} else {
						sValue = sValue.substring(1, sValue.length - 1);
					}
				}
			}
	
			return {
				op: sInternalOperation,
				v: sValue
			};
		};
	
		if (aRanges && aRanges.length > 0) {
			if (oFilterMetaData.isCustomFilterField) {
				if (!oContent._CUSTOM) {
					oContent._CUSTOM = {};
				}
				oContent._CUSTOM[oFilterMetaData.fieldName] = aRanges[0].Low;
				return;
			}
	
			if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.single) {
				if (!aRanges[0].Low && oControl && (oControl instanceof DatePicker)) {
					oContent[oFilterMetaData.fieldName] = null;					
				} else {
					oContent[oFilterMetaData.fieldName] = aRanges[0].Low;
				}
	
			} else if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.interval) {
				if (aRanges[0].Low && aRanges[0].High) {
					oContent[oFilterMetaData.fieldName] = {
					         low: aRanges[0].Low, 					                                       
					         high: aRanges[0].High
					}; 
				} else if (aRanges[0].Low && !aRanges[0].High) {
					oContent[oFilterMetaData.fieldName] = {				                                      
					         low: aRanges[0].Low,
					         high: aRanges[0].Low
					};					
					
				} else if (!aRanges[0].Low && aRanges[0].High) {
					oContent[oFilterMetaData.fieldName] = {				                                      
					         low: aRanges[0].High,
					         high: aRanges[0].High
					};			
				} else {
					/* eslint-disable no-lonely-if */
					if (oControl && (oControl instanceof DateRangeSelection)) {
						oContent[oFilterMetaData.fieldName] = {				                                   
						                                       low: null,
						                                       high: null 
						                                       };
					} else {
						oContent[oFilterMetaData.fieldName] = {				                                      
						                                       low: aRanges[0].Low,
						                                       high: aRanges[0].High
															};
					}
					/* eslint-enable no-lonely-if */					
				}

	
			} else if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.multiple) {
	
				oContent[oFilterMetaData.fieldName] = {
					ranges: [],
					items: [],
					value: null
				};
								
				if (oControl && (oControl instanceof MultiComboBox)) {
					for (i = 0; i < aRanges.length; i++) {
						oObj = fConvertOption(aRanges[i].Option, aRanges[i].Low);

						if (oObj.op === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ) {
							oContent[oFilterMetaData.fieldName].items.push({
								key: oObj.v
							});
						}
					}
				} else {
					for (i = 0; i < aRanges.length; i++) {
						oObj = fConvertOption(aRanges[i].Option, aRanges[i].Low);
						oItem = {
							"exclude": (aRanges[i].Sign === "E"),
							"operation": oObj.op,
							"keyField": oFilterMetaData.fieldName,
							"value1": oObj.v,
							"value2": aRanges[i].High
						};

						oContent[oFilterMetaData.fieldName].ranges.push(oItem);
					}
				}
	
			} else {
	
				oContent[oFilterMetaData.fieldName] = {
					ranges: [],
					items: [],
					value: null
				};
				for (i = 0; i < aRanges.length; i++) {
					oObj = fConvertOption(aRanges[i].Option, aRanges[i].Low);
					oItem = {
						"exclude": (aRanges[i].Sign === "E"),
						"operation": oObj.op,
						"keyField": oFilterMetaData.fieldName,
						"value1": oObj.v,
						"value2": aRanges[i].High
					};
	
					oContent[oFilterMetaData.fieldName].ranges.push(oItem);
				}
			}
			jQuery.sap.log.warning("potential reduced information for filter '" + oFilterMetaData.fieldName + "'");
	
		} else {
			jQuery.sap.log.warning("no Ranges-section found for filter '" + oFilterMetaData.fieldName + "'");
		}
	};
	
	VariantConverterFrom.prototype._addAccordingMetaData = function(oContent, oFilterMetaData, sValue) {
	
		var aRanges = [
			{
				Sign: "I",
				Low: sValue,
				High: sValue,
				Option: "EQ"
			}
		];
		this._addRangesAccordingMetaData(oContent, oFilterMetaData, aRanges);

	};
	

	return VariantConverterFrom;

}, /* bExport= */ true);

}; // end of sap/ui/comp/filterbar/VariantConverterFrom.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.VariantConverterTo') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.filterbar.VariantConverterTo'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/VariantConverterTo",['jquery.sap.global', 'sap/ui/comp/smartfilterbar/ControlConfiguration', 'sap/ui/comp/valuehelpdialog/ValueHelpDialog'],
	function(jQuery, ControlConfiguration, ValueHelpDialog) {
	"use strict";


	/**
	 * Constructs a utility class to convert the filter bar variant from/to internal to suite format
	 * 
	 * @constructor
	 * @public
	 * @author Franz Mueller
	 */
	var VariantConverterTo = function() {
	};
	
	/**
	 * the current variant will be transformed to suite format
	 * 
	 * @public
	 * @param {string} sKey of the current variant
	 * @param {array} aFilters containing filter names
	 * @param {string} sData json string representing the filter values
	 * @param {object} oFilterBar instance of the filterbar object
	 * @returns {string} variant in the suite format as json string
	 */
	VariantConverterTo.prototype.convert = function(sKey, aFilters, sData, oFilterBar) {
	
		var aFields, i;
		var oJson, n = null;
	
		var oSuiteContent = {
			SelectionVariantID: sKey
		};
	
		if (sData && aFilters) {
			oJson = JSON.parse(sData);
			if (oJson) {
				aFields = this._getFields(aFilters);
				if (aFields && aFields.length > 0) {
					for (i = 0; i < aFields.length; i++) {
						this._convertField(oSuiteContent, aFields[i], oJson, oFilterBar);
					}
				}
	
				// CUSTOM FIELDS
				if (oJson._CUSTOM) {
					for (n in oJson._CUSTOM) {
						if (n) {
							this._addSingleValue(oSuiteContent, n, this._getValue(oJson._CUSTOM[n]));
						}
					}
				}
			}
		}
	
		return JSON.stringify(oSuiteContent);
	};
	
	/**
	 * retrieve the meta data for a given filter
	 * 
	 * @private
	 * @param {string} sName of the filter
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @returns {object} meta data of the filter; null otherwise
	 */
	VariantConverterTo.prototype._getParameterMetaData = function(sName, oFilterBar) {
		var i, j;
		var oGroup;
	
		var aFilterMetaData = oFilterBar.getFilterBarViewMetadata();
		if (aFilterMetaData) {
			for (i = 0; i < aFilterMetaData.length; i++) {
				oGroup = aFilterMetaData[i];
				for (j = 0; j < oGroup.fields.length; j++) {
					if (sName === oGroup.fields[j].fieldName) {
						return oGroup.fields[j];
					}
				}
			}
		}
	
		return null;
	};
	
	/**
	 * retrieve the array of relevant filters
	 * 
	 * @private
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @param {object} oContent json representing the values of the variant
	 * @param {object} oFilterBar representing the filterbar instance
	 */
	VariantConverterTo.prototype._convertField = function(oSuiteContent, sFilterName, oContent, oFilterBar) {
		var oObj, sValue;
		var oRanges;
		var oFilterMetaData;
	
		if (oContent && sFilterName && oSuiteContent) {
			oObj = oContent[sFilterName];
			if (oObj) {
	
				oFilterMetaData = this._getParameterMetaData(sFilterName, oFilterBar);
				if (oFilterMetaData) {
					if (oFilterMetaData.isCustomFilterField) {
						return; // custom fields will be handled separately
					}
	
					if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.single) {
						sValue = (oObj.value === undefined) ? oObj : oObj.value;
						this._addSingleValue(oSuiteContent, sFilterName, sValue);
					} else if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.interval) {
						oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
						this._addRangeLowHigh(oRanges, oObj);
					} else if (oFilterMetaData.filterRestriction === ControlConfiguration.FILTERTYPE.multiple) {
						oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
						if (oObj.items && oObj.items.length > 0) {
							this._addRangeMultipleSingleValues(oRanges, oObj.items);
						} else {
							this._addRangeSingleValue(oRanges, oObj.value);
						}
					} else {
						this._convertFieldByValue(oSuiteContent, sFilterName, oContent);
					}
				} else {
					this._convertFieldByValue(oSuiteContent, sFilterName, oContent);
				}
	
			}
		}
	};
	
	VariantConverterTo.prototype._convertFieldByValue = function(oSuiteContent, sFilterName, oContent) {
		var oObj;
		var oRanges;
	
		if (oContent && sFilterName && oSuiteContent) {
			oObj = oContent[sFilterName];
			if (oObj) {
	
				if ((oObj.ranges !== undefined) && (oObj.items !== undefined) && (oObj.value !== undefined)) {
	
					oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
	
					if (oObj.ranges && oObj.ranges.length > 0) {
						this._addRanges(oRanges, oObj.ranges);
					}
					if (oObj.items && oObj.items.length > 0) {
						this._addRangeMultipleSingleValues(oRanges, oObj.items);
					}
					if (oObj.value) { // date
						this._addRangeSingleValue(oRanges, oObj.value);
					}
	
				} else if ((oObj.items !== undefined) && oObj.items && (oObj.items.length > 0)) {
					oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
					this._addRangeMultipleSingleValues(oRanges, oObj.items);
				} else if ((oObj.low !== undefined) && oObj.low && (oObj.high !== undefined) && oObj.high) { // date
					oRanges = this._addRangeEntry(oSuiteContent, sFilterName);
					this._addRangeLowHigh(oRanges, oObj);
				} else if ((oObj.value !== undefined) && oObj.value) {
					this._addSingleValue(oSuiteContent, sFilterName, oObj.value);
				} else if (oObj) {
					this._addSingleValue(oSuiteContent, sFilterName, oObj);
				}
			}
		}
	};
	
	/**
	 * create a suite 'Ranges' object
	 * 
	 * @private
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @returns {object} representing the suite ranges segment
	 */
	VariantConverterTo.prototype._addRangeEntry = function(oSuiteContent, sFilterName) {
		var oObj = {
			PropertyName: sFilterName,
			Ranges: []
		};
		if (!oSuiteContent.SelectOptions) {
			oSuiteContent.SelectOptions = [];
		}
		oSuiteContent.SelectOptions.push(oObj);
	
		return oObj.Ranges;
	};
	
	/**
	 * convert ui5 to suite ranges
	 * 
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {array} aRanges containing the ranges
	 */
	VariantConverterTo.prototype._addRanges = function(oRanges, aRanges) {
	
		var sSign, sOption, sLow, sHigh;
		
		for (var i = 0; i < aRanges.length; i++) {
			sSign = aRanges[i].exclude ? "E" : "I";
			sLow = this._getValue(aRanges[i].value1);
			sHigh = this._getValue(aRanges[i].value2);
	
			if (aRanges[i].operation === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains) {
				sOption = "CP";
				if (sLow) {
					sLow = "*" + sLow + "*";
				}
			} else if (aRanges[i].operation === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith) {
				sOption = "CP";
				if (sLow) {
					sLow = sLow + "*";
				}
			} else if (aRanges[i].operation === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith) {
				sOption = "CP";
				if (sLow) {
					sLow = "*" + sLow;
				}
			} else {
				sOption = aRanges[i].operation;
			}
	
			oRanges.push({
				Sign: sSign,
				Option: sOption,
				Low: sLow,
				High: sHigh
			});
		}
	};
	
	/**
	 * convert ui5 to suite multiple single values
	 * 
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {array} aItems containing the ranges
	 */
	VariantConverterTo.prototype._addRangeMultipleSingleValues = function(oRanges, aItems) {
	
		for (var i = 0; i < aItems.length; i++) {
			oRanges.push({
				Sign: "I",
				Option: "EQ",
				Low: this._getValue(aItems[i].key),
				High: null
			});
		}
	};
	
	/**
	 * convert ui5 to suite between e.q. Date
	 * 
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {string} sValue of the filter
	 */
	VariantConverterTo.prototype._addRangeSingleValue = function(oRanges, sValue) {
	
		oRanges.push({
			Sign: "I",
			Option: "EQ",
			Low: this._getValue(sValue),
			High: null
		});
	};
	
	/**
	 * convert ui5 to suite between e.q. Date
	 * 
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {object} oLowHigh containing the ranges
	 */
	VariantConverterTo.prototype._addRangeLowHigh = function(oRanges, oLowHigh) {
	
		oRanges.push({
			Sign: "I",
			Option: "BT",
			Low: this._getValue(oLowHigh.low),
			High: this._getValue(oLowHigh.high)
		});
	};
	
	/**
	 * convert ui5 to suite between e.q. Date
	 * 
	 * @private
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @param {string} sValue of the filter
	 */
	VariantConverterTo.prototype._addSingleValue = function(oSuiteContent, sFilterName, sValue) {
	
		if (!oSuiteContent.Parameters) {
			oSuiteContent.Parameters = [];
		}
	
		oSuiteContent.Parameters.push({
			PropertyName: sFilterName,
			PropertyValue: sValue
		});
	};
	
	/**
	 * retrieve the array of relevant filters
	 * 
	 * @private
	 * @param {array} aFilters representing the filter items
	 * @returns {array} of strings; array of filter names
	 */
	VariantConverterTo.prototype._getFields = function(aFilters) {
	
		var aRelevantFilters = [];
	
		if (aFilters) {
			for (var i = 0; i < aFilters.length; i++) {
				aRelevantFilters.push(aFilters[i].name);
			}
		}
	
		return aRelevantFilters;
	};
	
	/**
	 * returns either the value
	 * 
	 * @private
	 * @param {object} oValue object
	 * @returns {object} stringified value
	 */
	VariantConverterTo.prototype._getValue = function(oValue) {
		if (oValue === null) {
			return null;
		}
	
		if (!oValue) {
			return oValue;
		}
	
		return "" + oValue;
	};
	

	return VariantConverterTo;

}, /* bExport= */ true);

}; // end of sap/ui/comp/filterbar/VariantConverterTo.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorModelConverter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorModelConverter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorModelConverter",['jquery.sap.global', './MetadataAnalyser'],
	function(jQuery, MetadataAnalyser) {
	"use strict";


	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 * 
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oDataModel - odata model
	 * @public
	 * @author Markus Viol
	 */
	var FieldSelectorModelConverter = function(oDataModel) {

		this._oMetadataAnalyzer = new MetadataAnalyser(oDataModel);
		this._aEntityTypes = [];
	};
	
	/**
	 * Returns the OData MetaData Analyzer
	 * 
	 * @returns {sap.ui.comp.odata.MetadataAnalyser} - metadata analyzer instance
	 * @public
	 * @name FieldSelectorModelConverter#getMetaDataAnalyzer
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getMetaDataAnalyzer = function() {

		return this._oMetadataAnalyzer;
	};
	
	/**
	 * Returns the converted inner model for the FieldSelector control
	 * 
	 * @param {string/array} vEntityType - entity type
	 * @param {Array} aIgnoredFields - List of fields which should be ignored.
	 * @returns {object} Internal json map
	 * @public
	 * @name FieldSelectorModelConverter#getConvertedModel
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getConvertedModel = function(vEntityType, aIgnoredFields) {

		var oConvertedData = {};
		this._aEntityTypes = this._getEntityTypes(vEntityType);
		for (var e = 0; e < this._aEntityTypes.length; e++) {
			var aFields = this._oMetadataAnalyzer.getFieldsByEntityTypeName(this._aEntityTypes[e].key);
			if (aFields) {
				oConvertedData[this._aEntityTypes[e].key] = this._updateAndFilterFields(aFields, aIgnoredFields);
			}
		}
	
		return oConvertedData;
	};
	
	/**
	 * Returns the entity type name and labels as an array of map
	 * 
	 * @returns {array} - object of label and EntityType name
	 * @private
	 * @name FieldSelectorModelConverter#getEntitySets
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getEntityTypes = function() {

		return this._aEntityTypes;
	};
	
	/**
	 * @param {array} aFields - fields array
	 * @param {Array} aIgnoredFields - List of fields which should be ignored.
	 * @returns {array} - object of fields which are visible
	 * @private
	 * @name FieldSelectorModelConverter#_updateAndFilterFields
	 * @function
	 */
	FieldSelectorModelConverter.prototype._updateAndFilterFields = function(aFields, aIgnoredFields) {

		var aValidFields = [];
		for (var f = 0; f < aFields.length; f++) {
			var oCurrentField = aFields[f];
			if (oCurrentField.visible === false) {
				continue;
			}
			// TODO: check if the label is overridden in an annotation
	
			// only add fields which are not in ignored list
			var bIsFieldOnIgnoreList = this._isFieldOnIgnoreList(oCurrentField, aIgnoredFields);
			var bIsFieldBlacklisted = this._isFieldBlacklisted(oCurrentField);
			if (!bIsFieldOnIgnoreList && !bIsFieldBlacklisted) {
				aValidFields.push(oCurrentField);
			//} else {
			//	console.log("Property:" + oCurrentField.name + " - " + oCurrentField.type);
			}
		}
		return aValidFields;
	};
	
	/**
	 * Check if a odata property is on the list of ignored fields
	 * 
	 * @param {Object} oCurrentField Current property on entityset
	 * @param {Array} aIgnoredFields List of ignored fields
	 * @returns {Boolean} Returns true if field was found on ignore list else false
	 */
	FieldSelectorModelConverter.prototype._isFieldOnIgnoreList = function(oCurrentField, aIgnoredFields) {
		if (aIgnoredFields) {
			var numberOfEntitySets = this._aEntityTypes.length;
			var sQualifiedName = oCurrentField.entityName + "." + oCurrentField.name;
			// If number of entity sets is only one, then full qualified name or shortname is possible
			if (numberOfEntitySets === 1) {
				if (aIgnoredFields.indexOf(oCurrentField.name) !== -1 || aIgnoredFields.indexOf(sQualifiedName) !== -1) {
					return true;
				}
			// else only full qualified name is valid
			} else if (aIgnoredFields.indexOf(sQualifiedName) !== -1) {
					return true;
			}
		}
		return false;
	};
	
	/**
	 * Check if odata property matches specific checks which identify the field as non-listable
	 * 
	 * @param {object} oCurrentField Current property of entity set
	 * @returns {Boolean} Returns true if field is blacklisted and false if field can be added to list.
	 */
	FieldSelectorModelConverter.prototype._isFieldBlacklisted = function(oCurrentField) {
		if (oCurrentField) {
			if (oCurrentField.name.toLowerCase().indexOf("uxfc") === 0) {
				return true;
			} else if (oCurrentField.type.toLowerCase() === "edm.time") {
				return true;
			}
		}
		return false;
	};
	
	/**
	 * @param {string/array} vEntityTypes - entity types
	 * @param {string} sAnnotation - annotation
	 * @returns {array} - object of label and EntityType name of the entitySet
	 * @private
	 * @name FieldSelectorModelConverter#_getEntitySets
	 * @function
	 */
	FieldSelectorModelConverter.prototype._getEntityTypes = function(vEntityTypes, sAnnotation) {

		var aEntityTypes = [];
		var sLabel;
		var aEntityTypeNames;
	
		if (!this._oMetadataAnalyzer || !this._oMetadataAnalyzer._oSchemaDefinition) {
			return [];
		}
	
		var aAllEntityTypList = this._oMetadataAnalyzer._oSchemaDefinition.entityType;
		// TODO:
		// if (sAnnotation) {
		// aEntityTypeNames = this._oMetadataAnalyzer.getEntityTypeNameByAnnotation(sAnnotation);
		// }
		if (!vEntityTypes) {
			aEntityTypeNames = [];
			for (var t = 0; t < aAllEntityTypList.length; t++) {
				aEntityTypeNames.push(aAllEntityTypList[t].name);
			}
		}
		if (!aEntityTypeNames) {
			aEntityTypeNames = this._convertEntityTypesToArray(vEntityTypes);
		}
	
		for (var e = 0; e < aEntityTypeNames.length; e++) {
			sLabel = this._oMetadataAnalyzer.getEntityLabelByEntityTypeName(aEntityTypeNames[e]);
			aEntityTypes.push({
				key: aEntityTypeNames[e],
				label: sLabel || aEntityTypeNames[e]
			});
		}
	
		return aEntityTypes;
	};
	
	/**
	 * @param {string/array} vEntityTypes - entity types
	 * @returns {array} - entity types
	 * @private
	 * @name sap.ui.comp.odata.FieldSelector#_convertEntityTypesToArray
	 * @function
	 */
	FieldSelectorModelConverter.prototype._convertEntityTypesToArray = function(vEntityTypes) {

		if (typeof (vEntityTypes) === "string") {
			var sRawString = vEntityTypes.replace(/ /g, '');
			return sRawString.split(',');
		}
	
		if (jQuery.isArray(vEntityTypes)) {
			return vEntityTypes;
		}
	
		return undefined;
	};
	
	/**
	 * Destroys the inner references
	 * 
	 * @public
	 * @name sap.ui.comp.odata.FieldSelector#destroy
	 * @function
	 */
	FieldSelectorModelConverter.prototype.destroy = function() {

		if (this._oMetadataAnalyzer && this._oMetadataAnalyzer.destroy) {
			this._oMetadataAnalyzer.destroy();
		}
		this._oMetadataAnalyzer = null;
		this._aEntityTypes = null;
	};
	

	return FieldSelectorModelConverter;

}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelectorModelConverter.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.BaseController') ) {
/* eslint-disable strict */

/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP SE. All rights reserved
 */

// Provides BaseController
jQuery.sap.declare('sap.ui.comp.personalization.BaseController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/BaseController",['jquery.sap.global', 'sap/m/P13nItem', 'sap/ui/base/ManagedObject', './Util', 'sap/ui/table/Table'],
	function(jQuery, P13nItem, ManagedObject, Util, Table) {
	"use strict";


	/**
	 * The BaseController is a base class for personalization Controller like e.g. FilterController, SortController etc. *
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class An abstract class for personalization Controllers.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.25.0-SNAPSHOT *
	 * @constructor
	 * @public
	 * @since 1.28.0
	 * @alias sap.ui.comp.personalization.BaseController
	 */
	var BaseController = ManagedObject.extend("sap.ui.comp.personalization.BaseController",
	/** @lends sap.ui.comp.personalization.BaseController */
	{
		metadata: {
			"abstract": true,
			publicMethods: [
				"getPanel"
			],
			library: "sap.ui.comp",
			properties: {
				/**
				 * Controller type for generic use
				 * 
				 * @since 1.28.0
				 */
				type: {
					type: "sap.m.P13nPanelType",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * Controller model. Each controller has its own name space as part of the entire model.
				 * 
				 * @since 1.28.0
				 */
				model: {
					type: "sap.ui.model.json.JSONModel",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * @since 1.28.0
				 */
				persistentDataRestore: {
					type: "object",
					group: "Misc",
					defaultValue: null,
					visibility: "hidden"
				}
			},
			associations: {
				/**
				 * Table for which settings are applied.
				 * 
				 * @since 1.28.0
				 */
				table: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {
				/**
				 * Event is raised before potential change on table will be applied
				 * 
				 * @since 1.28.0
				 */
				beforePotentialTableChange: {},
				/**
				 * Event is raised after potential change on table has be applied
				 * 
				 * @since 1.28.0
				 */
				afterPotentialTableChange: {}
			}
		}
	});
	
	/**
	 * Initialization hook.
	 * 
	 * @private
	 */
	BaseController.prototype.init = function() {
	};
	
	/**
	 * Load data - used for lazy loading
	 * 
	 * @protected
	 * @returns {function} to set the model data
	 */
	BaseController.prototype.setModelFunction = function() {
		var that = this;
		var fn = function() {
			if (!this.getModel()) {
				this.setModel(that.getModel());
			}
		};
		return fn;
	};
	
	/**
	 * Getter for association <code>table</code>
	 * 
	 * @returns {object} that represents sap.m.Table || sap.ui.table.Table
	 * @protected
	 */
	BaseController.prototype.getTable = function() {
		var oTable = this.getAssociation("table");
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}
		return oTable;
	};
	
	/**
	 * Creates persistent object
	 * 
	 * @param {array} aItems is a list of items that will be placed in the new created persistent structure
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.createPersistentStructure = function(aItems) {
		aItems = aItems || [];
		var oPersistentData = {};
		oPersistentData[this.getType()] = {};
		oPersistentData[this.getType()][this.getType() + "Items"] = aItems;
		return oPersistentData;
	};
	
	/**
	 * Getter of persistent data object
	 * 
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getPersistentData = function() {
		var oData = this.getModel().getData();
		var oPersistentData = {};
		if (!oData.persistentData[this.getType()]) {
			oPersistentData = this.createPersistentStructure();
		} else {
			oPersistentData[this.getType()] = oData.persistentData[this.getType()];
		}
		return oPersistentData;
	};
	
	/**
	 * Setter of persistent data object *
	 * 
	 * @param {object} oDataNew contains the new data that will be set into model persistentData
	 * @protected
	 */
	BaseController.prototype.setPersistentData = function(oDataNew) {
		var oData = this.getModel().getData();
		oData.persistentData[this.getType()] = oDataNew[this.getType()];
	};
	
	/**
	 * Getter of persistent items data object
	 * 
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getPersistentDataItems = function() {
		return this.getPersistentData()[this.getType()][this.getType() + "Items"];
	};
	
	/**
	 * Setter of persistent items data object
	 * 
	 * @param {array} aItems is an array that contains the new items that will be set into model persistentData
	 * @protected
	 */
	BaseController.prototype.setPersistentDataItems = function(aItems) {
		this.setPersistentData(this.createPersistentStructure(aItems));
	};
	
	/**
	 * Getter of transient data object
	 * 
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getTransientData = function() {
		var oData = this.getModel().getData();
		var oTransientData = {};
		if (!oData.transientData[this.getType()]) {
			oTransientData[this.getType()] = {};
			oTransientData[this.getType()].title = this.getTitleText();
			oTransientData[this.getType()].items = [];
		} else {
			oTransientData[this.getType()] = oData.transientData[this.getType()];
		}
		return oTransientData;
	};
	
	/**
	 * Setter of transient data object
	 * 
	 * @param {object} oDataNew contains the new data that will be set into model transientData
	 * @protected
	 */
	BaseController.prototype.setTransientData = function(oDataNew) {
		var oData = this.getModel().getData();
		oData.transientData[this.getType()] = oDataNew[this.getType()];
	};
	
	/**
	 * Initialization of model
	 * 
	 * @param {object} oModel of type sap.ui.model.json.JSONModel that will be used for initialization
	 * @public
	 */
	BaseController.prototype.initializeModel = function(oModel) {
		this.setModel(oModel);
		this.setTransientData(this.getTransientData());
		this.setPersistentData(this.getPersistentData());
	};
	
	BaseController.prototype.createTableRestoreJson = function() {
		// TODO: this is not correct but the best we can do - problem is that the order in which we sort is not extractable from the table instance.
		// Consider to log error if more that one sort criteria
		this.setPersistentDataRestore(this._getTable2Json());
	};
	
	BaseController.prototype.getTableRestoreJson = function() {
		return Util.copy(this.getPersistentDataRestore());
	};
	
	/**
	 * only keep a columnItem if key is available in table
	 */
	BaseController.prototype.reducePersistentModel = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return;
		}
	
		var aColumns = oTable.getColumns();
		var aItemsReduced = [];
		this.getPersistentDataItems().forEach(function(oItem) {
			var oColumn = Util.getColumn(oItem.columnKey, aColumns);
			if (oColumn) {
				aItemsReduced.push(oItem);
			}
		});
		this.setPersistentDataItems(aItemsReduced);
	};
	
	/**
	 * this method will make a complete json snapshot of the current table instance ("original") from the perspective of the columns controller; the json
	 * snapshot can later be applied to any table instance to recover all columns related infos of the "original" table TODO: This really only works for
	 * when max 1 sort criteria is defined since otherwise potentially order of sort criteria is destroyed
	 */
	BaseController.prototype._getTable2Json = function() {
	
	};
	
	BaseController.prototype.syncTable2PersistentModel = function() {
		// first put table representation into persistentData - full json representation
		// NOTE: This really only works for when max 1 sort criteria is defined since otherwise potentially order of sort
		// criteria is destroyed
		this.setPersistentData(this._getTable2Json());
	
		// NOTE: we leave persistentData in this form though for persistence we have too much data (compared to what we need to persist); reason is that
		// we wish to expose this data in the UI.
	};
	
	BaseController.prototype.syncTable2TransientModel = function() {
	};
	
	BaseController.prototype.getPanel = function() {
	};
	
	/**
	 * hook to apply made changes. The "oPayload" object can be used by subclasses.
	 * 
	 * @param {object} oPayload is an object that contains additional data, which can be filled by the connected panels  
	 * @public
	 * @name BaseController#onAfterSubmit
	 * @function
	 */
	BaseController.prototype.onAfterSubmit = function(oPayload) {
		this.syncJsonModel2Table(this.getModel().getData().persistentData);
	};

	/**
	 * This method is called from Controller after Reset button was executed. This method is a base
	 * implementation and it is optional to re-implement it in the specific sub-controller
	 * 
	 * @param {object} oPayload is an object that contains additional data, which can be filled by the connected panels 
	 * @public
	 * @name BaseController#onAfterReset
	 * @function
	 */
	BaseController.prototype.onAfterReset = function(oPayload) {
	};
	
	BaseController.prototype.syncJsonModel2Table = function(oJsonModel) {
	};
	
	/**
	 * Operations on sorting are processed sometime directly at the table and sometime not. In case that something has been changed via Personalization
	 * Dialog the consumer of the Personalization Dialog has to apply sorting at the table. In case that sorting has been changed via user interaction at
	 * table, the change is instantly applied at the table.
	 * 
	 * @param {object} oPersistentDataBase JSON object
	 * @param {object} oPersistentDataCompare JSON object 
	 */
	BaseController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
	};
	
	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataBase JSON object.
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted 
	 */
	BaseController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
	};
	
	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if sortItems is []
	 *        then it means that all sortItems have been deleted
	 */
	BaseController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
	};
	
	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	BaseController.prototype.exit = function() {
	};
	
	/* eslint-enable strict */
	

	return BaseController;

}, /* bExport= */ true);

}; // end of sap/ui/comp/personalization/BaseController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.ColumnsController') ) {
/* eslint-disable strict */

/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP SE. All rights reserved
 */

// Provides ColumnsController
jQuery.sap.declare('sap.ui.comp.personalization.ColumnsController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nColumnsPanel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/ColumnsController",[
	'jquery.sap.global', 'sap/m/P13nColumnsPanel', './BaseController'
], function(jQuery, P13nColumnsPanel, BaseController) {
	"use strict";

	// TODO: wenn an dem Column "Freeze" gesetzt wurde, sollte die Spalte nicht mehr verschoben werden können in dem
	// ColumnsPanel

	/**
	 * The ColumnsController can be used to...
	 * 
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP SE
	 * @version 1.28.1
	 * @since 1.26.0
	 * @alias sap.ui.comp.ColumnsController
	 */
	var ColumnsController = BaseController.extend("sap.ui.comp.personalization.ColumnsController", /** @lends sap.ui.comp.personalization.ColumnsController */

	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.columns);
		},
		metadata: {
			/**
			 * Event is raised after columns data has been changed in data model
			 * 
			 * @since 1.26.0
			 */
			events: {
				afterColumnsModelDataChange: {}
			}
		}
	});

	/**
	 * Creates the model part for columns
	 * 
	 * @param {object} oTable is the instance that will be used inside the ColumnsController/ColumnsPanel
	 * @public
	 * @name ColumnsController#createModelDataFromTable
	 * @function
	 */
	ColumnsController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (oTable instanceof sap.ui.table.Table) {
			oTable.detachColumnMove(this._onColumnMove, this);
			oTable.detachColumnVisibility(this._onColumnVisibility, this);
			oTable.detachColumnResize(this._onColumnResize, this);
			oTable.attachColumnMove(this._onColumnMove, this);
			oTable.attachColumnVisibility(this._onColumnVisibility, this);
			oTable.attachColumnResize(this._onColumnResize, this);
		}

		// TODO: $ investigate this to avoid changing the transientData by e.g. variantChange
		// this._syncTable2TransientModel();
	};

	ColumnsController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_COLUMNS");
	};

	/**
	 * Overwrite BaseController method in order to handle the reduction of persistent model data in a different way.
	 */
	ColumnsController.prototype.reducePersistentModel = function() {
		this.syncTable2PersistentModel();
	};

	/**
	 * This method will make a complete JSON snapshot of the current table instance ("original") from the perspective of the columns controller; the
	 * JSON snapshot can later be applied to any table instance to recover all columns related infos of the "original" table
	 * 
	 * @returns {objects} JSON objects with meta data from existing table columns
	 */
	ColumnsController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		if (oTable) {
			oTable.getColumns().forEach(function(oColumn, iIndex) {
				oJsonData.columns.columnsItems.push({
					columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
					index: (oColumn.getOrder ? oColumn.getOrder() : iIndex),
					visible: oColumn.getVisible(),
					width: oColumn.getWidth()
				});
			}, this);
		}

		return oJsonData;
	};

	ColumnsController.prototype.syncTable2PersistentModel = function() {

		// first put table representation into persistentData - full json representation
		BaseController.prototype.syncTable2PersistentModel.apply(this, arguments);

		// now reduce persistentData by subtracting the restoreJson from the full json representation
		var oData = this.getModel().getData();
		var oDelta = this.getChangeData(oData.persistentData, this.getTableRestoreJson());

		if (oDelta) {
			oData.persistentData.columns = oDelta.columns;
		} else {
			oData.persistentData.columns.columnsItems = [];
		}
	};

	ColumnsController.prototype.syncTable2TransientModel = function() {
		// this.getModel().getData().transientData.columns.items = jQuery.extend(true, [], this._aInitialTransientItems);
		// TODO: see ($)
		this._syncTable2TransientModel();
	};

	ColumnsController.prototype._syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];

		if (oTable) {
			if (oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.getColumnKey(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text(),
							visible: oColumn.getVisible(),
							width: oColumn.getWidth()
						});
					}
				}, this);
			} else {
				if (oTable instanceof sap.m.Table) {
					var aColumns = oTable.getColumns();
					aColumns.sort(function(a, b) {
						var iIndexA = a.getOrder();
						var iIndexB = b.getOrder();
						if (iIndexA < iIndexB) {
							return -1;
						}
						if (iIndexA > iIndexB) {
							return 1;
						}
						return 0;
					});
					aColumns.forEach(function(oColumn) {
						if (sap.ui.comp.personalization.Util.getColumnKey(oColumn)) {
							aItems.push({
								columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
								text: oColumn.getHeader().getText(),
								tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text(),
								visible: oColumn.getVisible(),
								width: oColumn.getWidth()
							});
						}
					});
				}
			}
		}

		// check if Items was changed at all and take over if it was changed
		var aItemsBefore = this.getModel().getData().transientData.columns.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel().getData().transientData.columns.items = aItems;
		}

		// TODO: see ($)
		// this._aInitialTransientItems = jQuery.extend(true, [], this.getModel().getData().transientData.columns.items);
	};

	/**
	 * Set index into existing columnsItem. If it does not exist create new columnsItem with new index
	 * 
	 * @param {object} oData is the JSON based model data wherein the index shall be manipulated
	 * @param {object} oColumn is the table column
	 * @param {integer} iNewIndex is the index value that shall be set
	 * @private
	 */
	ColumnsController.prototype._setNewColumnItemIndex = function(oData, oColumn, iNewIndex) {
		var iColumnsItemIndex = -1;

		if (oColumn && iNewIndex !== null && iNewIndex !== undefined && iNewIndex > -1) {
			iColumnsItemIndex = sap.ui.comp.personalization.Util.getIndexByKey(oData.persistentData.columns.columnsItems, sap.ui.comp.personalization.Util.getColumnKey(oColumn));
			if (iColumnsItemIndex > -1) {
				oData.persistentData.columns.columnsItems[iColumnsItemIndex].index = iNewIndex;
			} else {
				oData.persistentData.columns.columnsItems.push({
					columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
					index: iNewIndex
				});
			}
		}
	};

	/**
	 * Callback method for table event: ColumnMove
	 * 
	 * @param {object} oEvent that contains all information about that column move
	 * @private
	 * @name ColumnsController#_onColumnMove
	 * @function
	 */
	ColumnsController.prototype._onColumnMove = function(oEvent) {

		var i = 0, iNewIndex = null, oTempColumn = null;
		var oTable = null, oData = null, oColumn = null;
		var iNewColumnIndex = null, iOldColumnIndex = null;

		// get new columns information, like new index and the columns that was moved
		oColumn = oEvent.getParameter("column");
		iNewColumnIndex = oEvent.getParameter("newPos");

		this.fireBeforePotentialTableChange();

		// calculate "old" columns information
		if (oColumn) {
			oTable = this.getTable();
			iOldColumnIndex = oTable.indexOfColumn(oColumn);
		}

		// change index property in model data of columnsItems
		if (iOldColumnIndex !== null && iNewColumnIndex !== null) {
			oData = this.getModel().getData();

			if (iOldColumnIndex > iNewColumnIndex) {
				for (i = iNewColumnIndex; i <= iOldColumnIndex; i++) {
					if (i < iOldColumnIndex) {
						oTempColumn = oTable.getColumns()[i];
						iNewIndex = i + 1;
					} else {
						oTempColumn = oColumn;
						iNewIndex = oEvent.getParameter("newPos");
					}
					this._setNewColumnItemIndex(oData, oTempColumn, iNewIndex);
				}
			} else {
				for (i = iOldColumnIndex; i <= iNewColumnIndex; i++) {
					if (i === iOldColumnIndex) {
						oTempColumn = oColumn;
						iNewIndex = oEvent.getParameter("newPos");
					} else {
						oTempColumn = oTable.getColumns()[i];
						iNewIndex = i - 1;
					}
					this._setNewColumnItemIndex(oData, oTempColumn, iNewIndex);
				}
			}

			this.getModel().setData(oData, true);

			this.fireAfterPotentialTableChange();

			this.fireAfterColumnsModelDataChange();
		}
	};

	/**
	 * Callback method for table event: ColumnVisibility
	 * 
	 * @param {object} oEvent that contains all information about that column visibility
	 * @private
	 * @name ColumnsController#_onColumnVisibility
	 * @function
	 */
	ColumnsController.prototype._onColumnVisibility = function(oEvent) {
		var oData = this.getModel().getData();
		var oColumn = oEvent.getParameter("column");
		var bVisible = oEvent.getParameter("newVisible");

		this.fireBeforePotentialTableChange();

		var iIndex = sap.ui.comp.personalization.Util.getIndexByKey(oData.persistentData.columns.columnsItems, sap.ui.comp.personalization.Util.getColumnKey(oColumn));
		if (iIndex > -1) {
			oData.persistentData.columns.columnsItems[iIndex].visible = bVisible;
		} else {
			oData.persistentData.columns.columnsItems.push({
				columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
				visible: bVisible
			});
		}
		this.getModel().setData(oData, true);

		this.fireAfterPotentialTableChange();

		this.fireAfterColumnsModelDataChange();
	};

	ColumnsController.prototype._onColumnResize = function(oEvent) {
		var oColumn = oEvent.getParameter("column");
		var oData = this.getModel().getData();

		this.fireBeforePotentialTableChange();

		var iIndex = sap.ui.comp.personalization.Util.getIndexByKey(oData.persistentData.columns.columnsItems, sap.ui.comp.personalization.Util.getColumnKey(oColumn));
		if (iIndex > -1) {
			oData.persistentData.columns.columnsItems[iIndex].width = oEvent.getParameter("width");
		} else {
			oData.persistentData.columns.columnsItems.push({
				columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
				width: oEvent.getParameter("width")
			});
		}
		this.getModel().setData(oData, true);

		this.fireAfterPotentialTableChange();

		this.fireAfterColumnsModelDataChange();
	};

	/**
	 * Returns a ColumnsPanel control
	 * 
	 * @public
	 * @name ColumnsController#getPanel
	 * @function
	 * @returns {sap.m.P13nColumnsPanel} returns a new created ColumnsPanel
	 */
	ColumnsController.prototype.getPanel = function(oPayload) {
		var that = this;
		var iVisibleItemsThreshold = -1;
		if (oPayload && oPayload.visibleItemsThreshold) {
			iVisibleItemsThreshold = oPayload.visibleItemsThreshold;
		}
		var oPanel = new P13nColumnsPanel({
			title: this.getTitleText(),
			type: sap.m.P13nPanelType.columns,
			visibleItemsThreshold: iVisibleItemsThreshold,
			items: {
				path: '/transientData/columns/items',
				template: new sap.m.P13nItem({
					columnKey: "{columnKey}",
					text: '{text}',
					visible: '{visible}',
					tooltip: '{tooltip}',
					width: "{width}"
				})
			},
			columnsItems: {
				path: "/persistentData/columns/columnsItems",
				template: new sap.m.P13nColumnsItem({
					columnKey: "{columnKey}",
					index: "{index}",
					visible: "{visible}",
					width: "{width}"
				})
			},
			beforeNavigationTo: that.setModelFunction(that.getModel())
		});

		oPanel.attachChangeColumnsItems(function(oEvent) {
			var oData = this.getModel().getData();
			var aNewColumnsItems = oEvent.getParameter('newItems');
			var aExistingColumnsItems = oEvent.getParameter('existingItems');
			var oColumnsItem = null, sColumnKey = null;

			if (aNewColumnsItems) {
				aNewColumnsItems.forEach(function(oNewColumnsItem) {
					oColumnsItem = {
						columnKey: oNewColumnsItem.getColumnKey()
					};
					if (oNewColumnsItem.getIndex() !== undefined) {
						oColumnsItem.index = oNewColumnsItem.getIndex();
					}
					if (oNewColumnsItem.getVisible() !== undefined) {
						oColumnsItem.visible = oNewColumnsItem.getVisible();
					}
					if (oNewColumnsItem.getWidth() !== undefined) {
						oColumnsItem.width = oNewColumnsItem.getWidth();
					}
					oData.persistentData.columns.columnsItems.push(oColumnsItem);
				});
			}

			if (aExistingColumnsItems) {
				aExistingColumnsItems.forEach(function(oExistingColumnsItem) {
					oColumnsItem = null;
					sColumnKey = oExistingColumnsItem.getColumnKey();
					oColumnsItem = sap.ui.comp.personalization.Util.getArrayElementByKey("columnKey", sColumnKey, oData.persistentData.columns.columnsItems);
					if (oColumnsItem) {
						if (oExistingColumnsItem.getIndex() !== undefined) {
							oColumnsItem.index = oExistingColumnsItem.getIndex();
						}
						if (oExistingColumnsItem.getVisible() !== undefined) {
							oColumnsItem.visible = oExistingColumnsItem.getVisible();
						}
						if (oExistingColumnsItem.getWidth() !== undefined) {
							oColumnsItem.width = oExistingColumnsItem.getWidth();
						}
					}
				});
			}

		}, this);

		oPanel.attachSetData(function() {
			var oData = this.getModel().getData();
			this.getModel().setData(oData);
		}, this);

		this._correctColumnsItemsInPersistentData();
		return oPanel;
	};

	/**
	 * This method is a callback from main-controller after Reset button was executed.
	 * 
	 * @param {object} oPayload that contains additional information from the panel
	 * @public
	 * @name ColumnsController#onAfterReset
	 * @function
	 */
	ColumnsController.prototype.onAfterReset = function(oPayload) {
		var oPanel = null;
		if (oPayload && oPayload.columns && oPayload.columns.oPanel) {
			oPanel = oPayload.columns.oPanel;
			oPanel.reInitialize();
		}
	};

	/**
	 * This method is a callback from main-controller after Ok button was executed.
	 * 
	 * @param {object} oPayload that contains additional information from the panel 
	 * @public
	 * @name ColumnsController#onAfterSubmit
	 * @function
	 */
	ColumnsController.prototype.onAfterSubmit = function(oPayload) {
		this._correctColumnsItemsInPersistentData(oPayload);
		BaseController.prototype.onAfterSubmit.apply(this, arguments);
	};

	ColumnsController.prototype._correctColumnsItemsInPersistentData = function(oPayload) {
		this._removeIndexFromInvisibleColumnsItems();
		this._removeEmptyColumnsItems();
		if (oPayload) {
			this._correctColumnsItemIndexesBasedOnPayload(oPayload);
		}
	};

	/**
	 * This method recalculates indexes of all that columnsItems, which exist in payload -> selectedItems
	 * 
	 * @private
	 * @name ColumnsController#_correctColumnsItemIndexesBasedOnPayload
	 * @function
	 * @param {object} oPayload is an object that contains additional columnsPanel data, like list of selected items
	 */
	ColumnsController.prototype._correctColumnsItemIndexesBasedOnPayload = function(oPayload) {
		var aColumnsItems = this.getModel().getData().persistentData.columns.columnsItems;
		var oColumnsItem = null, iIndex = null, sColumnKey = null, iRunningTableIndex = -1;

		if (aColumnsItems && aColumnsItems.length > 0) {
			if (oPayload && oPayload.columns && oPayload.columns.tableItemsChanged) {

				oPayload.columns.selectedItems.forEach(function(oSelectedItem, iSelectedItemIndex) {
					iIndex = oColumnsItem = null;

					sColumnKey = oSelectedItem.columnKey;
					oColumnsItem = sap.ui.comp.personalization.Util.getArrayElementByKey("columnKey", sColumnKey, aColumnsItems);
					if (oColumnsItem && oColumnsItem.index !== undefined && oColumnsItem.index !== null) {
						iIndex = oColumnsItem.index;
					}
					if (iIndex === null || iIndex === undefined) {
						iIndex = iSelectedItemIndex;
					}

					/*
					 * Now consider special cases for indexes from existing columnsItems -> adapt iIndex
					 */

					// 1.) iIndex is lower than actual running sequence index -> increase the index to next higher index
					if (iIndex <= iRunningTableIndex) {
						iIndex = iRunningTableIndex + 1;
					}

					// 2.) iIndex is more than one sequence step away from actual running table index -> remove the gap
					if (Math.abs(iIndex - iRunningTableIndex) > 1) {
						iIndex = iRunningTableIndex + 1;
					}

					// write back new calculated index property value into actual columnsItem
					if (oColumnsItem) {
						oColumnsItem.index = iIndex;
					} else {
						oColumnsItem = {
							"columnKey": sColumnKey,
							"index": iIndex
						};
						aColumnsItems.push(oColumnsItem);
					}

					iRunningTableIndex = iIndex;
				});
			}
		}
	};

	/**
	 * This method removes all columnsItems that have no useful fill properties
	 * 
	 * @private
	 * @name ColumnsController#_removeEmptyColumnsItems
	 * @function
	 */
	ColumnsController.prototype._removeEmptyColumnsItems = function() {
		var aColumnsItems = this.getModel().getData().persistentData.columns.columnsItems;
		var i = 0, iLength = 0, oColumnsItem = null;

		if (aColumnsItems && aColumnsItems.length) {
			iLength = aColumnsItems.length;
			for (i = 0; i < iLength; i++) {
				oColumnsItem = aColumnsItems[i];
				if (oColumnsItem) {
					if (oColumnsItem.index !== null && oColumnsItem.index !== undefined) {
						continue;
					}
					if (oColumnsItem.visible !== null && oColumnsItem.visible !== undefined) {
						continue;
					}
					if (oColumnsItem.width !== null && oColumnsItem.width !== undefined) {
						continue;
					}
					aColumnsItems.splice(i, 1);
					i -= 1;
				}
			}
		}
	};

	/**
	 * This method removes the index property of columnsItems in persistent model data. If a columnsItem does contain an index property but the same
	 * item is not visible (visible = false) the index property will be removed. As result such a column will be rearranged in the alphabetical sorted
	 * columns list at he end of unselected columns inside the P13nColumnsPanel. But attention: for all following columnsItems if they contains an
	 * index property -> this has to be corrected by the same number as columnsItems have been corrected!!
	 * 
	 * @private
	 * @name ColumnsController#_correctPersistentData
	 * @function
	 */
	ColumnsController.prototype._removeIndexFromInvisibleColumnsItems = function() {
		var aColumnsItems = null, aItems = null, oItem = null, iIndexReduceFactor = 0;
		var oPersistentData = this.getModel().getData().persistentData;
		var oTransientData = this.getModel().getData().transientData;
		var bVisible = null;

		if (oPersistentData && oPersistentData.columns && oPersistentData.columns.columnsItems) {
			aColumnsItems = oPersistentData.columns.columnsItems;
			this._sortArrayByPropertyName(aColumnsItems, "index");
		}

		if (oTransientData && oTransientData.columns && oTransientData.columns.items) {
			aItems = oTransientData.columns.items;
		}

		if (aColumnsItems && aColumnsItems.length) {
			aColumnsItems.forEach(function(oColumnsItem) {
				oItem = bVisible = null;

				if (oColumnsItem.index !== undefined) {
					bVisible = oColumnsItem.visible;
					if (bVisible === undefined || bVisible === null) {
						oItem = sap.ui.comp.personalization.Util.getArrayElementByKey("columnKey", oColumnsItem.columnKey, aItems);
						if (oItem && oItem.visible !== undefined) {
							bVisible = oItem.visible;
						}
					}

					if (bVisible === false) {
						// if visible property of current columnsItem is FALSE & it contains an index property -> remove this index
						// property AND increase the indexReduceFactor
						delete oColumnsItem.index;
						iIndexReduceFactor += 1;
					} else {
						// But if visible property of current columnsItem is TRUE -> correct the index property according the
						// indexReduceFactor
						// An indexReduceFactor > 0 means that for at least one columnsItem the index was removed and for all
						// following the index property has to be correct by the indexReduceFactor
						if (oColumnsItem.index > 0 && oColumnsItem.index >= iIndexReduceFactor) {
							oColumnsItem.index -= iIndexReduceFactor;
						}
					}
				}
			});
		}
	};

	ColumnsController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aItems = oJsonModel.columns.columnsItems;

		this.fireBeforePotentialTableChange();

		// Apply changes to a UI table
		if (oTable instanceof sap.ui.table.Table) {
			this._applyChangesToUiTableType(oTable, aItems);
		} else if (oTable instanceof sap.m.Table) {
			// Apply changes to a UI table
			this._applyChangesToMTableType(oTable, aItems);
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Applies changes to a table of type UI table
	 * 
	 * @param {object} oTable is the table where all personalization changes shall be allied to
	 * @param {array} aColumnsItems is an array with changes that shall be applied to oTable
	 * @private
	 * @name ColumnsController#_applyChanges
	 * @function
	 */
	ColumnsController.prototype._applyChangesToUiTableType = function(oTable, aColumnsItems) {
		var aColumns = null, oTableColumn = null;
		var iFixedColumnCount = oTable.getFixedColumnCount();
		var iFixedColumnIndex = iFixedColumnCount === 0 ? iFixedColumnCount : iFixedColumnCount - 1;

		var fSetOrder = function(oColumnsItem, oTableColumn) {
			// Apply column order
			var iTableColumnIndex = oTable.indexOfColumn(oTableColumn);
			var iModelColumnIndex = oColumnsItem.index;
			if (iModelColumnIndex !== undefined && iTableColumnIndex !== iModelColumnIndex) {
				// TODO: was ist mit Binding, wenn Eintäge gelöscht und dann wieder hinzugefügt werden?
				oTable.removeColumn(oTableColumn);
				oTable.insertColumn(oTableColumn, iModelColumnIndex);
				// Remove "freeze" if a column was moved from the frozen zone out or column was moved inside of frozen zone.
				// Allowed is only column move outside of frozen zone.
				if (!(iTableColumnIndex > iFixedColumnIndex && iModelColumnIndex > iFixedColumnIndex)) {
					oTable.setFixedColumnCount(0);
				}
			}
		};

		var fSetVisibility = function(oColumnsItem, oTableColumn) {
			// Apply column visibility
			if (oColumnsItem.visible !== undefined && oTableColumn.getVisible() !== oColumnsItem.visible) {
				// TODO: was ist mit Binding, wenn das "Visible" Property im XML view gebunden ist?
				// In dem Beispiel von Markus K. wird die Spalte "Document Number" nicht auf Invisible gesetzt.
				oTableColumn.setVisible(oColumnsItem.visible);
			}
		};

		var fSetWidth = function(oColumnsItem, oTableColumn) {
			// Apply column width
			if (oColumnsItem.width !== undefined && oTableColumn.getWidth() !== oColumnsItem.width) {
				oTableColumn.setWidth(oColumnsItem.width);
			}
		};

		if (aColumnsItems.length) {
			aColumns = oTable.getColumns();

			// organize columnsItems by it's index to apply them in the right order
			aColumnsItems.sort(function(a, b) {
				if (a.index < b.index) {
					return -1;
				}
				if (a.index > b.index) {
					return 1;
				}
				return 0;
			});

			// apply columnsItems
			aColumnsItems.forEach(function(oColumnsItem) {
				oTableColumn = sap.ui.comp.personalization.Util.getColumn(oColumnsItem.columnKey, aColumns);
				if (oTableColumn) {
					fSetOrder(oColumnsItem, oTableColumn);
					fSetVisibility(oColumnsItem, oTableColumn);
					fSetWidth(oColumnsItem, oTableColumn);
				}
			});
		}
	};

	/**
	 * Applies changes to a table of type M table
	 * 
	 * @param {object} oTable is the table where all personalization changes shall be allied to
	 * @param {array} aColumnsItems is an array with changes that shall be applied to oTable
	 * @private
	 * @name ColumnsController#_applyChanges
	 * @function
	 */
	ColumnsController.prototype._applyChangesToMTableType = function(oTable, aColumnsItems) {
		var oTableColumn = null, bTableRerenderingNeeded = false;
		var aColumns = oTable.getColumns();

		var fSetOrder = function(oColumnsItem, oTableColumn) {
			// Apply column order
			var iModelColumnIndex = oColumnsItem.index;
			if (iModelColumnIndex !== undefined) {
				oTableColumn.setOrder(iModelColumnIndex);
				bTableRerenderingNeeded = true;
			}
		};

		var fSetVisibility = function(oColumnsItem, oTableColumn) {
			// Apply column visibility
			if (oColumnsItem.visible !== undefined && oTableColumn.getVisible() !== oColumnsItem.visible) {
				oTableColumn.setVisible(oColumnsItem.visible);
			}
		};

		// organize columnsItems by it's index to apply them in the right order
		if (aColumnsItems.length) {
			aColumns = oTable.getColumns();

			aColumnsItems.sort(function(a, b) {
				if (a.index < b.index) {
					return -1;
				}
				if (a.index > b.index) {
					return 1;
				}
				return 0;
			});

			// apply columnsItems
			aColumnsItems.forEach(function(oColumnsItem) {
				oTableColumn = sap.ui.comp.personalization.Util.getColumn(oColumnsItem.columnKey, aColumns);
				if (oTableColumn) {
					fSetOrder(oColumnsItem, oTableColumn);
					fSetVisibility(oColumnsItem, oTableColumn);
				}
			});
		}
		// TODO: Check why table rerendering is needed for m.table when column is moved; change of visibility works fine
		if (bTableRerenderingNeeded) {
			oTable.rerender();
		}
	};

	/**
	 * Operations on columns are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via
	 * user interaction at table, the change is instantly applied on the table.
	 * 
	 * @param {object} oPersistentDataBase JSON object
	 * @param {object} oPersistentDataCompare JSON object
	 * @returns {object} that represents the change type, like: Unchanged || TableChanged || ModelChanged
	 */
	ColumnsController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		var oChangeData = this.getChangeData(oPersistentDataBase, oPersistentDataCompare);
		if (oChangeData) {
			var oChangeType = sap.ui.comp.personalization.Controller.ChangeType.TableChanged;
			oChangeData.columns.columnsItems.some(function(oItem) {
				if (oItem.visible || oItem.visible === false) {
					oChangeType = sap.ui.comp.personalization.Controller.ChangeType.ModelChanged;
					return true;
				}
			});
			return oChangeType;
		}
		return sap.ui.comp.personalization.Controller.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = CurrentModelData - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataBase JSON object which represents the current model state (Restore+PersistentData)
	 * @param {object} oPersistentDataCompare JSON object which represents AlreadyKnown || Restore
	 * @returns {object} JSON object or null
	 */
	ColumnsController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.columns || !oPersistentDataCompare.columns.columnsItems) {
			return null;
		}

		var oChangeData = {
			columns: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.columns)
		};

		// If no changes inside of columns.columnsItems array, return null.
		// Note: the order inside of columns.columnsItems array is irrelevant.
		var bIsEqual = true;
		oPersistentDataBase.columns.columnsItems.some(function(oItem) {
			var oItemCompare = sap.ui.comp.personalization.Util.getArrayElementByKey("columnKey", oItem.columnKey, oPersistentDataCompare.columns.columnsItems);
			if (!sap.ui.comp.personalization.Util.semanticEqual(oItem, oItemCompare)) {
				// Leave forEach() as there are different items
				bIsEqual = false;
				return true;
			}
		});
		if (bIsEqual) {
			return null;
		}

		// If same items are different then delete equal properties and return the rest of item
		var aToBeDeleted = [];
		oChangeData.columns.columnsItems.forEach(function(oItem, iIndex) {
			var oItemCompare = sap.ui.comp.personalization.Util.getArrayElementByKey("columnKey", oItem.columnKey, oPersistentDataCompare.columns.columnsItems);
			if (sap.ui.comp.personalization.Util.semanticEqual(oItem, oItemCompare)) {
				// Condenser: remove items which are not changed in a chain
				aToBeDeleted.push(oItem);
				return;
			}
			for ( var property in oItem) {
				if (property === "columnKey" || !oItemCompare) {
					if (oItemCompare && oItemCompare[property] === undefined) {
						delete oItem[property];
					} else {
						continue;
					}
				}
				if (oItem[property] === oItemCompare[property]) {
					delete oItem[property];
				}
			}
			if (Object.keys(oItem).length < 2) {
				aToBeDeleted.push(oItem);
			}
		});
		aToBeDeleted.forEach(function(oItem) {
			var iIndex = sap.ui.comp.personalization.Util.getIndexByKey(oChangeData.columns.columnsItems, oItem.columnKey);
			oChangeData.columns.columnsItems.splice(iIndex, 1);
		});

		return oChangeData;
	};

	/**
	 * This method sorts a given ARRAY by a well defined property name of it's included objects. If it is required the array will be copied before.
	 * 
	 * @param {array} aArrayToBeSorted is the array that shall be sorted by the given property
	 * @param {string} sPropertyName is the property name that shall be taken as sorting criteria
	 * @param {Boolean} bTakeACopy is optional and desides whether the given arry shall be copied before its content will be sorted
	 * @returns {array} aSortedArray is the sorted array
	 */
	ColumnsController.prototype._sortArrayByPropertyName = function(aArrayToBeSorted, sPropertyName, bTakeACopy) {
		var aSortedArray = [];

		if (bTakeACopy === null || bTakeACopy === undefined) {
			bTakeACopy = false;
		}

		if (aArrayToBeSorted && aArrayToBeSorted.length > 0 && sPropertyName !== undefined && sPropertyName !== null && sPropertyName !== "") {

			if (bTakeACopy) {
				aSortedArray = jQuery.extend(true, [], aArrayToBeSorted);
			} else {
				aSortedArray = aArrayToBeSorted;
			}

			aSortedArray.sort(function(a, b) {
				var propertyA = a[sPropertyName];
				var propertyB = b[sPropertyName];
				if (propertyA < propertyB || (propertyA !== undefined && propertyB === undefined)) {
					return -1;
				}
				if (propertyA > propertyB || (propertyA === undefined && propertyB !== undefined)) {
					return 1;
				}
				return 0;
			});
		}

		return aSortedArray;
	};

	/**
	 * This method sorts a given ARRAY by a well defined property name of it's included objects. If it is required the array will be copied before.
	 * 
	 * @param {array} aObjects is the array of objects wherein the index properties shall be changed; aObjects needs to be sorted be this index
	 *        property!!
	 * @param {int} iStartIndex is the start index from where the index properties shall be changed
	 * @param {int} iEndIndex is the end index to where the index properties shall be changed
	 */
	ColumnsController.prototype._recalculateIndexes = function(aObjects, iStartIndex, iEndIndex) {
		var iMinIndex = null, iMaxIndex = null, iMaxArrayIndex = null;

		if (!aObjects || !aObjects.length) {
			return;
		}

		iMaxArrayIndex = aObjects.length - 1;

		if (iStartIndex === null || iStartIndex === undefined || iStartIndex < 0 || iEndIndex === null || iEndIndex === undefined || iEndIndex < 0 || iEndIndex > iMaxArrayIndex || iStartIndex === iEndIndex) {
			return;
		}

		iMinIndex = Math.min(iStartIndex, iEndIndex);
		iMaxIndex = Math.max(iStartIndex, iEndIndex);

		// to be able to work with forEach and iIndex -> the array aObjects needs to be sorted!!
		aObjects.forEach(function(oObject, iIndex) {

			// check, whether actual object fit's into index ranges
			if (iIndex < iMinIndex || iIndex > iMaxIndex || iIndex > iMaxArrayIndex) {
				return;
			}

			if (iStartIndex > iEndIndex) {
				// UP
				oObject.index += 1;
			} else {
				// DOWN
				oObject.index -= 1;
			}
		});
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added. E.g. Restore
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. E.g. CurrentVariant ||
	 *        PersistentData
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	ColumnsController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {

		// oPersistentDataCompare is empty -> result = oPersistentDataBase
		if (!oPersistentDataCompare || !oPersistentDataCompare.columns || !oPersistentDataCompare.columns.columnsItems || oPersistentDataCompare.columns.columnsItems.length === 0) {
			return oPersistentDataBase.columns ? {
				columns: jQuery.extend(true, {}, oPersistentDataBase.columns)
			} : null;
		}

		// oPersistentDataBase is empty -> result = oPersistentDataCompare
		if (!oPersistentDataBase || !oPersistentDataBase.columns || !oPersistentDataBase.columns.columnsItems) {
			return {
				columns: jQuery.extend(true, {}, oPersistentDataCompare.columns)
			};
		}

		var aDeltaColumnsItem = [];

		var oUnion = this.createPersistentStructure();

		oPersistentDataBase.columns.columnsItems.forEach(function(oColumnsItemPersistent, iIndex) {
			var oColumnsItemDelta = sap.ui.comp.personalization.Util.getArrayElementByKey("columnKey", oColumnsItemPersistent.columnKey, oPersistentDataCompare.columns.columnsItems);

			if (oColumnsItemDelta) {
				if (oColumnsItemDelta.visible !== undefined) {
					oColumnsItemPersistent.visible = oColumnsItemDelta.visible;
				}

				if (oColumnsItemDelta.width !== undefined) {
					oColumnsItemPersistent.width = oColumnsItemDelta.width;
				}

				if (oColumnsItemDelta.index !== undefined) {
					oColumnsItemPersistent.index = oColumnsItemDelta.index;
					aDeltaColumnsItem.push(oColumnsItemPersistent);
					return;
				}
			}
			oUnion.columns.columnsItems.push(oColumnsItemPersistent);
		});

		if (aDeltaColumnsItem && aDeltaColumnsItem.length > 0) {
			this._sortArrayByPropertyName(aDeltaColumnsItem, "index");
			aDeltaColumnsItem.forEach(function(oDeltaColumnsItem) {
				oUnion.columns.columnsItems.splice(oDeltaColumnsItem.index, 0, oDeltaColumnsItem);
			});
		}

		oUnion.columns.columnsItems.forEach(function(oColumnsItemUnion, iIndex) {
			oColumnsItemUnion.index = iIndex;
		});

		return oUnion;
	};

	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	ColumnsController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (oTable && oTable instanceof sap.ui.table.Table) {
			oTable.detachColumnMove(this._onColumnMove, this);
			oTable.detachColumnVisibility(this._onColumnVisibility, this);
			oTable.detachColumnResize(this._onColumnResize, this);
		}
	};

	/* eslint-enable strict */

	return ColumnsController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/ColumnsController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.FilterController') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP SE. All rights reserved
 */

// Provides FilterController
jQuery.sap.declare('sap.ui.comp.personalization.FilterController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nFilterItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nFilterPanel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/FilterController",['jquery.sap.global', 'sap/m/P13nFilterItem', 'sap/m/P13nFilterPanel', './BaseController'],
	function(jQuery, P13nFilterItem, P13nFilterPanel, BaseController) {
	"use strict";


	/**
	 * The FilterController can be used to...
	 * 
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @alias sap.ui.comp.personalization.FilterController
	 */
	var FilterController = BaseController.extend("sap.ui.comp.personalization.FilterController",
	/** @lends sap.ui.comp.personalization.FilterController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.filter);
		},
		metadata: {
			events: {
				afterFilterModelDataChange: {}
			}
		}
	});
	
	FilterController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);
	
		if (oTable instanceof sap.ui.table.Table) {
			oTable.detachFilter(this._onFilter, this);
			oTable.attachFilter(this._onFilter, this);
		}
	};
	
	FilterController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_FILTER");
	};
	
	FilterController.prototype.createTableRestoreJson = function() {
		// TODO: this is not correct but the best we can do - problem is that the filter is not extractable from the table instance
		this.setPersistentDataRestore(this.createPersistentStructure());
	};
	
	// sap.ui.comp.personalization.FilterController.prototype._getTable2Json = function() {
	//	
	// }
	
	/**
	 * Overwrite BaseController method because currently we cannot extract persistent model data from table instance
	 */
	FilterController.prototype.syncTable2PersistentModel = function() {
	// NOTE: cannot extract persistent model from table instance
	};
	
	FilterController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];
	
		if (oTable) {
			if (oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.isFilterable(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text(),
							maxLength: sap.ui.comp.personalization.Util._getCustomProperty(oColumn, "maxLength"),
							type: sap.ui.comp.personalization.Util.getColumnType(oColumn)
						});
					}
				}, this);
			}
			if (oTable instanceof sap.m.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.isFilterable(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text(),
							maxLength: sap.ui.comp.personalization.Util._getCustomProperty(oColumn, "maxLength"),
							type: sap.ui.comp.personalization.Util.getColumnType(oColumn)
						});
					}
				}, this);
			}
		}
	
		// Sort the columns in alphabetical order
		var sLanguage;
		try {
			sLanguage = sap.ui.getCore().getConfiguration().getLocale().toString();
		} catch (exception) {
			// this exception can happen if the configured language is not convertible to BCP47 -> getLocale will deliver an exception
			sLanguage = null;
		}
	
		if (sLanguage) {
			aItems.sort(function(a, b) {
				return a.text.localeCompare(b.text, sLanguage, {
					numeric: true
				});
			});
		}
	
		// check if Items was changed at all and take over if it was changed
		var oItemsBefore = this.getModel().getData().transientData.filter.items;
		if (jQuery(aItems).not(oItemsBefore).length !== 0 || jQuery(oItemsBefore).not(aItems).length !== 0) {
			this.getModel().getData().transientData.filter.items = aItems;
		}
	};
	
	FilterController.prototype._onFilter = function(oEvent) {
		// TODO: implement this method. Currently SmartTable does not support filtering directly on the table, only via
		// personalization dialog
	
		// this.fireBeforePotentialTableChange();
		// var oColumn = oEvent.getParameter("column");
		// var sValue = oEvent.getParameter("value");
	
		// if (!bColumnAdded) {
		// this._sort.sortItems = [];
		// this._sort.sortItems.push({createModelDataFromTable
		// key : "0",
		// columnKey : oColumn.getId(),
		// operation : sSortOrder
		// });
		// }
		// this.fireAfterPotentialTableChange();
	
		// this.fireAfterFilterModelDataChange();
	};
	
	FilterController.prototype._hasTableFilterableColumns = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return false;
		}
	
		var bHasFiltering = false;
		oTable.getColumns().some(function(oColumn) {
			if (sap.ui.comp.personalization.Util.isFilterable(oColumn)) {
				bHasFiltering = true;
				return true;
			}
		});
		return bHasFiltering;
	};
	
	FilterController.prototype.getPanel = function(oPayload) {
		if (!this._hasTableFilterableColumns()) {
			return null;
		}
		if (oPayload && oPayload.column) {
			var sColumnKey = sap.ui.comp.personalization.Util.getColumnKey(oPayload.column);
			if (sColumnKey) {
	
				var aItems = this.getModel().getData().transientData.filter.items;
	
				aItems.forEach(function(oItem, iIndex) {
					oItem["isDefault"] = oItem.columnKey === sColumnKey;
				}, this);
			}
		}
		var that = this;
		var oPanel = new P13nFilterPanel({
			containerQuery: true,
			layoutMode: "Desktop",
			type: sap.m.P13nPanelType.filter,
			title: this.getTitleText(),// "{/transientData/filter/title}",
			items: {
				path: "/transientData/filter/items",
				template: new sap.m.P13nItem({
					columnKey: "{columnKey}",
					text: "{text}",
					tooltip: "{tooltip}",
					maxLength: "{maxLength}",
					type: "{type}",
					isDefault: "{isDefault}"
				})
			},
			filterItems: {
				path: "/persistentData/filter/filterItems",
				factory: function(sId, oContext) {
					var oFilterItemData = oContext.getProperty(oContext.sPath);
					var sValue1, sValue2, oFormatter;
					sValue1 = oFilterItemData.value1;
					sValue2 = oFilterItemData.value2;
					// Determine the type to create a formatter
					if (sValue1 instanceof Date) {
						oFormatter = sap.ui.core.format.DateFormat.getDateInstance();
					} else if (typeof sValue1 === "number") {
						oFormatter = sap.ui.core.format.NumberFormat.getFloatInstance();
					}
					// format the value if necessary
					if (oFormatter) {
						sValue1 = sValue1 ? oFormatter.format(sValue1) : sValue1;
						sValue2 = sValue2 ? oFormatter.format(sValue2) : sValue2;
					}
	
					return new P13nFilterItem({
						key: oFilterItemData.key,
						columnKey: oFilterItemData.columnKey,
						exclude: oFilterItemData.exclude,
						operation: oFilterItemData.operation,
						value1: sValue1,
						value2: sValue2
					});
				}
			},
			beforeNavigationTo: that.setModelFunction(that.getModel())
		});
	
		oPanel.attachUpdateFilterItem(function(oEvent) {
			var oData = this.getModel().getData();
			var params = oEvent.getParameters();
			var oFilterItemData = params.filterItemData;
			oData.persistentData.filter.filterItems.some(function(oFilterItem, iIndex) {
				if (oFilterItem.key === params.key) {
					oData.persistentData.filter.filterItems[iIndex] = oFilterItemData;
					return true;
				}
				return false;
			}, this);
		}, this);
	
		oPanel.attachAddFilterItem(function(oEvent) {
			var oData = this.getModel().getData();
			var params = oEvent.getParameters();
			var oFilterItemData = params.filterItemData;
			oData.persistentData.filter.filterItems.forEach(function(oFilterItem, iIndex) {
				if (oFilterItem.key === params.key) {
					oData.persistentData.filter.filterItems[iIndex] = oFilterItemData;
					oFilterItemData = null;
				}
			}, this);
			
			if (oFilterItemData) {
				oData.persistentData.filter.filterItems.push(oFilterItemData);
			}
			
			this.getModel().setData(oData, true);
		}, this);
	
		oPanel.attachRemoveFilterItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel().getData();
			oData.persistentData.filter.filterItems.some(function(oFilterItem, iIndex) {
				if (oFilterItem.key === params.key) {
					oData.persistentData.filter.filterItems.splice(iIndex, 1);
					this.getModel().setData(oData, true);
					return true;
				}
				return false;
			}, this);
		}, this);
	
		return oPanel;
	};
	
	// sap.ui.comp.personalization.FilterController.prototype.onBeforeSubmit = function() {
	// };
	
	FilterController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aColumns = oTable.getColumns();
		var aColumnsUnfiltered = jQuery.extend(true, [], aColumns);
	
		this.fireBeforePotentialTableChange();
	
		if (oTable instanceof sap.ui.table.Table) {
			oJsonModel.filter.filterItems.forEach(function(oFilterItem) {
				var oColumn = sap.ui.comp.personalization.Util.getColumn(oFilterItem.columnKey, aColumns);
				if (oColumn) {
					if (!oColumn.getFiltered()) {
						oColumn.setFiltered(true);
					}
					aColumnsUnfiltered.splice(aColumnsUnfiltered.indexOf(oColumn), 1);
				}
			});
	
			aColumnsUnfiltered.forEach(function(oColumn) {
				if (oColumn && oColumn.getFiltered()) {
					oColumn.setFiltered(false);
				}
			});
		}
	
		this.fireAfterPotentialTableChange();
	};
	
	/**
	 * Operations on filter are processed sometime directly at the table and sometime not. In case that something has been changed via Personalization
	 * Dialog the consumer of the Personalization Dialog has to apply filtering at the table. In case that filter has been changed via user interaction at
	 * table, the change is instantly applied at the table.
	 */
	FilterController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return sap.ui.comp.personalization.Controller.ChangeType.Unchanged;
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.filter.filterItems) !== JSON.stringify(oPersistentDataCompare.filter.filterItems);
	
		return bIsDirty ? sap.ui.comp.personalization.Controller.ChangeType.ModelChanged : sap.ui.comp.personalization.Controller.ChangeType.Unchanged;
	};
	
	/**
	 * Result is XOR based difference = CurrentModelData - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted
	 * @returns {object} JSON object or null
	 */
	FilterController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataBase || !oPersistentDataBase.filter || !oPersistentDataBase.filter.filterItems) {
			return this.createPersistentStructure();
		}
	
		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return {
				filter: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.filter)
			};
		}
	
		if (JSON.stringify(oPersistentDataBase.filter.filterItems) !== JSON.stringify(oPersistentDataCompare.filter.filterItems)) {
			return {
				filter: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.filter)
			};
		}
		return null;
	};
	
	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if filterItems is []
	 *        then it means that all filterItems have been deleted
	 * @returns {object} JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	FilterController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataBase || !oPersistentDataBase.filter || !oPersistentDataBase.filter.filterItems) {
			return this.createPersistentStructure();
		}
	
		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return {
				filter: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.filter)
			};
		}
	
		return {
			filter: sap.ui.comp.personalization.Util.copy(oPersistentDataCompare.filter)
		};
	};
	
	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	FilterController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);
	
		var oTable = this.getTable();
		if (oTable && oTable instanceof sap.ui.table.Table) {
			oTable.detachFilter(this._onFilter, this);
		}
	};
	

	return FilterController;

}, /* bExport= */ true);

}; // end of sap/ui/comp/personalization/FilterController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.GroupController') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP SE. All rights reserved
 */

// Provides GroupController
jQuery.sap.declare('sap.ui.comp.personalization.GroupController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nGroupItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nGroupPanel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/GroupController",['jquery.sap.global', 'sap/m/P13nGroupItem', 'sap/m/P13nGroupPanel', './BaseController'],
	function(jQuery, P13nGroupItem, P13nGroupPanel, BaseController) {
	"use strict";


	/**
	 * The GroupController can be used to handling the grouping of the Analytical and sap.m.Table. The Grouping on the sap.ui.table.Table is not supported
	 * and the existing coding is only for testing and finding the limitations integrated.
	 * 
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @alias sap.ui.comp.personalization.GroupController
	 */
	var GroupController = BaseController.extend("sap.ui.comp.personalization.GroupController",
	/** @lends sap.ui.comp.personalization.GroupController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.group);
		},
		metadata: {
			events: {
				afterGroupModelDataChange: {}
			}
		}
	});
	
	GroupController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);
	
		if (oTable instanceof sap.ui.table.AnalyticalTable || oTable instanceof sap.ui.table.Table) {
			oTable.detachGroup(this._onGroup, this);
			oTable.attachGroup(this._onGroup, this);
		}
	};
	
	GroupController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_GROUP");
	};
	
	/**
	 * this method will make a complete json snapshot of the current table instance ("original") from the perspective of the columns controller; the json
	 * snapshot can later be applied to any table instance to recover all columns related infos of the "original" table
	 */
	GroupController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		if (oTable) {
			var aColumns = [];
			if (oTable instanceof sap.ui.table.Table && oTable.getGroupBy) {
				aColumns = oTable.getGroupBy() || [];
				if (typeof aColumns === "string") {
					aColumns = [
						aColumns
					];
				}
				// TODO: the getGroupBy returns no grouping when we call it to early. The result can be that we do not find the default grouping of the
				// ui.Table
			}
			if (oTable instanceof sap.ui.table.AnalyticalTable && oTable.getGroupedColumns) {
				aColumns = oTable.getGroupedColumns() || [];
			}
	
			aColumns.forEach(function(oColumn, iIndex) {
				if (typeof oColumn === "string") {
					oColumn = sap.ui.getCore().byId(oColumn);
				}
				if (oColumn.getGrouped()) {
					oJsonData.group.groupItems.push({
						columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
						operation: oColumn.getSortOrder && oColumn.getSortOrder() === sap.ui.table.SortOrder.Ascending ? sap.m.P13nConditionOperation.GroupAscending : sap.m.P13nConditionOperation.GroupDescending,
						showIfGrouped: oColumn.getShowIfGrouped ? oColumn.getShowIfGrouped() : false
					});
				}
			}, this);
		}
		return oJsonData;
	};
	
	GroupController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];
	
		if (oTable) {
			if (oTable instanceof sap.ui.table.AnalyticalTable || oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.isGroupable(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text()
						});
					}
				}, this);
			}
			if (oTable instanceof sap.m.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.isGroupable(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text()
						});
					}
				}, this);
			}
		}
	
		// Group the columns in alphabetical order
		var sLanguage;
		try {
			sLanguage = sap.ui.getCore().getConfiguration().getLocale().toString();
		} catch (exception) {
			// this exception can happen if the configured language is not convertible to BCP47 -> getLocale will deliver an exception
			sLanguage = null;
		}
	
		if (sLanguage) {
			aItems.sort(function(a, b) {
				return a.text.localeCompare(b.text, sLanguage, {
					numeric: true
				});
			});
		}
	
		aItems.splice(0, 0, {
			key: null,
			text: "(none)"
		});
	
		// check if groupItems was changed at all and take over if it was changed
		var oGroupItemsBefore = this.getModel().getData().transientData.group.items;
		if (jQuery(aItems).not(oGroupItemsBefore).length !== 0 || jQuery(oGroupItemsBefore).not(aItems).length !== 0) {
			this.getModel().getData().transientData.group.items = aItems;
		}
	};
	
	GroupController.prototype._onGroup = function(oEvent) {
		var oTable = this.getTable();
	
		var aGroupedColumns = oEvent.mParameters.groupedColumns;
	
		this.fireBeforePotentialTableChange();
	
		var oData = this.getModel().getData();
		oData.persistentData.group.groupItems = [];
		aGroupedColumns.forEach(function(oColumn, iIndex) {
			if (typeof oColumn === "string") {
				oColumn = sap.ui.getCore().byId(oColumn);
			}
	
			if (oTable && oTable instanceof sap.ui.table.AnalyticalTable) {
				if (oColumn.getGrouped()) {
					oData.persistentData.group.groupItems.push({
						columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
						showIfGrouped: oColumn.getShowIfGrouped ? oColumn.getShowIfGrouped() : false
					});
				}
			} else if (oTable && oTable instanceof sap.ui.table.Table) {
				oData.persistentData.group.groupItems.push({
					columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
					showIfGrouped: false
				});
			}
		}, this);
	
		this.fireAfterPotentialTableChange();
	
		this.fireAfterGroupModelDataChange();
	};
	
	GroupController.prototype._hasTableGroupableColumns = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return false;
		}
	
		var bHasGrouping = false;
		oTable.getColumns().some(function(oColumn) {
			if (sap.ui.comp.personalization.Util.isGroupable(oColumn)) {
				bHasGrouping = true;
				return true;
			}
		});
		return bHasGrouping;
	};
	
	GroupController.prototype.getPanel = function() {
		if (!this._hasTableGroupableColumns()) {
			return null;
		}
	
		var that = this;
		var oPanel = new P13nGroupPanel({
			maxGroups: this.getTable() instanceof sap.ui.table.AnalyticalTable ? "-1" : "1",
			type: sap.m.P13nPanelType.group,
			title: this.getTitleText(),// "{/transientData/group/title}",
			containerQuery: true,
			layoutMode: "Desktop",
			items: {
				path: "/transientData/group/items",
				template: new sap.m.P13nItem({
					columnKey: "{columnKey}",
					text: "{text}",
					tooltip: "{tooltip}"
				})
			},
			groupItems: {
				path: "/persistentData/group/groupItems",
				template: new P13nGroupItem({
					columnKey: "{columnKey}",
					operation: "{operation}",
					showIfGrouped: "{showIfGrouped}"
				})
			},
			beforeNavigationTo: that.setModelFunction(that.getModel())
		});
	
		oPanel.attachAddGroupItem(function(oEvent) {
			var oData = this.getModel().getData();
			var params = oEvent.getParameters();
			var oGroupItem = {
				columnKey: params.groupItemData.getColumnKey(),
				operation: params.groupItemData.getOperation(),
				showIfGrouped: params.groupItemData.getShowIfGrouped()
			};
			if (params.index >= 0) {
				oData.persistentData.group.groupItems.splice(params.index, 0, oGroupItem);
			} else {
				oData.persistentData.group.groupItems.push(oGroupItem);
			}
			this.getModel().setData(oData, true);
		}, this);
	
		oPanel.attachRemoveGroupItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel().getData();
			oData.persistentData.group.groupItems.splice(params.index, 1);
		}, this);
	
		return oPanel;
	};
	
	GroupController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aColumns = oTable.getColumns();
		var aColumnsUngrouped = jQuery.extend(true, [], aColumns);
	
		this.fireBeforePotentialTableChange();
	
		if (oTable instanceof sap.ui.table.AnalyticalTable) {
			oJsonModel.group.groupItems.forEach(function(oGroupItem) {
				var oColumn = sap.ui.comp.personalization.Util.getColumn(oGroupItem.columnKey, aColumns);
				if (!oColumn) {
					return;
				}
				if (!oColumn.getGrouped()) {
					oColumn.setGrouped(true);
				}
				if (oColumn.setShowIfGrouped() !== oGroupItem.showIfGrouped) {
					oColumn.setShowIfGrouped(oGroupItem.showIfGrouped);
				}			
				
				aColumnsUngrouped.splice(aColumnsUngrouped.indexOf(oColumn), 1);
			});
			
			aColumnsUngrouped.forEach(function(oColumn) {
				if (oColumn && oColumn.getGrouped()) {
					oColumn.setGrouped(false);
					oColumn.setShowIfGrouped(false);
				}
			});
		} else if (oTable instanceof sap.ui.table.Table) {
			if (oJsonModel.group.groupItems.length > 0) {
				oJsonModel.group.groupItems.some(function(oGroupItem) {
					var oColumn = sap.ui.comp.personalization.Util.getColumn(oGroupItem.columnKey, aColumns);
					if (oColumn) {
						oTable.setGroupBy(oColumn);
						return true;
					}
					return false;
				}, this);
			} else {
				// TODO removing the grouping does not work. we need a correction on the ui.table https://git.wdf.sap.corp:8080/#/c/776785/
				oTable.setGroupBy(null);
			}
		}
	
		this.fireAfterPotentialTableChange();
	};
	
	/**
	 * Operations on group are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via user
	 * interaction at table, the change is instantly applied at the table.
	 */
	GroupController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return sap.ui.comp.personalization.Controller.ChangeType.Unchanged;
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.group.groupItems) !== JSON.stringify(oPersistentDataCompare.group.groupItems);
	
		return bIsDirty ? sap.ui.comp.personalization.Controller.ChangeType.ModelChanged : sap.ui.comp.personalization.Controller.ChangeType.Unchanged;
	};
	
	/**
	 * Result is XOR based difference = CurrentModelData - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataCompare JSON object
	 * @returns {object} JSON object or empty object
	 */
	GroupController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
	
		if (!oPersistentDataBase || !oPersistentDataBase.group || !oPersistentDataBase.group.groupItems) {
			return this.createPersistentStructure();
		}
	
		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return {
				group: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.group)
			};
		}
	
		if (JSON.stringify(oPersistentDataBase.group.groupItems) !== JSON.stringify(oPersistentDataCompare.group.groupItems)) {
			return {
				group: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.group)
			};
		}
		return null;
	};
	
	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if groupItems is []
	 *        then it means that all groupItems have been deleted
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	GroupController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return {
				group: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.group)
			};
		}
	
		return {
			group: sap.ui.comp.personalization.Util.copy(oPersistentDataCompare.group)
		};
	};
	
	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	GroupController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);
	
		var oTable = this.getTable();
		if (oTable && (oTable instanceof sap.ui.table.AnalyticalTable || oTable instanceof sap.ui.table.Table)) {
			oTable.detachGroup(this._onGroup, this);
		}
	};
	

	return GroupController;

}, /* bExport= */ true);

}; // end of sap/ui/comp/personalization/GroupController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.SortController') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP SE. All rights reserved
 */

// Provides SortController
jQuery.sap.declare('sap.ui.comp.personalization.SortController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/SortController",['jquery.sap.global', './BaseController'],
	function(jQuery, BaseController) {
	"use strict";


	/**
	 * The SortController can be used to...
	 * 
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @alias sap.ui.comp.personalization.SortController
	 */
	var SortController = BaseController.extend("sap.ui.comp.personalization.SortController",
	/** @lends sap.ui.comp.personalization.SortController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.sort);
		},
		metadata: {
			events: {
				afterSortModelDataChange: {}
			}
		}
	});
	
	SortController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);
	
		if (oTable instanceof sap.ui.table.Table) {
			oTable.detachSort(this._onSort, this);
			oTable.attachSort(this._onSort, this);
		}
	};
	
	SortController.prototype.getTitleText = function() {
		return sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_TAB_SORT");
	};
	
	/**
	 * this method will make a complete json snapshot of the current table instance ("original") from the perspective of the columns controller; the json
	 * snapshot can later be applied to any table instance to recover all columns related infos of the "original" table TODO: This really only works for
	 * when max 1 sort criteria is defined since otherwise potentially order of sort criteria is destroyed
	 */
	SortController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		if (oTable) {
			if (oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (oColumn.getSorted()) {
						oJsonData.sort.sortItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							operation: oColumn.getSortOrder()
						});
					}
				}, this);
			}
		}
	
		return oJsonData;
	};
	
	SortController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];
	
		if (oTable) {
			if (oTable instanceof sap.ui.table.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.isSortable(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text()
						});
					}
				});
			}
			if (oTable instanceof sap.m.Table) {
				oTable.getColumns().forEach(function(oColumn) {
					if (sap.ui.comp.personalization.Util.isSortable(oColumn)) {
						aItems.push({
							columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text()
						});
					}
				}, this);
			}
		}
	
		// Sort the columns in alphabetical order
		var sLanguage;
		try {
			sLanguage = sap.ui.getCore().getConfiguration().getLocale().toString();
		} catch (exception) {
			// this exception can happen if the configured language is not convertible to BCP47 -> getLocale will deliver an exception
			sLanguage = null;
		}
	
		if (sLanguage) {
			aItems.sort(function(a, b) {
				return a.text.localeCompare(b.text, sLanguage, {
					numeric: true
				});
			});
		}
	
		aItems.splice(0, 0, {
			key: null,
			text: "(none)"
		});
	
		// check if items was changed at all and take over if it was changed
		// TODO: clean up here
		var aItemsBefore = this.getModel().getData().transientData.sort.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel().getData().transientData.sort.items = aItems;
		}
	};
	
	SortController.prototype._onSort = function(oEvent) {
		oEvent.preventDefault();
		var bAdded = oEvent.mParameters.columnAdded;
	
		var oTable = this.getTable();
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}
	
		this.fireBeforePotentialTableChange();
	
		// remove existing sortings
		if (!bAdded) {
			oTable.getColumns().forEach(function(oColumn, index) {
				if (oColumn.setSorted) {
					oColumn.setSorted(false);
				}
			}, this);
		}
		var oColumn = oEvent.mParameters.column;
		if (oColumn && oColumn.setSorted) {
			oColumn.setSorted(true);
			oColumn.setSortOrder(oEvent.mParameters.sortOrder);
		}
	
		var oSortData = this.getModel().getData().persistentData.sort;
	
		if (!bAdded) {
			oSortData.sortItems = [];
		}
	
		var i = sap.ui.comp.personalization.Util.getIndexByKey(oSortData.sortItems, sap.ui.comp.personalization.Util.getColumnKey(oColumn));
		if (i > -1) {
			oSortData.sortItems.splice(i, 1);
		}
		oSortData.sortItems.push({
			columnKey: sap.ui.comp.personalization.Util.getColumnKey(oColumn),
			operation: oEvent.mParameters.sortOrder
		});
	
		this.fireAfterPotentialTableChange();
	
		this.fireAfterSortModelDataChange();
	};
	
	SortController.prototype._hasTableSortableColumns = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return false;
		}
	
		var bHasSorting = false;
		oTable.getColumns().some(function(oColumn) {
			if (sap.ui.comp.personalization.Util.isSortable(oColumn)) {
				bHasSorting = true;
				return true;
			}
		});
	
		return bHasSorting;
	};
	
	SortController.prototype.getPanel = function() {
		if (!this._hasTableSortableColumns()) {
			return null;
		}
		var that = this;
		var oPanel = new sap.m.P13nSortPanel({
			type: sap.m.P13nPanelType.sort,
			title: this.getTitleText(),// "{/transientData/sort/title}",
			containerQuery: true,
			layoutMode: "Desktop",
			items: {
				path: "/transientData/sort/items",
				template: new sap.m.P13nItem({
					columnKey: "{columnKey}",
					text: "{text}",
					tooltip: "{tooltip}",
					maxLength: "{maxlength}",
					type: "{type}"
				})
			},
			sortItems: {
				path: "/persistentData/sort/sortItems",
				template: new sap.m.P13nSortItem({
					columnKey: "{columnKey}",
					operation: "{operation}"
				})
			},
			beforeNavigationTo: that.setModelFunction(that.getModel())
		});
	
		oPanel.attachAddSortItem(function(oEvent) {
			var oData = this.getModel().getData();
			var params = oEvent.getParameters();
			var oSortItem = {
				columnKey: params.sortItemData.getColumnKey(),
				operation: params.sortItemData.getOperation()
			};
			if (params.index >= 0) {
				oData.persistentData.sort.sortItems.splice(params.index, 0, oSortItem);
			} else {
				oData.persistentData.sort.sortItems.push(oSortItem);
			}
			this.getModel().setData(oData, true);
		}, this);
	
		oPanel.attachRemoveSortItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel().getData();
			oData.persistentData.sort.sortItems.splice(params.index, 1);
		}, this);
	
	// oPanel.setModel(this.getModel());
	
		return oPanel;
	};
	
	SortController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aColumns = oTable.getColumns();
		var aColumnsUnsorted = jQuery.extend(true, [], aColumns);
	
		this.fireBeforePotentialTableChange();
	
		if (oTable instanceof sap.ui.table.Table) {
			oJsonModel.sort.sortItems.forEach(function(oSortItem) {
				var oColumn = sap.ui.comp.personalization.Util.getColumn(oSortItem.columnKey, aColumns);
				if (!oColumn) {
					return;
				}
				if (!oColumn.getSorted()) {
					oColumn.setSorted(true);				
				}
				if (oColumn.getSortOrder() !== oSortItem.operation) {
					oColumn.setSortOrder(oSortItem.operation);
				}
				aColumnsUnsorted.splice(aColumnsUnsorted.indexOf(oColumn), 1);
			});
	
			aColumnsUnsorted.forEach(function(oColumn) {
				if (oColumn && oColumn.getSorted()) {
					oColumn.setSorted(false);
				}
			});
		}
	
		this.fireAfterPotentialTableChange();
	};
	
	/**
	 * Operations on sorting are processed sometime directly at the table and sometime not. In case that something has been changed via Personalization
	 * Dialog the consumer of the Personalization Dialog has to apply sorting at the table. In case that sorting has been changed via user interaction at
	 * table, the change is instantly applied at the table.
	 */
	SortController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return sap.ui.comp.personalization.Controller.ChangeType.Unchanged;
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.sort.sortItems) !== JSON.stringify(oPersistentDataCompare.sort.sortItems);
	
		return bIsDirty ? sap.ui.comp.personalization.Controller.ChangeType.ModelChanged : sap.ui.comp.personalization.Controller.ChangeType.Unchanged;
	};
	
	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare
	 * 
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted
	 * @returns {object} JSON object or empty object
	 */
	SortController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
	
		if (!oPersistentDataBase || !oPersistentDataBase.sort || !oPersistentDataBase.sort.sortItems) {
			return {
				sort: {
					sortItems: []
				}
			};
		}
	
		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return {
				sort: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.sort)
			};
		}
	
		if (JSON.stringify(oPersistentDataBase.sort.sortItems) !== JSON.stringify(oPersistentDataCompare.sort.sortItems)) {
			return {
				sort: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.sort)
			};
		}
		return null;
	};
	
	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if sortItems is []
	 *        then it means that all sortItems have been deleted
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	SortController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return {
				sort: sap.ui.comp.personalization.Util.copy(oPersistentDataBase.sort)
			};
		}
	
		return {
			sort: sap.ui.comp.personalization.Util.copy(oPersistentDataCompare.sort)
		};
	};
	
	/**
	 * Cleans up before destruction.
	 * 
	 * @private
	 */
	SortController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);
	
		var oTable = this.getTable();
		if (oTable && oTable instanceof sap.ui.table.Table) {
			oTable.detachSort(this._onSort, this);
		}
	};
	

	return SortController;

}, /* bExport= */ true);

}; // end of sap/ui/comp/personalization/SortController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.BaseValueListProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the metadata necessary for a value list from the OData metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.BaseValueListProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/BaseValueListProvider",[
	'jquery.sap.global', 'sap/ui/comp/smartfilterbar/ControlConfiguration', 'sap/ui/model/type/Date'
], function(jQuery, ControlConfiguration, Date) {
	"use strict";

	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel *
	 * @author Pavan Nayak, Thomas Biesemann
	 */
	var BaseValueListProvider = function(mParams) {
		this.oControl = mParams.control;
		this.sValueListEntitySetName = null;
		this.sValueListEntityName = null;
		this.oODataModel = mParams.model;
		this.oFilterModel = mParams.filterModel;
		this.oFilterProvider = mParams.filterProvider;
		this.oPrimaryValueListAnnotation = mParams.annotation;
		this.sDisplayFormat = mParams.displayFormat;
		// Default resolution of InOut params when used in standard OData scenarios
		this.bResolveInOutParams = (mParams.resolveInOutParams === false) ? false : true;
		// The configured display behaviour
		this.sDisplayBehaviour = mParams.displayBehaviour;
		// the calculated display behaviour for DDLB
		this.sDDLBDisplayBehaviour = this.sDisplayBehaviour;
		if (!this.sDDLBDisplayBehaviour || this.sDDLBDisplayBehaviour === ControlConfiguration.DISPLAYBEHAVIOUR.auto) {
			this.sDDLBDisplayBehaviour = this.oFilterProvider ? this.oFilterProvider.sDefaultDropDownDisplayBehaviour : ControlConfiguration.DISPLAYBEHAVIOUR.descriptionOnly;
		}
		// If the property if part of a complex type this would be filled
		this.sPropertyTypePath = "";
		if (this.bResolveInOutParams && !this.oFilterModel && !this.oFilterProvider) {
			this._resolvePropertyPath();
		}
		this._resolveAnnotationData(this.oPrimaryValueListAnnotation);

		if (!sap.ui.comp.smartfilterbar || !sap.ui.comp.smartfilterbar.FilterProvider) {
			jQuery.sap.require("sap.ui.comp.smartfilterbar.FilterProvider");
		}
	};

	BaseValueListProvider.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

	/**
	 * Resolve the path from control's binding info to find out if the property is part of a ComplexType. (This is valid only for ODataModel In/Out
	 * parameter handling)
	 * 
	 * @private
	 */
	BaseValueListProvider.prototype._resolvePropertyPath = function() {
		var oBindingInfo = this.oControl.getBindingInfo("value"), sPath, sProperty, aPaths;
		if (oBindingInfo && oBindingInfo.parts) {
			sPath = oBindingInfo.parts[0] ? oBindingInfo.parts[0].path : "";
		}
		if (sPath) {
			aPaths = sPath.split("/");
			if (aPaths.length > 1) {
				sProperty = aPaths[aPaths.length - 1];
				this.sPropertyTypePath = sPath.replace("/" + sProperty, "");
			}
		}
	};

	/**
	 * Resolve the annotation data and recalculate the required metadata
	 * 
	 * @param oAnnotation
	 * @private
	 */
	BaseValueListProvider.prototype._resolveAnnotationData = function(oAnnotation) {
		var iLen = 0, i = 0, aCols, oField, sType, oType;
		if (this.oODataModel && oAnnotation) {
			this.bSupportBasicSearch = oAnnotation.isSearchSupported;
			this.sValueListTitle = oAnnotation.valueListTitle || oAnnotation.qualifier;
			this.sKey = oAnnotation.keyField;
			this._aKeys = oAnnotation.keys;
			this.sValueListEntitySetName = oAnnotation.valueListEntitySetName;
			this.sValueListEntityName = oAnnotation.valueListEntityName;
			this.mInParams = oAnnotation.inParams;
			this.mOutParams = oAnnotation.outParams;

			// the calculated display behaviour for tokens
			this.sTokenDisplayBehaviour = this.sDisplayBehaviour;
			if (!this.sTokenDisplayBehaviour || this.sTokenDisplayBehaviour === ControlConfiguration.DISPLAYBEHAVIOUR.auto) {
				this.sTokenDisplayBehaviour = this.oFilterProvider ? this.oFilterProvider.sDefaultTokenDisplayBehaviour : ControlConfiguration.DISPLAYBEHAVIOUR.descriptionAndId;
			}

			// fallback to idOnly if no description is present for tokens
			if (!oAnnotation.descriptionField) {
				this.sTokenDisplayBehaviour = ControlConfiguration.DISPLAYBEHAVIOUR.idOnly;
			}

			this.sDescription = oAnnotation.descriptionField || this.sKey; // fall back to key if there is no description

			if (this.sValueListEntitySetName && this.sKey) {
				// Get the Columns information (all fields on the UI)
				this._aCols = [];
				this.aSelect = [];
				aCols = oAnnotation.valueListFields;
				iLen = aCols.length;
				for (i = 0; i < iLen; i++) {
					oField = aCols[i];
					// Type Handling: Special handling for date and boolean fields
					sType = null;
					oType = null;
					if (oField.type === "Edm.Boolean") {
						sType = "boolean";
					} else if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
						sType = "date";
						oType = new Date();
					} else if (oField.type === "Edm.Decimal") {
						sType = "decimal";
						oType = new sap.ui.model.type.Float();
					} else if (oField.type === "Edm.String") {
						sType = "string";
					}
					this._aCols.push({
						label: oField.fieldLabel,
						type: sType,
						oType: oType,
						width: this._getWidth(oField),
						template: oField.name
					// sort: oField.name // we do not support a sorting on the columns
					});
					this.aSelect.push(oField.name);
				}
				if (oAnnotation.descriptionField) {
					this.aSelect.push(oAnnotation.descriptionField);
				}
			}
		}
	};

	/**
	 * Returns the width from the metadata attributes. undefined if there is no width specified
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @returns {string} - width of the filter field
	 * @private
	 */
	BaseValueListProvider.prototype._getWidth = function(oField) {
		var sWidth = oField.maxLength || oField.precision, iWidth;

		// Force set the width to 8em for date fields
		if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
			sWidth = "8em";
		} else if (sWidth) {
			iWidth = parseInt(sWidth, 10);
			if (!isNaN(iWidth)) {
				// use a max of 15 (+.75) em
				if (iWidth > 15) {
					iWidth = 15;
				}
				// use a min of 1.5 (+.75) em
				if (iWidth <= 1) {
					iWidth = 1.5;
				}
				// Add additional .75 em (~12px) to avoid showing ellipsis in some cases!
				sWidth = iWidth + 0.75 + "em";
			}
		}
		return sWidth;
	};

	/**
	 * Called by the control when needed, to get input data for filtering
	 * 
	 * @private
	 */
	BaseValueListProvider.prototype._calculateFilterInputData = function() {
		var sLocalFieldName, sValueListFieldName, oData = null;
		// Search view can be switched for collective search help; reset the mFilterInputData in that case.
		delete this.mFilterInputData;
		// Check if the SmartFilter is present and try to get data for only visible fields from SmartFilter
		// else use the filterModel to get data
		if (this.oFilterProvider && this.oFilterProvider._oSmartFilter) {
			oData = this.oFilterProvider._oSmartFilter.getFilterData();
		} else if (this.oFilterModel) {
			oData = this.oFilterModel.getData();
		} else if (this.oODataModel && this.bResolveInOutParams) {
			oData = this.oODataModel.getData(this.sPropertyTypePath, this.oControl.getBindingContext());
		}
		if (this.mInParams && oData) {
			this.mFilterInputData = {};
			this.aFilterField = [];
			for (sLocalFieldName in this.mInParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mInParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						// Only set IN parameter data if it is non empty
						if (oData[sLocalFieldName]) {
							this.mFilterInputData[sValueListFieldName] = oData[sLocalFieldName];
							this.aFilterField.push(sValueListFieldName);
						}
					}
				}
			}
		}
	};

	/**
	 * Called when data needs to be set back to the SmartFilter from ValueHelp/suggest
	 * 
	 * @private
	 */
	BaseValueListProvider.prototype._calculateAndSetFilterOutputData = function(aData) {
		var sLocalFieldName, sValueListFieldName, mFilterOutputData = null, oData, oExistingData, oNewData, i, fFilterDuplicates;
		if (this.mOutParams && aData && (this.oFilterProvider || this.oFilterModel)) {
			mFilterOutputData = {};
			fFilterDuplicates = function(obj) {
				return obj.key === oNewData.key;
			};
			for (sLocalFieldName in this.mOutParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mOutParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						i = aData.length;
						while (i--) {
							oData = aData[i];
							// Only set Out parameter data if it exists in the passed data
							if (oData[sValueListFieldName]) {
								oNewData = {
									key: oData[sValueListFieldName]
								};
								if (!mFilterOutputData[sLocalFieldName]) {
									// Get Existing filter data
									if (!oExistingData && this.oFilterModel) {
										oExistingData = this.oFilterModel.getData();
									}
									// if existing data already contains the property as a multi-value --> amend to it
									if (oExistingData && oExistingData[sLocalFieldName] && oExistingData[sLocalFieldName].items) {
										mFilterOutputData[sLocalFieldName] = oExistingData[sLocalFieldName];
									} else {
										mFilterOutputData[sLocalFieldName] = {
											items: []
										};
									}
								}
								// Check for duplicates before adding new data
								if (mFilterOutputData[sLocalFieldName].items.filter(fFilterDuplicates).length <= 0) {
									mFilterOutputData[sLocalFieldName].items.push(oNewData);
								}
							}
						}
					}
				}
			}

			if (mFilterOutputData) {
				// Use API from FilterProvider if it exists
				if (this.oFilterProvider) {
					this.oFilterProvider.setFilterData(mFilterOutputData);
				} else if (this.oFilterModel) {
					// try to merge data into the filter model
					this.oFilterModel.setData(mFilterOutputData, true);
				}
			}
		} else if (this.oODataModel && this.bResolveInOutParams) {
			// ODataModel --> assume only 1 value can be set back!
			this._calculateAndSetODataModelOutputData(aData[0]);
		}
	};

	/**
	 * Called when data needs to be set back to the Model (ODataModel) from ValueHelp/suggest
	 * 
	 * @private
	 */
	BaseValueListProvider.prototype._calculateAndSetODataModelOutputData = function(oData) {
		var oBindingContext, sLocalFieldName, sValueListFieldName, sPathToResolve, sLocalPath, oValue;
		if (oData && this.mOutParams) {
			oBindingContext = this.oControl.getBindingContext();
			for (sLocalFieldName in this.mOutParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mOutParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						oValue = oData[sValueListFieldName];
						if (oValue) {
							sPathToResolve = this.sPropertyTypePath ? this.sPropertyTypePath + "/" + sLocalFieldName : sLocalFieldName;
							sLocalPath = this.oODataModel.resolve(sPathToResolve, oBindingContext);
							this.oODataModel.setProperty(sLocalPath, oValue);
						}
					}
				}
			}
		}
	};

	/**
	 * Destroys the object
	 */
	BaseValueListProvider.prototype.destroy = function() {
		sap.ui.base.Object.prototype.destroy.apply(this, arguments);
		this.oControl = null;
		this.mFilterInputData = null;
		this.aFilterField = null;
		this.sValueListEntitySetName = null;
		this.sValueListEntityName = null;
		this.oODataModel = null;
		this.oFilterModel = null;
		this.oFilterProvider = null;
		this.oPrimaryValueListAnnotation = null;
		this.sDisplayFormat = null;
		this.bSupportBasicSearch = null;
		this.sValueListTitle = null;
		this.sKey = null;
		this._aKeys = null;
		this.mInParams = null;
		this.mOutParams = null;
		this.sDescription = null;
		this.aSelect = null;
		this._aCols = null;
		this.sDDLBDisplayBehaviour = null;
		this.sTokenDisplayBehaviour = null;

		this.bIsDestroyed = true;
	};

	return BaseValueListProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/BaseValueListProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ValueHelpProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the data for a value list from the OData metadata to bind to a given control/aggregation (TODO: take into account Searchsupported +
// ValueList In/Out/InOut parameter to set data)
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ValueHelpProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ValueHelpProvider",['jquery.sap.global', 'sap/m/List', 'sap/m/PlacementType', 'sap/m/ResponsivePopover', 'sap/m/StandardListItem', './BaseValueListProvider', 'sap/ui/comp/valuehelpdialog/ValueHelpDialog', 'sap/ui/model/json/JSONModel'],
	function(jQuery, List, PlacementType, ResponsivePopover, StandardListItem, BaseValueListProvider, ValueHelpDialog, JSONModel) {
	"use strict";


	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel
	 * @author Peter Harbusch, Pavan Nayak, Thomas Biesemann
	 */
	var ValueHelpProvider = function(mParams) {
		if (mParams) {
			this.preventInitialDataFetchInValueHelpDialog = mParams.preventInitialDataFetchInValueHelpDialog;
			this.isRangeOnlyDialog = !mParams.annotation; // If no annotation --> Show only Ranges
			this.sTitle = mParams.title;
			this.sFieldName = mParams.fieldName;
			this.bSupportMultiselect = mParams.supportMultiSelect;
			this.bSupportRanges = mParams.supportRanges;
			this.bIsSingleIntervalRange = mParams.isSingleIntervalRange;
			this.bTakeOverInputValue = (mParams.takeOverInputValue === false) ? false : true;
			// If field is of type Single Interval -> The dialog should support only 1 interval range selection
			if (this.bIsSingleIntervalRange) {
				this.isRangeOnlyDialog = true;
				this.bSupportRanges = true;
			}
	
			if (mParams.type === "Edm.Decimal") {
				this._sType = "numeric";
			} else if (mParams.type === "Edm.DateTime" && mParams.displayFormat === "Date") {
				this._sType = "date";
			}
			this._sMaxLength = mParams.maxLength;
	
			this.additionalAnnotations = mParams.additionalAnnotations;
		}
	
		BaseValueListProvider.apply(this, arguments); // Call constructor of base class
	
		this._onInitialise();
	};
	
	// TODO: Instead of extending/inheriting maybe we should try using the same BaseValueListProdiver instance but with different uses
	/**
	 * Inherit from sap.ui.comp.providers.BaseValueListProvider
	 */
	ValueHelpProvider.prototype = jQuery.sap.newObject(BaseValueListProvider.prototype);
	
	/**
	 * Metadata is available --> Initialise the relevant stuff
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._onInitialise = function() {
		// Check if ValueHelp is supported by the control
		if (this.oControl.attachValueHelpRequest) {
			this._fVHRequested = jQuery.proxy(function(oEvent) {
				this.oControl = oEvent.getSource();
				this.bForceTriggerDataRetreival = oEvent.getParameter("fromSuggestions");
				if (this.bTakeOverInputValue || this.bForceTriggerDataRetreival) {
					this.sBasicSearchText = oEvent.getSource().getValue();
				}
				this._createValueHelpDialog();
			}, this);
			this.oControl.attachValueHelpRequest(this._fVHRequested);
		}
	};
	
	/**
	 * Creates the Value Help Dialog
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._createValueHelpDialog = function() {
		if (!this.bCreated) {
			this.bCreated = true;
			// Create ValueHelpDialog instance once and reuse it
			this.oValueHelpDialog = new sap.ui.comp.valuehelpdialog.ValueHelpDialog({  // FIXME workaround to make sinon stubs work with AMD
				basicSearchText: this.sBasicSearchText,
				supportRangesOnly: this.isRangeOnlyDialog,
				supportMultiselect: this.bSupportMultiselect,
				title: this.sTitle,
				supportRanges: this.bSupportRanges,
				displayFormat: this.sDisplayFormat,
				ok: jQuery.proxy(this._onOK, this),
				cancel: jQuery.proxy(this._onCancel, this),
				afterClose: jQuery.proxy(function() {
					if (this.oPrimaryValueListAnnotation) {
						this._resolveAnnotationData(this.oPrimaryValueListAnnotation);
					}
					this.oValueHelpDialog.destroy();
					this.bCreated = false;
					if (this.oControl && this.oControl.focus) {
						this.oControl.focus();
					}
				}, this)
			});
	
			// Enable the Dialog to show only 1 interval range selection
			if (this.bIsSingleIntervalRange) {
				this.oValueHelpDialog.setIncludeRangeOperations([
					sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ
				]);
				this.oValueHelpDialog.setMaxIncludeRanges(1);
				this.oValueHelpDialog.setMaxExcludeRanges(0);
				this._updateInitialInterval();
			}
	
			if (this.oControl.$() && this.oControl.$().closest(".sapUiSizeCompact").length > 0) { // check if the Token field runs in Compact mode
				this.oValueHelpDialog.addStyleClass("sapUiSizeCompact");
			}
			if (this.bSupportRanges) {
				this.oValueHelpDialog.setRangeKeyFields([
					{
						label: this.sTitle,
						key: this.sFieldName,
						type: this._sType,
						maxLength: this._sMaxLength
					}
				]);
			}
			if (!this.isRangeOnlyDialog) {
				this._createAdditionalValueHelpControls();
				this._createCollectiveSearchControls();
				this.oValueHelpDialog.setModel(this.oODataModel);
			}
	
			// pass the existing tokens to the value help dialog
			if (this.oControl.getTokens) {
				var aTokens = this.oControl.getTokens();
				this.oValueHelpDialog.setTokens(aTokens);
			}
	
			// Force trigger the data request if the fetch was initiated from Suggest
			if (this.bForceTriggerDataRetreival) {
				this._rebindTable();
				this.bForceTriggerDataRetreival = false;
			}
	
			this.oValueHelpDialog.open();
		}
	};
	
	/**
	 * Updated the ValueHelpDialog with the initial value of the interval token
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._updateInitialInterval = function() {
		var sIntervalValue = this.oControl.getValue(), oToken, oRange, aValues;
		if (sIntervalValue) {
			oToken = new sap.m.Token();
			oRange = {
				exclude: false,
				keyField: this.sKey
			};
			aValues = sIntervalValue.split("-");
			if (aValues && aValues.length === 2) {
				oRange.operation = "BT";
				oRange.value1 = aValues[0];
				oRange.value2 = aValues[1];
			} else {
				oRange.operation = "EQ";
				oRange.value1 = sIntervalValue;
			}
	
			oToken.data("range", oRange);
		}
		if (oToken) {
			this.oValueHelpDialog.setTokens([
				oToken
			]);
		}
	};
	
	/**
	 * Creates the necessary control(s) for Collective Search Help on the ValueHelpDialog
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._createCollectiveSearchControls = function() {
		var oPopOver, oList, oItem, i = 0, len = 0, fOnSelect, oAdditionalAnnotation, oResourceBundle;
		if (this.additionalAnnotations && this.additionalAnnotations.length) {
			fOnSelect = jQuery.proxy(function(oEvt) {
				var oSource = oEvt.getParameter("listItem"), oAnnotation;
				oPopOver.close();
				if (oSource) {
					oAnnotation = oSource.data("_annotation");
					if (oAnnotation) {
						this._triggerAnnotationChange(oAnnotation);
					}
				}
			}, this);
			// Selection Controls
			oList = new List({
				mode: sap.m.ListMode.SingleSelectMaster,
				selectionChange: fOnSelect
			});
			oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
			oPopOver = new ResponsivePopover({
				placement: PlacementType.Bottom,
				showHeader: true,
				title: oResourceBundle.getText("COLLECTIVE_SEARCH_SELECTION_TITLE"),
				content: [
					oList
				]
			});
	
			oItem = new StandardListItem({
				title: this.oPrimaryValueListAnnotation.valueListTitle
			});
			oItem.data("_annotation", this.oPrimaryValueListAnnotation);
			oList.addItem(oItem);
			oList.setSelectedItem(oItem);
	
			this.oValueHelpDialog.oSelectionTitle.setText(" - " + this.oPrimaryValueListAnnotation.valueListTitle);
			len = this.additionalAnnotations.length;
			for (i = 0; i < len; i++) {
				oAdditionalAnnotation = this.additionalAnnotations[i];
				oItem = new StandardListItem({
					title: oAdditionalAnnotation.valueListTitle
				});
				oItem.data("_annotation", oAdditionalAnnotation);
				oList.addItem(oItem);
			}
			this.oValueHelpDialog.oSelectionButton.setVisible(true);
			this.oValueHelpDialog.oSelectionTitle.setVisible(true);
			this.oValueHelpDialog.oSelectionButton.attachPress(function() {
				oPopOver.openBy(this);
			});
		}
	};
	
	ValueHelpProvider.prototype._triggerAnnotationChange = function(oAnnotation) {
		this.oValueHelpDialog.oSelectionTitle.setText(" - " + oAnnotation.valueListTitle);
		this.oValueHelpDialog.resetTableState();
		this._resolveAnnotationData(oAnnotation);
		this._createAdditionalValueHelpControls();
	};
	
	/**
	 * Create the SmartFilter control on the Value Help Dialog and set the model
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._createAdditionalValueHelpControls = function() {
		var sBasicSearchFieldName = null;
		this.oValueHelpDialog.setKey(this.sKey);
		this.oValueHelpDialog.setKeys(this._aKeys);
		this.oValueHelpDialog.setDescriptionKey(this.sDescription);
		this.oValueHelpDialog.setTokenDisplayBehaviour(this.sTokenDisplayBehaviour);
	
		/*
		 * This is necessary since, ValueHelpDialog control expects columns for table would be filled from a model called columns with column data!
		 */
		// init the columns model for the table
		var oColModel = new JSONModel();
		oColModel.setData({
			cols: this._aCols
		});
		this.oValueHelpDialog.setModel(oColModel, "columns");
	
		// Set the Basic search field if search is supported
		if (this.bSupportBasicSearch) {
			sBasicSearchFieldName = this.sKey;
		}
		// Create the smart filter
		this.oSmartFilterBar = new sap.ui.comp.smartfilterbar.SmartFilterBar({
			entityType: this.sValueListEntityName,
			basicSearchFieldName: sBasicSearchFieldName,
			advancedMode: true,
			expandAdvancedArea: !this.bForceTriggerDataRetreival,
			search: this._onFilterBarSearchPressed.bind(this),
			reset: this._onFilterBarResetPressed.bind(this),
			filterChange: jQuery.proxy(this._onFilterBarFilterChange, this),
			initialise: jQuery.proxy(this._onFilterBarInitialise, this)
		});
		if (this.oFilterProvider) {
			this.oSmartFilterBar.data("dateFormatSettings", this.oFilterProvider._oDateFormatSettings);
		}
		// This has to be set before the SmartFilter is initialised!
		this.oSmartFilterBar.isRunningInValueHelpDialog = true;
		// Set SmartFilter on ValueHelp Dialog
		this.oValueHelpDialog.setFilterBar(this.oSmartFilterBar);
	};
	
	/**
	 * Called when the filter data is changed in SmartFilter
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarFilterChange = function() {
		var oTable = this.oValueHelpDialog.theTable;
		if (oTable) {
			oTable.setShowOverlay(true);
		}
		this.oValueHelpDialog.TableStateSearchData();
	};
	
	/**
	 * Called when the search is triggered in SmartFilter
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarSearchPressed = function() {
		this._rebindTable();
	};
	
	/**
	 * Binds the table taking current filters and parameters into account
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._rebindTable = function() {
		var aFilters, mParameters, oTable;
		aFilters = this.oSmartFilterBar.getFilters();
		mParameters = this.oSmartFilterBar.getParameters() || {};
		if (this.aSelect && this.aSelect.length) {
			mParameters["select"] = this.aSelect.toString();
		}
	
		oTable = this.oValueHelpDialog.theTable;
		oTable.setShowOverlay(false);
		this.oValueHelpDialog.TableStateDataSearching();
		oTable.setBusy(true);
		oTable.bindRows({
			path: "/" + this.sValueListEntitySetName,
			filters: aFilters,
			parameters: mParameters,
			sorter: new sap.ui.model.Sorter(this.sKey),
			events: {
				dataReceived: jQuery.proxy(function(oEvt) {
					this.oValueHelpDialog.TableStateDataFilled();
					oTable.setBusy(false);
					var oBinding = oEvt.getSource(), iBindingLength;
					if (oBinding && this.oValueHelpDialog && this.oValueHelpDialog.isOpen()) {
						iBindingLength = oBinding.getLength();
						// Infinite number of requests are triggered if an error occurs, so don't update if no data is present
						// TODO: Is this really required?
						// If this update is only relevant for token handling, the below check should be fine!
						if (iBindingLength) {
							this.oValueHelpDialog.update();
						}
					}
				}, this)
			}
		});
	};
	
	/**
	 * Called when the reset button was clicked in the SmartFilter
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarResetPressed = function() {
		this._calculateFilterInputData();
		if (this.oSmartFilterBar) {
			this.oSmartFilterBar.setFilterData(this.mFilterInputData);
		}
	};
	
	/**
	 * Called when the filterbar is initialised
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarInitialise = function() {
		var oBasicSearchField = null;
		// (Re-)Set the data to default
		this._onFilterBarResetPressed();
	
		// Update the basic search text!
		if (this.oSmartFilterBar && this.oSmartFilterBar.getBasicSearchControl) {
			oBasicSearchField = this.oSmartFilterBar.getBasicSearchControl();
			if (oBasicSearchField) {
				oBasicSearchField.setValue(this.sBasicSearchText);
			}
		}
		if (!this.preventInitialDataFetchInValueHelpDialog) {
			this._rebindTable();
		}
	};
	
	/**
	 * Callback method after OK is clicked on the VH Dialog
	 * 
	 * @param {object} oControlEvent - the event data from the control
	 * @private
	 */
	ValueHelpProvider.prototype._onOK = function(oControlEvent) {
		var aTokens = oControlEvent.getParameter("tokens"), oRangeData, sKey, i = 0, aRowData = [], oRowData = null;
	
		if (this.oControl instanceof sap.m.MultiInput) {
			this.oControl.setTokens(aTokens);
			i = aTokens.length;
			while (i--) {
				oRowData = aTokens[i].data("row");
				if (oRowData) {
					aRowData.push(oRowData);
				}
			}
		} else {
			if (aTokens[0]) {
				// Single Interval
				if (this.bIsSingleIntervalRange) {
					oRangeData = aTokens[0].data("range");
					if (oRangeData) {
						// check if data is in the format: "2005-2014"
						if (oRangeData.operation === "BT") {
							sKey = oRangeData.value1 + "-" + oRangeData.value2;
						} else {
							sKey = oRangeData.value1;
						}
					}
				} else {
					sKey = aTokens[0].getKey();
				}
				oRowData = aTokens[0].data("row");
				if (oRowData) {
					aRowData.push(oRowData);
				}
			}
			this.oControl.setValue(sKey);
	
			// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
			this.oControl.fireChange({
				value: sKey,
				validated: true
			});
		}
		this._calculateAndSetFilterOutputData(aRowData);
		this.oValueHelpDialog.close();
		this.oValueHelpDialog.setModel(null);
	};
	
	/**
	 * Callback method after Cancel is clicked on the VH Dialog
	 * 
	 * @private
	 */
	ValueHelpProvider.prototype._onCancel = function() {
		this.oValueHelpDialog.close();
		this.oValueHelpDialog.setModel(null);
	};
	
	/**
	 * Destroys the object
	 */
	ValueHelpProvider.prototype.destroy = function() {
		if (this.oControl && this.oControl.detachValueHelpRequest) {
			this.oControl.detachValueHelpRequest(this._fVHRequested);
			this._fVHRequested = null;
		}
		BaseValueListProvider.prototype.destroy.apply(this, arguments);
		// Destroy other local data
		if (this.oValueHelpDialog) {
			this.oValueHelpDialog.destroy();
			this.oValueHelpDialog = null;
		}
		if (this.oSmartFilterBar) {
			this.oSmartFilterBar.destroy();
			this.oSmartFilterBar = null;
		}
		this.additionalAnnotations = null;
		this.sTitle = null;
		this.sFieldName = null;
	};
	

	return ValueHelpProvider;

}, /* bExport= */ true);

}; // end of sap/ui/comp/providers/ValueHelpProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ValueListProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the data for a value list from the OData metadata to bind to a given control/aggregation
// TODO: take into account Searchsupported + ValueList In/Out/InOut parameter (Keys only) to set data+ Multi column
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ValueListProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ValueListProvider",['jquery.sap.global', 'sap/m/Column', 'sap/m/ColumnListItem', 'sap/m/Text', 'sap/m/Token', './BaseValueListProvider', 'sap/ui/core/Item', 'sap/ui/model/Filter', 'sap/ui/model/Sorter', 'sap/ui/model/json/JSONModel'],
	function(jQuery, Column, ColumnListItem, Text, Token, BaseValueListProvider, Item, Filter, Sorter, JSONModel) {
	"use strict";


	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel
	 * @author Pavan Nayak, Thomas Biesemann
	 */
	var ValueListProvider = function(mParams) {
		if (mParams) {
			this.sAggregationName = mParams.aggregation;
			this.bTypeAheadEnabled = mParams.typeAheadEnabled;
	
		}
		BaseValueListProvider.apply(this, arguments);
		// Initialise if there is an entity set and key present
		if (this.sValueListEntitySetName && this.sKey) {
			this._onInitialise();
		}
	};
	
	// TODO: Instead of extending/inheriting maybe we should try using the same BaseValueListProdiver instance but with different uses
	/**
	 * Inherit from sap.ui.comp.providers.BaseValueListProvider
	 */
	ValueListProvider.prototype = jQuery.sap.newObject(BaseValueListProvider.prototype);
	/**
	 * Metadata is available --> Initialise the relevant stuff
	 * 
	 * @private
	 */
	ValueListProvider.prototype._onInitialise = function() {
		var oEventDelegate;
		if (!this.bTypeAheadEnabled) {
			this._oTemplate = new Item({
				key: "{" + this.sKey + "}",
				text: this._getDDLBTextBindingPath()
			});
			// ComboBox/MultiComboBox:
			// Sort based on key if displayBehaviour is based on id
			if (this.sDDLBDisplayBehaviour === sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.idOnly || this.sDDLBDisplayBehaviour === sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.idAndDescription) {
				this._oSorter = new Sorter(this.sKey);
			} else {
				// Sort based on description by default
				this._oSorter = new Sorter(this.sDescription);
			}
			/**
			 * Delay the fetch of data for standard dropdowns until the rendering is done! This inherently causes only the relevant data to be fetched
			 * from the backend!
			 */
			oEventDelegate = {
				onAfterRendering: function() {
					this.oControl.removeEventDelegate(oEventDelegate, this);
					this._fetchData();
				}
			};
			this.oControl.addEventDelegate(oEventDelegate, this);
		} else {
			// Check if Suggest is supported by the control
			if (this.oControl.attachSuggest) {
				this._fSuggest = jQuery.proxy(function(oEvent) {
					this.oControl = oEvent.getSource();
					if (!this.oTemplate || !this.oControl.data("_hassuggestionTemplate")) {
						this._createSuggestionTemplate();
					}
					var sSearchText = oEvent.getParameter("suggestValue");
					this._fetchData(sSearchText);
				}, this);
				this.oControl.attachSuggest(this._fSuggest);
				this.oControl.setMaxSuggestionWidth("90%"); // Use 90% of available space
	
				this._handleSelect();
			}
		}
		// this.oControl.setModel(this.oODataModel);
	};
	
	/**
	 * Creates a template for multi-column suggest
	 * 
	 * @private
	 */
	ValueListProvider.prototype._createSuggestionTemplate = function() {
		var i = 0, iLen = 0, oTooltip;
		// Create a template
		this._oTemplate = new ColumnListItem();
		if (this._aCols) {
			// remove any exiting columns
			this.oControl.removeAllSuggestionColumns();
			iLen = this._aCols.length;
			for (i = 0; i < iLen; i++) {
				// add Column headers
				this.oControl.addSuggestionColumn(new Column({
					header: new Text({
						wrapping: false,
						text: this._aCols[i].label,
						tooltip: this._aCols[i].label
					}),
					width: this._aCols[i].width
				}));
				// Tooltip is only possible for certain (string) fields
				// ignore it for all types other than string!
				oTooltip = null;
				if (this._aCols[i].type === "string") {
					oTooltip = {
						path: this._aCols[i].template
					};
				}
				// Add cells to the template
				this._oTemplate.addCell(new Text({
					wrapping: false,
					text: {
						path: this._aCols[i].template,
						type: this._aCols[i].oType
					},
					tooltip: oTooltip
				}));
			}
		}
		this.oControl.data("_hassuggestionTemplate", true);
	};
	/**
	 * Get Text binding path for dropdowns according to the DisplayBehaviour
	 * 
	 * @private
	 * @returns {String}
	 */
	ValueListProvider.prototype._getDDLBTextBindingPath = function() {
		var sKey = "{" + this.sKey + "}", sDescription = "{" + this.sDescription + "}";
		return sap.ui.comp.smartfilterbar.FilterProvider.getFormattedExpressionFromDisplayBehaviour(this.sDDLBDisplayBehaviour, sKey, sDescription);
	};
	
	/**
	 * Handle validation/selection of Item
	 * 
	 * @private
	 */
	ValueListProvider.prototype._handleSelect = function() {
		var fHandleRowSelect = jQuery.proxy(function(oDataModelRow, fCallback) {
			var sKey, sText, oToken;
			if (oDataModelRow) {
				sKey = oDataModelRow[this.sKey];
				sText = oDataModelRow[this.sDescription];
				this._calculateAndSetFilterOutputData([
					oDataModelRow
				]);
			}
			// Key found
			if (sKey) {
				// MultiInput field --> Create a token with the selected key
				if (this.oControl.addToken) {
					// Format the text as per the displayBehaviour
					sText = sap.ui.comp.smartfilterbar.FilterProvider.getFormattedExpressionFromDisplayBehaviour(this.sTokenDisplayBehaviour, sKey, sText);
					oToken = new Token({
						key: sKey,
						text: sText,
						tooltip: sText
					});
					oToken.data("row", oDataModelRow);
					if (fCallback) {
						fCallback(oToken);
					}
					// Clear the ValidationText
					delete this.oControl.__sValidationText;
				} else {
					// normal input field --> just set the value
					this.oControl.setValue(sKey);
					// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
					this.oControl.fireChange({
						value: sKey,
						validated: true
					});
				}
			}
	
		}, this);
		// Selection handling has to be done manually for Multi-Column suggest!
		// add Validators --> Only available for Multi-Input
		if (this.oControl.addValidator) {
			this._fValidator = jQuery.proxy(function(oData) {
				var oRow = oData.suggestionObject, oDataModelRow, sInput = oData.text, aFilters = [];
				// Selection via suggestion row --> no round trip needed
				if (oRow) {
					// Get the actual datamodel row
					oDataModelRow = this.oODataModel.getData(oRow.getBindingContextPath());
					fHandleRowSelect(oDataModelRow, oData.asyncCallback);
				} else if (sInput) {
					// Validation required from backend
					sInput = jQuery.sap.encodeURL(sInput.toUpperCase());
					// Check if the input text is same as the ValidationText
					if (this.oControl.__sValidationText !== sInput) {
						// Store the input as Validation text
						this.oControl.__sValidationText = sInput;
						// Set flag to indicate token validation is in progress
						this.oControl.__bValidatingToken = true;
						this._calculateFilterInputData();
						if (this.mFilterInputData && this.aFilterField) {
							aFilters = sap.ui.comp.smartfilterbar.FilterProvider.generateFilters(this.aFilterField, this.mFilterInputData);
						}
						aFilters.push(new Filter(this.sKey, sap.ui.model.FilterOperator.EQ, sInput));
						this.oODataModel.read(this.sValueListEntitySetName, {
							filters: aFilters,
							success: jQuery.proxy(function(oResponseData, response) {
								var oResultRow = oResponseData;
								if (oResponseData) {
									// Check if result has 1 single row
									if (oResponseData.results && oResponseData.results.length === 1) {
										oResultRow = oResponseData.results[0];
									}
									// If returned row has the key do the selection!
									if (oResultRow && oResultRow[this.sKey]) {
										fHandleRowSelect(oResultRow, oData.asyncCallback);
									}
								}
								// Remove the token validation flag
								delete this.oControl.__bValidatingToken;
							}, this)
						});
					}
				}
			}, this);
			this.oControl.addValidator(this._fValidator);
		} else if (this.oControl.attachSuggestionItemSelected) {
			this._fSuggestionItemSelected = jQuery.proxy(function(oEvent) {
				var oRow = oEvent.getParameter("selectedRow"), oDataModelRow;
				// MultiColumn Suggest
				if (oRow) {
					// Get the actual datamodel row
					oDataModelRow = oRow.getModel().getData(oRow.getBindingContextPath());
					fHandleRowSelect(oDataModelRow);
				}
			}, this);
			// Single-Input --> just enable selection handling
			this.oControl.attachSuggestionItemSelected(this._fSuggestionItemSelected);
		}
	};
	
	/**
	 * Bind the control to internally read the data (ODataModel takes care of this) from backend with optional search text to filter data
	 * 
	 * @param {object} sSearchText - the optional search text
	 * @private
	 */
	ValueListProvider.prototype._fetchData = function(sSearchText) {
		var mParams = {}, aFilters = [], length, oEvents;
		if (this.bTypeAheadEnabled) {
			// Convert search text to UpperCase if displayFormat = "UpperCase"
			if (sSearchText && this.sDisplayFormat === "UpperCase") {
				sSearchText = sSearchText.toUpperCase();
			}
			if (this.bSupportBasicSearch) {
				mParams["custom"] = {
					"search-focus": this.sKey,
					"search": sSearchText
				};
			}
			this._calculateFilterInputData();
			if (this.mFilterInputData && this.aFilterField) {
				aFilters = sap.ui.comp.smartfilterbar.FilterProvider.generateFilters(this.aFilterField, this.mFilterInputData);
			}
			// If SearchSupported = false; create a $filter for the keyfield with a StartsWith operator for the typed in/search text
			if (!this.bSupportBasicSearch) {
				aFilters.push(new Filter(this.sKey, sap.ui.model.FilterOperator.StartsWith, sSearchText));
			}
			// Restrict to 10 records for type Ahead
			length = 10;
			// Hide the Show All Items button if the number if items is less than the length (restriction)
			oEvents = {
				dataReceived: jQuery.proxy(function(oEvent) {
					var oBinding = oEvent.getSource(), iBindingLength;
					if (oBinding) {
						iBindingLength = oBinding.getLength();
						if (iBindingLength && iBindingLength <= length) {
							this.oControl.setShowTableSuggestionValueHelp(false);
						} else {
							this.oControl.setShowTableSuggestionValueHelp(true);
						}
					}
				}, this)
			};
		}
	
		if (this.aSelect && this.aSelect.length) {
			mParams["select"] = this.aSelect.toString();
		}
	
		// Bind the specified aggregation with valueList path in the model
		this.oControl.bindAggregation(this.sAggregationName, {
			path: "/" + this.sValueListEntitySetName,
			length: length,
			parameters: mParams,
			filters: aFilters,
			sorter: this._oSorter,
			events: oEvents,
			template: this._oTemplate
		});
	};
	
	/**
	 * Destroys the object
	 */
	ValueListProvider.prototype.destroy = function() {
		if (this.oControl) {
			if (this.oControl.detachSuggest) {
				this.oControl.detachSuggest(this._fSuggest);
				this._fSuggest = null;
			}
			if (this.oControl.removeValidator) {
				this.oControl.removeValidator(this._fValidator);
				this._fValidator = null;
			} else if (this.oControl.detachSuggestionItemSelected) {
				this.oControl.detachSuggestionItemSelected(this._fSuggestionItemSelected);
				this._fSuggestionItemSelected = null;
			}
			this.oControl.unbindAggregation(this.sAggregationName);
			if (this.oControl.removeAllSuggestionColumns) {
				this.oControl.removeAllSuggestionColumns();
			}
			this.oControl.data("_hassuggestionTemplate", false);
			delete this.oControl.__sValidationText;
			delete this.oControl.__bValidatingToken;
		}
		BaseValueListProvider.prototype.destroy.apply(this, arguments);
		// Destroy other local data
		if (this.oJsonModel) {
			this.oJsonModel.destroy();
			this.oJsonModel = null;
		}
		this._oTemplate = null;
		this.sAggregationName = null;
		this.bTypeAheadEnabled = null;
		this._oSorter = null;
	};
	

	return ValueListProvider;

}, /* bExport= */ true);

}; // end of sap/ui/comp/providers/ValueListProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ControlFactoryBase') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Base class for factory implementations that create controls that are hosted by <code>sap.ui.comp.SmartField</code>.
 * 
 * @public
 * @name sap.ui.comp.smartfield.ControlFactoryBase
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.base.Object} BaseObject a reference to the base object implementation.
 * @param {sap.ui.comp.providers.ValueHelpProvider} ValueHelpProvider a reference to the value help provider implementation.
 * @param {sap.ui.comp.providers.ValueListProvider} ValueListProvider a reference to the value list provider implementation.
 * @param {sap.ui.comp.smartfield.BindingUtil} BindingUtil a reference to the binding utility implementation.
 * @returns {sap.ui.comp.smartfield.ControlFactoryBase} new control factory instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ControlFactoryBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ControlFactoryBase",[ "jquery.sap.global", "sap/ui/base/Object", "sap/ui/comp/providers/ValueHelpProvider", "sap/ui/comp/providers/ValueListProvider", "sap/ui/comp/smartfield/BindingUtil" ], function(jQuery, BaseObject, ValueHelpProvider, ValueListProvider, BindingUtil) { // EXC_JSHINT_037 // EXC_JSHINT_034
	"use strict";

	/**
	 * @public
	 * @constructor
	 * @param {sap.ui.model.Model} oModel the model currently used.
	 * @param {sap.ui.core.Control} oParent the parent control.
	 */
	var ControlFactoryBase = BaseObject.extend("sap.ui.comp.smartfield.ControlFactoryBase", {
		constructor: function(oModel, oParent) {
			BaseObject.apply(this, arguments);
			this.sName = "ControlFactoryBase";
			this._oModel = oModel;
			this._oParent = oParent;
			this._oBinding = new BindingUtil();
			this._aProviders = [];
		}
	});

	/**
	 * Creates a control instance.
	 * 
	 * @param {boolean} bBlockSmartLinkCreation if <code>true</code>, a <code>SmartLink</code> will not be created.
	 * @returns {sap.ui.core.Control} the new control instance or <code>null</code>, if no control could be determined.
	 * @public
	 */
	ControlFactoryBase.prototype.createControl = function(bBlockSmartLinkCreation) {
		var oControl = this[this._getCreator(bBlockSmartLinkCreation)]();

		if (oControl.onCreate) {
			this[oControl.onCreate](oControl.control, oControl.params);
		}

		return oControl;
	};

	/**
	 * Adds validations to the given control.
	 * 
	 * @param {sap.ui.core.Control} oControl the given control.
	 * @param {string} sMethod an optional method name of a method to be invoked on the parent smart field to notify it of the current state.
	 * @public
	 */
	ControlFactoryBase.prototype.addValidations = function(oControl, sMethod) {	
		var fState, fError, that = this;

		fState = function(sState, oEvent) {
			var oException, oSource = oEvent.getSource();

			if (oSource) {
				if (oSource.setValueState) {
					oSource.setValueState(sState);
				}

				oException = oEvent.getParameter("exception");

				if (oException) {
					if (oSource.setValueStateText) {
						oSource.setValueStateText(oException.message);
					}
					
					that._oParent.setValueStateText(oException.message);
				} 
			}
			
			that._oParent.setValueState(sState);
			
			if (sMethod) {
				that._oParent[sMethod](sState === sap.ui.core.ValueState.Error);
			}
		};
		fError = function(oEvent) {
			fState(sap.ui.core.ValueState.Error, oEvent);
		};

		// attach to the errors.
		oControl.attachFormatError(fError);
		oControl.attachParseError(fError);
		oControl.attachValidationError(fError);
		oControl.attachValidationSuccess(function(oEvent) {
			fState(sap.ui.core.ValueState.None, oEvent);
		});		
	};

	/**
	 * Checks whether an annotation for value help exists and adds type-ahead and value help.
	 * 
	 * @param {sap.ui.core.Control} oControl the new control.
	 * @param {object} oProperty the OData property.
	 * @param {object} oValueHelp the value help configuration.
	 * @param {object} oValueHelp.annotation the value help annotation.
	 * @param {string} oValueHelp.aggregation the aggregation to attach the value list to.
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted.
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted.
	 * @param {string} oValueHelp.dialogtitle title for the value help dialog.
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used.
	 * @public
	 */
	ControlFactoryBase.prototype.addValueHelp = function(oControl, oProperty, oValueHelp, oModel) {
		var oValueHelpDlg, oValueList, oConfig, sDisplay;

		if (oValueHelp.annotation && oValueHelp.annotation.primaryValueListAnnotation) {
			// check the configuration for display behavior.
			oConfig = this._oParent.getConfiguration();

			if (oConfig) {
				sDisplay = oConfig.getDisplayBehaviour();
			}

			if (!sDisplay) {
				sDisplay = this._oParent.data("defaultDropDownDisplayBehaviour");
			}
			
			// add dialog, if necessary.
			if (!oValueHelp.noDialog) {
				if (oControl.setFilterSuggests) {
					oControl.setFilterSuggests(false);
				}

				// create the value help provider.
				oValueHelpDlg = new ValueHelpProvider({
					annotation: oValueHelp.annotation.primaryValueListAnnotation,
					additionalAnnotations: oValueHelp.annotation.additionalAnnotations,
					control: oControl,
					model: oModel,
					preventInitialDataFetchInValueHelpDialog: true,
					takeOverInputValue: false,
					supportMultiSelect: false,
					supportRanges: false,
					fieldName: oProperty.name,
					title: oValueHelp.dialogtitle,
					displayBehaviour: sDisplay
				});
				this._aProviders.push(oValueHelpDlg);
			}

			// create the value list provider.
			if (oControl.setShowValueHelp) {
				oControl.setShowValueHelp(true);
			}

			oValueList = new ValueListProvider({
				control: oControl,
				typeAheadEnabled: !oValueHelp.noTypeAhead,
				aggregation: oValueHelp.aggregation,
				annotation: oValueHelp.annotation.primaryValueListAnnotation,
				model: oModel,
				displayBehaviour: sDisplay
			});

			if (oControl.setShowSuggestion) {
				oControl.setShowSuggestion(true);
			}

			this._aProviders.push(oValueList);
		}
	};

	/**
	 * Returns a binding for a given attribute, if no binding is specified a fixed value or <code>null</code>, which is deduced from the
	 * information maintained on the parent.
	 * 
	 * @param {string} sName the name of the attribute
	 * @returns {object} binding for a given attribute, if no binding is specified a fixed value or <code>null</code>.
	 * @public
	 */
	ControlFactoryBase.prototype.getAttribute = function(sName) {
		var oInfo = this._oParent.getBindingInfo(sName);

		if (oInfo) {
			return this._oBinding.toBindingPath(oInfo);
		}

		return this._oParent["get" + sName.substring(0, 1).toUpperCase() + sName.substring(1)]();
	};

	/**
	 * Returns the standard attributes used during creation of a control.
	 * 
	 * @param {string} sAttribute the "leading" attribute, can be <code>null</code>.
	 * @param {object} oTypeInfo optional type information.
	 * @param {map} mNames the names of the attributes to be set.
	 * @param {object} oEvent the optional description of an event to register to and raise the <code>change</code> event on the
	 *        <code>SmartField</code>.
	 * @param {string} oEvent.event the name of an event to register to and raise the <code>change</code> event on the <code>SmartField</code>.
	 * @param {string} oEvent.parameter the name of a parameter to send with the <code>change</code> event on the <code>SmartField</code>.
	 * @returns {map} the standard attributes used during creation of a control.
	 * @public
	 */
	ControlFactoryBase.prototype.createAttributes = function(sAttribute, oTypeInfo, mNames, oEvent) {
		var that = this, n, oInfo, mAttributes = {};

		// check the standard attributes, whether they are bound or not.
		for (n in mNames) { // EXC_JSHINT_041
			oInfo = this._oParent.getBindingInfo(n);

			if (oInfo) {
				mAttributes[n] = this._oBinding.toBinding(oInfo);
			} else {
				mAttributes[n] = this._oParent["get" + n.substring(0, 1).toUpperCase() + n.substring(1)]();
			}
		}

		// map the value binding of the parent smart field to the child control's attribute.
		if (sAttribute) {
			mAttributes[sAttribute] = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: oTypeInfo ? this._oTypes.getType(oTypeInfo) : null
			};
		}

		// prepare the event that triggers the parent smart field's change event.
		if (oEvent) {
			mAttributes[oEvent.event] = function(oParam) {
				try {
					that._oParent.fireChange({
						value: oParam.mParameters[oEvent.parameter],
						newValue: oParam.mParameters[oEvent.parameter]
					});
				} catch (ex) {
					jQuery.sap.log.warning(ex);
				}
			};
		}

		// add an optional object binding.
		this.addObjectBinding(mAttributes);
		
		return mAttributes;
	};

	/**
	 * Adds a possibly existing object binding to the attributes.
	 * @param {map} mAttributes the attributes to which to add the object binding.
	 * @param {object} oBinding optional object binding.
	 * @public
	 */
	ControlFactoryBase.prototype.addObjectBinding = function(mAttributes, oBinding) {
		if (!oBinding) {
			oBinding = this._oParent.getObjectBinding(this._oMetaData.model);
		}
		
		if (mAttributes && oBinding) {			
			mAttributes.objectBindings = {};
			mAttributes.objectBindings[this._oMetaData.model] = oBinding.sPath;
		}
	};
	
	/**
	 * Returns format settings, which can be available for the given key.
	 * 
	 * @param {string} sFormat the key identifying the format.
	 * @returns {object} the format settings.
	 * @public
	 */
	ControlFactoryBase.prototype.getFormatSettings = function(sFormat) {
		var mFormat, aCustom, oCustom, len;

		if (sFormat) {
			// check the simple data
			mFormat = this._oParent.data(sFormat);

			// check the custom data as fall-back.
			if (!mFormat) {
				aCustom = this._oParent.getCustomData();

				if (aCustom) {
					len = aCustom.length;

					while (len--) {
						oCustom = aCustom[len];

						if (oCustom.getKey() === sFormat) { // EXC_JSHINT_048
							mFormat = oCustom.getValue();
							break;
						}
					}
				}
			}

			// if we have a format, try to apply it.
			if (mFormat && typeof (mFormat) === "string") {
				try {
					mFormat = JSON.parse(mFormat);
				} catch (ex) {
					return null;
				}
			}
		}

		return mFormat;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ControlFactoryBase.prototype.destroy = function() { // EXC_JSLINT_021
		var len = this._aProviders.length;

		while (len--) {
			this._aProviders[len].destroy();
		}

		this._oBinding.destroy();
		this._oBinding = null;
		this._oParent = null;
		this._oModel = null;
		this._aProviders = [];
	};

	return ControlFactoryBase;
}, true);

}; // end of sap/ui/comp/smartfield/ControlFactoryBase.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.JSONControlFactory') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Factory class to create controls that are hosted by <code>sap.ui.comp.SmartField</code>.
 * 
 * @public
 * @name sap.ui.comp.smartfield.JSONControlFactory
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.m.CheckBox} CheckBox a reference to the check box implementation.
 * @param {sap.m.ComboBox} ComboBox a reference to the combo box implementation.
 * @param {sap.m.DatePicker} DatePicker a reference to the DatePicker implementation.
 * @param {sap.m.Input} Input a reference to the Input implementation.
 * @param {sap.m.Text} Text a reference to the Text implementation.
 * @param {sap.ui.comp.smartfield.ControlFactoryBase} ControlFactoryBase a reference to the control factory base class implementation.
 * @param {sap.ui.comp.smartfield.JSONTypes} JSONTypes a reference to the JSON type implementation.
 * @returns {sap.ui.comp.smartfield.JSONControlFactory} new control factory instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.JSONControlFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/JSONControlFactory",[ "jquery.sap.global", "sap/m/CheckBox", "sap/m/ComboBox", "sap/m/DatePicker", "sap/m/Input", "sap/m/Text", "sap/ui/comp/smartfield/ControlFactoryBase", "sap/ui/comp/smartfield/JSONTypes" ], function(jQuery, CheckBox, ComboBox, DatePicker, Input, Text, ControlFactoryBase, JSONTypes) { // EXC_JSHINT_002 // EXC_JSHINT_037 // EXC_JSHINT_034
	"use strict";

	/**
	 * @public
	 * @constructor
	 * @param {sap.ui.model.json.JSONModel} oModel the JSON model currently used.
	 * @param {sap.ui.core.Control} oParent the parent control.
	 * @param {object} oMetaData the meta data used to initialize the factory.
	 * @param {object} oMetaData.model the name of the model.
	 * @param {object} oMetaData.path the path identifying the JSON property.
	 */
	var JSONControlFactory = ControlFactoryBase.extend("sap.ui.comp.smartfield.JSONControlFactory", {
		constructor: function(oModel, oParent, oMetaData) {
			ControlFactoryBase.apply(this, [
				oModel, oParent
			]);
			this.sName = "JSONControlFactory";
			this._oMetaData = oMetaData;
			this._oTypes = new JSONTypes();
		}
	});

	/**
	 * Returns the name of a method to create a control.
	 * 
	 * @returns {string} the name of the factory method to create the control.
	 * @private
	 */
	JSONControlFactory.prototype._getCreator = function() {
		var mMethods = {
			"Boolean": "_createBoolean",
			"Date": "_createDate",
			"DateTime": "_createString",
			"Float": "_createString",
			"Integer": "_createString",
			"String": "_createString"
		};

		if (!this._oParent.getEditable() || !this._oParent.getEnabled()) {
			if (this._oParent.getJsontype() === "Boolean") {
				return "_createBoolean";
			}

			return "_createDisplay";
		}

		return mMethods[this._oParent.getJsontype()] || "_createString";
	};

	/**
	 * Creates a control instance to edit a model property of type <code>String</code>, <code>Integer</code> or <code>Float</code>. Either
	 * <code>sap.m.Input</code> is returned or <code>sap.m.Combobox</code> depending on configuration.
	 * 
	 * @returns {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createString = function() {
		var bNoValueHelp, bNoTypeAhead, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true,
			maxLength: true
		};

		// get the configuration properties.
		bNoValueHelp = !this._oParent.getShowValueHelp();
		bNoTypeAhead = !this._oParent.getShowSuggestion();
		
		// create and return a combo box, if it has been configured.
		if (bNoValueHelp) {
			if (((this._oParent.data("controlType") === "dropDownList"))) {
				return this._createComboBox({
					annotation: null,
					noDialog: bNoValueHelp,
					noTypeAhead: true
				});
			}
		}

		return {
			control: new Input(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "change",
				parameter: "value"
			})),
			onCreate: "_onCreate",
			noDialog: bNoValueHelp,
			noTypeAhead: bNoTypeAhead,
			params: {
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates an instance of <code>sap.m.Combobox</code> based on OData meta data.
	 * 
	 * @param {object} oValueHelp the value help configuration.
	 * @param {object} oValueHelp.annotation the value help annotation.
	 * @param {object} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted.
	 * @param {object} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted.
	 * @returns {sap.m.Combobox} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createComboBox = function(oValueHelp) {
		var mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		return {
			control: new ComboBox(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "selectionChange",
				parameter: "selectedItem"
			})),
			onCreate: "_onCreate",
			params: {
				valuehelp: oValueHelp,
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates a control instance to edit a model property that is of type <code>Boolean</code>
	 * 
	 * @returns {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createBoolean = function() {
		var mAttributes = this.createAttributes("selected", this._oParent.getJsontype(), {}, {
			event: "select",
			parameter: "selected"
		});
		mAttributes.enabled = this._oParent.getEditable() && this._oParent.getEnabled();

		return {
			control: new CheckBox(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getSelected"
			}
		};
	};

	/**
	 * Creates a control instance to edit a model property of type <code>Date</code>.
	 * 
	 * @returns {sap.m.DatePicker} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createDate = function() {
		var mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		return {
			control: new DatePicker(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "change",
				parameter: "value"
			})),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates a control instance for display-only use cases.
	 * 
	 * @returns {sap.m.Text} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createDisplay = function() {
		var mNames = {
			width: true,
			textAlign: true
		};

		return {
			control: new Text(this.createAttributes("text", this._oParent.getJsontype(), mNames))
		};
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 * 
	 * @param {sap.ui.core.Control} oControl the new control.
	 * @param {map} mParams parameters to further define the behavior of the event handler.
	 * @private
	 */
	JSONControlFactory.prototype._onCreate = function(oControl, mParams) {
		var sGetValue;

		// place validations.
		this.addValidations(oControl);

		// add optional getValue call-back.
		if (mParams.getValue) {
			sGetValue = mParams.getValue;
			mParams.getValue = function() {
				return oControl[sGetValue]();
			};
		}
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	JSONControlFactory.prototype.destroy = function() {
		this._oTypes.destroy();
		this._oTypes = null;
		this._oMetaData = null;

		ControlFactoryBase.prototype.destroy.apply(this, []);
	};

	return JSONControlFactory;
}, true);

}; // end of sap/ui/comp/smartfield/JSONControlFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataTypes') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Utility class to access OData Types. The implementation operates on OData meta data, so an instance of <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * @public
 * @name sap.ui.comp.smartfield.ODataTypes
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.ui.core.format.NumberFormat} NumberFormat a reference to the number format implementation.
 * @param {sap.ui.model.odata.type.Boolean} BooleanType a reference to the boolean type implementation.
 * @param {sap.ui.comp.smartfield.type.DateTime} DateTimeType a reference to the date type implementation.
 * @param {sap.ui.comp.smartfield.type.DateTimeOffset} DateTimeOffsetType a reference to the date-time type implementation.
 * @param {sap.ui.comp.smartfield.type.Decimal} DecimalType a reference to the decimal type implementation.
 * @param {sap.ui.comp.smartfield.type.Int16} Int16Type a reference to the 16 bit integer type implementation.
 * @param {sap.ui.comp.smartfield.Int32} Int32Type a reference to the 32 bit integer type implementation.
 * @param {sap.ui.comp.smartfield.type.SByte} SByteType a reference to the SByte type implementation.
 * @param {sap.ui.comp.smartfield.type.String} StringType a reference to the string type implementation.
 * @param {sap.ui.comp.smartfield.type.AbapBool} AbapBoolean a reference to the simple boolean type implementation.
 * @param {sap.ui.model.type.Currency} CurrencyType a reference to the currency type implementation.
 * @returns {sap.ui.comp.smartfield.ODataTypes} the new instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataTypes'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Boolean'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Currency'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataTypes",[	"jquery.sap.global", "sap/ui/core/format/NumberFormat", "sap/ui/model/odata/type/Boolean", "sap/ui/comp/smartfield/type/DateTime", "sap/ui/comp/smartfield/type/DateTimeOffset", "sap/ui/comp/smartfield/type/Decimal", "sap/ui/comp/smartfield/type/Int16", "sap/ui/comp/smartfield/type/Int32", "sap/ui/comp/smartfield/type/SByte", "sap/ui/comp/smartfield/type/String", "sap/ui/comp/smartfield/type/AbapBool", "sap/ui/model/type/Currency" ], function(jQuery, NumberFormat, BooleanType, DateTimeType, DateTimeOffsetType, DecimalType, Int16Type, Int32Type, SByteType, StringType, AbapBoolean, CurrencyType) { // EXC_JSHINT_002 // EXC_JSHINT_037 // EXC_JSHINT_034
	"use strict";

	/**
	 * @public
	 * @constructor
	 * @param {sap.ui.core.Control} oParent the parent control.
	 */
	var ODataTypes = function(oParent) { // EXC_JSLINT_021
		this._oParent = oParent;
	};

	/**
	 * Returns an instance of a sub-class of <code>sap.ui.model.Type</code> depending on the OData property's EDM type.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {object} oFormatOptions optional format options as defined in e.g. {@link sap.ui.core.format.DateFormat}.
	 * @param {map} mConstraints optional constraints.
	 * @returns {sap.ui.model.Type} an instance of a sub-class of <code>sap.ui.model.Type</code>.
	 * @public
	 */
	ODataTypes.prototype.getType = function(oProperty, oFormatOptions, mConstraints) {
		var oConstraints;
		
		if (oProperty && oProperty.property && oProperty.property.type) {
			switch (oProperty.property.type) {
				case "Edm.Boolean":
					return new BooleanType();
				case "Edm.Decimal":
				case "Edm.Double":
				case "Edm.Float":
				case "Edm.Single":
					oConstraints = this._getDecimalConstraints(oProperty);
					return new DecimalType(oFormatOptions, oConstraints);
				case "Edm.Int16":
					return new Int16Type();
				case "Edm.Int32":
				case "Edm.Int64":
					return new Int32Type();
				case "Edm.Byte":
				case "Edm.SByte":
					return new SByteType();
				case "Edm.DateTimeOffset":
					return new DateTimeOffsetType(oFormatOptions, oConstraints);
				case "Edm.DateTime":
					oConstraints = this._getDateTimeConstraints(oProperty, mConstraints);
					return new DateTimeType(oFormatOptions, oConstraints);
				case "Edm.String":
					oConstraints = this._getStringConstraints(oProperty);
					return new StringType(oFormatOptions, oConstraints);
				default:
					return null;
			}
		}

		return null;
	};

	/**
	 * Calculates the constraints for <code>Edm.DateTime</code>.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {map} mConstraints optional constraints.
	 * @returns {map} the constraints.
	 * @private
	 */
	ODataTypes.prototype._getDateTimeConstraints = function(oProperty, mConstraints) {
		var oConstraints = {}, n;
		
		if (oProperty.extensions["sap:display-format"] === "Date") {
			oConstraints = {
				displayFormat: "Date"
			};
		}
		
		//constraints from control have priority.
		for (n in mConstraints) {  //EXC_JSHINT_041
			oConstraints[n] = mConstraints[n];
		}
		
		return oConstraints;
	};
	
	/**
	 * Calculates the value of the control's <code>maxLength</code> property. The value can be configured in the <code>maxLength</code> attribute
	 * of the OData property to which the the control's <code>value</code> property is bound to. Alternatively it can be configured in the the
	 * control's <code>maxLength</code> property. If both are available the minimum value of both is returned.
	 * 
	 * @param {object} oProp the property from which to take the <code>maxLength</code>.
	 * @param {object} oBind the <code>value</code> binding of the parent smart field. 
	 * @returns {integer} maximum number of characters, <code>0</code> means the feature is switched off.
	 * @public
	 */
	ODataTypes.prototype.getMaxLength = function(oProp, oBind) {
		var iProp, aVals = [], len, iVal, iField, iResult = 0;
		
		//is a max length available from binding.
		if (oBind && oBind.constraints) {
			if (oBind.constraints.maxLength && oBind.constraints.maxLength > -1) {
				//iBind = oBind.maxLength;
				aVals.push(oBind.constraints.maxLength);
			}
		}
		
		//is a max length available from binding type.
		if (oBind && oBind.type && oBind.type.oConstraints) {
			if (oBind.type.oConstraints.maxLength && oBind.type.oConstraints.maxLength > -1) {
				aVals.push(oBind.type.oConstraints.maxLength);
			}
		}
		
		//is a max length available from oData property.
		if (oProp && oProp.property && oProp.property.maxLength) {
			iProp = parseInt(oProp.property.maxLength, 10);
			
			if (iProp > -1) {
				aVals.push(iProp);
			}
		}
		
		// is a max length available from smart field property.
		iField = this._oParent.getMaxLength();
		
		if (iField > 0) {
			aVals.push(iField);
		}
				
		// now search for the minimum value larger than 0.
		// no value specified, return 0.
		len = aVals.length;
		
		while (len--) {
			iVal = aVals[len];
			
			if (iVal > 0) {
				if (iResult > 0) {
					if  (iVal < iResult) {
						iResult = iVal;
					}
				} else {
					iResult = iVal;
				}
			}
		}
		
		return iResult;
	};
	
	/**
	 * Calculates the constraints for a numeric Edm.Type, with optional <code>scale</code> and <code>precision</code>
	 * attributes of the OData property set.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {map} the constraints.
	 * @private
	 */
	ODataTypes.prototype._getDecimalConstraints = function(oProperty) {
		var mArgs = null;

		if (oProperty.property.precision) {
			mArgs = {};
			mArgs.precision = parseInt(oProperty.property.precision, 10);
		}

		if (oProperty.property.scale) {
			if (!mArgs) {
				mArgs = {};
			}
			
			mArgs.scale = parseInt(oProperty.property.scale, 10);
		}

		return mArgs;
	};
	
	/**
	 * Calculates the constraints for a property of type <code>Edm.String</code>.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {map} the constraints.
	 */
	ODataTypes.prototype._getStringConstraints = function(oProperty) {
		var iMaxLength, oEquals, oBind, mConstraints;
		
		//get the binding.
		oBind = this._oParent.getBindingInfo("value");
		
		// get max length.
		iMaxLength = this.getMaxLength(oProperty, oBind);
			
		// get the constrains: equals		
		if (oBind && oBind.type && oBind.type.oConstraints) {
			if (oBind.type.oConstraints.equals) {
				oEquals = oBind.type.oConstraints.equals;
			}
		}
		
		// now create the return value.
		if (iMaxLength > 0 || oEquals) {
			mConstraints = {};
			
			if (iMaxLength > 0) {
				mConstraints.maxLength = iMaxLength;
			}
			
			if (oEquals) {
				mConstraints.equals = oEquals;
			}
		}
		
		return mConstraints;
	};
	
	/**
	 * Checks whether an OData property represents semantically a display format and if it is 'UpperCase'.
	 * 
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {boolean} true if the display-format exists and has the value UpperCase.
	 * @public
	 */
	ODataTypes.prototype.isDisplayFormatUpperCase = function(oProperty) {
		if (oProperty && oProperty.extensions) {
			return oProperty.extensions["sap:display-format"] === "UpperCase"; // EXC_JSHINT_018
		}

		return false;
	};

	/**
	 * Returns formatter function for displaying a currency.
	 * 
	 * @returns {function} formatter function for displaying a currency.
	 * @public
	 */
	ODataTypes.prototype.getCurrencyDisplayFormatter = function() {
		var oFormat = NumberFormat.getCurrencyInstance({
			showMeasure: false
		});

		return function(oAmount, sCurrency) {
			var sValue, iCurrencyDigits, iPadding;

			if (!oAmount || !sCurrency || sCurrency === "*") {
				return "";
			}

			iCurrencyDigits = oFormat.oLocaleData.getCurrencyDigits(sCurrency);
			sValue = oFormat.format(oAmount, sCurrency);

			if (iCurrencyDigits === 0) {
				sValue += "\u2008";
			}

			iPadding = 3 - iCurrencyDigits;

			if (iPadding) {
				sValue = jQuery.sap.padRight(sValue, "\u2007", sValue.length + iPadding);
			}

			return sValue;
		};
	};

	/**
	 * Creates a new currency type instance and returns it.
	 * 
	 * @param {object} oProperty the OData property to use for constraint calculation, e.g. precision and scale.
	 * @returns {sap.ui.model.type.Currency} the new currency type instance.
	 * @public
	 */
	ODataTypes.prototype.getCurrencyType = function(oProperty) {
		var oConstraints;

		if (oProperty) {
			oConstraints = this._getDecimalConstraints(oProperty);
			return new CurrencyType({
				showMeasure: false
			}, oConstraints);
		}

		return null;
	};
	
	/**
	 * Creates a new ABAP Boolean type instance.
	 * 
	 * @returns {sap.ui.comp.smartfield.type.AbapBool} the new instance.
	 * @public
	 */
	ODataTypes.prototype.getAbapBoolean = function() {		
		return new AbapBoolean();
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ODataTypes.prototype.destroy = function() { // EXC_JSLINT_021
		this._oParent = null;
	};

	return ODataTypes;
}, true);

}; // end of sap/ui/comp/smartfield/ODataTypes.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.FilterProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the data-model required for SmartFilter using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.smartfilterbar.FilterProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateRangeSelection'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/FilterProvider",[
	'jquery.sap.global', 'sap/m/ComboBox', 'sap/m/DatePicker', 'sap/m/DateRangeSelection', 'sap/m/Input', 'sap/m/MultiComboBox', 'sap/m/MultiInput', 'sap/m/SearchField', 'sap/m/Token', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/providers/ValueHelpProvider', 'sap/ui/comp/providers/ValueListProvider', 'sap/ui/model/Filter', 'sap/ui/model/json/JSONModel', 'sap/ui/model/type/Float'
], function(jQuery, ComboBox, DatePicker, DateRangeSelection, Input, MultiComboBox, MultiInput, SearchField, Token, MetadataAnalyser, ValueHelpProvider, ValueListProvider, Filter, JSONModel, Float) {
	"use strict";

	/**
	 * Constructs a class to generate the view/datamodel metadata for the SmartFilterBar from the SAP-Annotations metadata
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, serviceUrl, entityType, additionalConfiguration
	 * @author Pavan Nayak, Thomas Biesemann
	 */
	var FilterProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this._sServiceURL = mPropertyBag.serviceUrl;
			this._sBasicSearchFieldName = mPropertyBag.basicSearchFieldName;
			this.sEntityType = mPropertyBag.entityType;
			this._isRunningInValueHelpDialog = mPropertyBag.isRunningInValueHelpDialog;
			this._oAdditionalConfiguration = mPropertyBag.additionalConfiguration;
			this.sDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			if (!this.sDefaultDropDownDisplayBehaviour || this.sDefaultDropDownDisplayBehaviour === sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.auto) {
				this.sDefaultDropDownDisplayBehaviour = sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.descriptionOnly;
			}
			this.sDefaultTokenDisplayBehaviour = mPropertyBag.defaultTokenDisplayBehaviour;
			if (!this.sDefaultTokenDisplayBehaviour || this.sDefaultTokenDisplayBehaviour === sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.auto) {
				this.sDefaultTokenDisplayBehaviour = sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.descriptionAndId;
			}
			if (typeof mPropertyBag.dateFormatSettings === "string") {
				try {
					this._oDateFormatSettings = mPropertyBag.dateFormatSettings ? JSON.parse(mPropertyBag.dateFormatSettings) : undefined;
				} catch (ex) {
					// Invalid dateformat provided!
				}
			} else {
				this._oDateFormatSettings = mPropertyBag.dateFormatSettings;
			}
			// Used for IN param handling (visible field)
			// TODO: CleanUp - a better handling
			this._oSmartFilter = mPropertyBag.smartFilter;
		}
		this.sFilterModelName = FilterProvider.FILTER_MODEL_NAME;
		this._sBasicFilterAreaID = FilterProvider.BASIC_FILTER_AREA_ID;
		this._aFilterBarViewMetadata = [];
		this._aFilterBarMultiValueFieldMetadata = [];
		this._aFilterBarDateFieldNames = [];
		// Array of FieldGroups from FieldGroup annotations
		this._aFieldGroupAnnotation = [];
		this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel || this._sServiceURL);
		// Initialise the model early so this can already be passed to the necessary helper classes --> Ex: BaseValueListProvider
		this.oModel = new JSONModel();
		// TODO: Loop over and destroy these on destroying this object!
		this._aValueListProvider = [];
		this._aValueHelpDialogProvider = [];
		this._intialiseMetadata();
	};

	FilterProvider.FILTER_MODEL_NAME = "fi1t3rM0d31";
	FilterProvider.BASIC_FILTER_AREA_ID = "_BASIC";
	FilterProvider.BASIC_SEARCH_FIELD_ID = "_BASIC_SEARCH_FIELD";
	FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY = "_CUSTOM";

	/**
	 * Initialises the necessary filter metadata and model
	 * 
	 * @private
	 */
	FilterProvider.prototype._intialiseMetadata = function() {
		var iGroupLen, iFieldLen, oODataFilterGroup, aODataFilterGroups, i, j, oFieldMetadata, oGroupMetadata, aCustomFilterField, aCustomGroup;
		// first, create a Basic Area Group (groupId/groupName shall be "_BASIC")
		this._aFilterBarViewMetadata.push({
			groupName: this._sBasicFilterAreaID,
			index: 0, // should be the 1st group on the UI
			fields: []
		});
		// Store name without namespace to determine the main entity (used for association filter expression)
		this.sEntityTypeName = this._oMetadataAnalyser.removeNamespace(this.sEntityType);
		aODataFilterGroups = this._oMetadataAnalyser.getAllFilterableFieldsByEntityTypeName(this.sEntityType);
		if (aODataFilterGroups) {
			// Get the array of FieldGroup annotations
			this._aFieldGroupAnnotation = this._oMetadataAnalyser.getFieldGroupAnnotation(this.sEntityType);

			// Create groups based on FieldGroup annotation
			if (this._aFieldGroupAnnotation) {
				iGroupLen = this._aFieldGroupAnnotation.length;
				for (i = 0; i < iGroupLen; i++) {
					// Create metadata for group
					oODataFilterGroup = this._aFieldGroupAnnotation[i];
					oGroupMetadata = this._createGroupMetadata(oODataFilterGroup);
					oGroupMetadata.index = this._aFilterBarViewMetadata.length; // Set the index to maintain the order
					this._aFilterBarViewMetadata.push(oGroupMetadata);
				}
			}

			// Create groups and fields based on entity metadata
			iGroupLen = aODataFilterGroups.length;
			for (i = 0; i < iGroupLen; i++) {
				// Create metadata for group
				oODataFilterGroup = aODataFilterGroups[i];
				iFieldLen = oODataFilterGroup.fields.length;
				oGroupMetadata = this._createGroupMetadata(oODataFilterGroup);
				this._aFilterBarViewMetadata.push(oGroupMetadata);

				// Create metadata for fields
				for (j = 0; j < iFieldLen; j++) {
					oFieldMetadata = this._createFieldMetadata(oODataFilterGroup.fields[j]);
					oGroupMetadata.fields.push(oFieldMetadata);
				}
			}
		}

		// custom groups
		aCustomGroup = this._getAdditionalConfigurationForCustomGroups(aODataFilterGroups);
		iGroupLen = aCustomGroup.length;
		for (j = 0; j < iGroupLen; j++) {
			oGroupMetadata = this._createGroupMetadataForCustomGroup(aCustomGroup[j]);
			if (oGroupMetadata) {
				this._aFilterBarViewMetadata.push(oGroupMetadata);
			}
		}

		// custom filter fields
		aCustomFilterField = this._getAdditionalConfigurationForCustomFilterFields();
		iFieldLen = aCustomFilterField.length;
		for (j = 0; j < iFieldLen; j++) {
			oFieldMetadata = this._createFieldMetadataForCustomFilterFields(aCustomFilterField[j]);
			if (oFieldMetadata) {
				this._aFilterBarViewMetadata[0].fields.push(oFieldMetadata);
			}
		}

		// Basic search
		if (this._hasBasicSearch()) {
			oFieldMetadata = this._createBasicSearchFieldMetadata();
			this._aFilterBarViewMetadata[0].fields.push(oFieldMetadata);
		}

		this._applyGroupId();
		this._applyIndexes();
		this._createInitialModel(true);
	};

	/**
	 * Returns a flag indicating whether a field for the basic search shall be rendered or not
	 * 
	 * @returns {boolean} Flag
	 * @private
	 */
	FilterProvider.prototype._hasBasicSearch = function() {
		return !!this._sBasicSearchFieldName;
	};

	/**
	 * Looks for custom filter fields from the additional configuration which have a name which is not known in the ODATA metadata
	 * 
	 * @returns {Array} Array containing the the control configuration of the additional filter fields
	 * @private
	 */
	FilterProvider.prototype._getAdditionalConfigurationForCustomFilterFields = function() {
		var aControlConfiguration, length, nODataFilterFieldKeyLength, i, aResult, j, bFound, aODataFilterFieldName;

		// get additional control configuration
		if (!this._oAdditionalConfiguration) {
			return [];
		}
		aControlConfiguration = this._oAdditionalConfiguration.getControlConfiguration();

		// get field names from OData metadata
		aODataFilterFieldName = this._oMetadataAnalyser.getAllFilterableFieldNamesByEntityTypeName(this.sEntityType);
		if (!aODataFilterFieldName || !aODataFilterFieldName.length) {
			return aControlConfiguration;
		}

		aResult = [];
		nODataFilterFieldKeyLength = aODataFilterFieldName.length;
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			bFound = false;
			for (j = 0; j < nODataFilterFieldKeyLength; j++) {
				if (aODataFilterFieldName[j] === aControlConfiguration[i].key) {
					bFound = true;
					break;
				}
			}
			if (!bFound) { // filter field for control configuration could not be found in OData metadata...this is a custom filter field!
				aResult.push(aControlConfiguration[i]);
			}
		}

		return aResult;
	};

	/**
	 * Looks for custom groups from the additional configuration which have a name which is not known in the ODATA metadata
	 * 
	 * @param {object} aODataFilterGroups - groups from the ODATA metadata
	 * @returns {Array} Array containing the the group configuration of the custom groups
	 * @private
	 */
	FilterProvider.prototype._getAdditionalConfigurationForCustomGroups = function(aODataFilterGroups) {
		var aGroupConfiguration, length, nODataGroupsLength, i, aResult, j, bFound;

		// get additional group configuration
		if (!this._oAdditionalConfiguration) {
			return [];
		}
		aGroupConfiguration = this._oAdditionalConfiguration.getGroupConfiguration();

		// get groups from OData metadata
		if (!aODataFilterGroups || !aODataFilterGroups.length) {
			return aGroupConfiguration;
		}

		aResult = [];
		nODataGroupsLength = aODataFilterGroups.length;
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			bFound = false;
			for (j = 0; j < nODataGroupsLength; j++) {
				if (aODataFilterGroups[j].groupName === aGroupConfiguration[i].key) {
					bFound = true;
					break;
				}
			}
			if (!bFound) { // group from group configuration could not be found in OData metadata...this is a custom group!
				aResult.push(aGroupConfiguration[i]);
			}
		}

		return aResult;
	};

	/**
	 * Initialises the necessary filter metadata and model
	 * 
	 * @param {object} oJSONData - The JSON data from the model
	 * @param {object} oFilterFieldMetadata - The metadata for the filter field
	 * @private
	 */
	FilterProvider.prototype._createInitialModelForField = function(oJSONData, oFilterFieldMetadata, bUseDefaultValues) {
		var aDefaultFilterValues, oDefaultFilterValue, bHasDefaultFilterValue = false, bIsRangeField = false, sLowValue = null, sHighValue = null, iLength, oItem = null, aItems = [], aRanges = [];
		// Model will no be created for custom filter fields..
		if (!oFilterFieldMetadata || oFilterFieldMetadata.isCustomFilterField) {
			return;
		}
		if (oFilterFieldMetadata.filterRestriction !== sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple) {
			bIsRangeField = true;
		}
		if (bUseDefaultValues) {
			// Get the array of default filter values
			aDefaultFilterValues = oFilterFieldMetadata.defaultFilterValues;
			bHasDefaultFilterValue = aDefaultFilterValues && aDefaultFilterValues.length;
		}
		if (oFilterFieldMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single) {
			// If there is a default filter value use only the low value of 1st one --> single filter scenario!
			if (bHasDefaultFilterValue) {
				oDefaultFilterValue = aDefaultFilterValues[0];
				sLowValue = oDefaultFilterValue.low;
			}
			oJSONData[oFilterFieldMetadata.fieldName] = sLowValue;

		} else if (oFilterFieldMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval) {
			// If there is a default filter value use both low and high, but only of the 1st one --> interval filter scenario!
			if (bHasDefaultFilterValue) {
				oDefaultFilterValue = aDefaultFilterValues[0];
				sLowValue = oDefaultFilterValue.low;
				sHighValue = oDefaultFilterValue.high;
			}
			oJSONData[oFilterFieldMetadata.fieldName] = {
				low: sLowValue,
				high: sHighValue
			};
		} else {
			// If there is a default filter value use all the low values as keys --> multiple/range
			if (bHasDefaultFilterValue) {
				iLength = aDefaultFilterValues.length;
				while (iLength--) {
					oDefaultFilterValue = aDefaultFilterValues[iLength];
					if (bIsRangeField) {
						oItem = {
							"exclude": oDefaultFilterValue.sign === "E",
							"operation": oDefaultFilterValue.operator,
							"keyField": oFilterFieldMetadata.fieldName,
							"value1": oDefaultFilterValue.low,
							"value2": oDefaultFilterValue.high
						};

					} else {
						oItem = {
							key: oDefaultFilterValue.low,
							text: oDefaultFilterValue.low
						};
					}

					aItems.push(oItem);
				}
			}
			// Add this to the local multi-value field array
			this._aFilterBarMultiValueFieldMetadata.push(oFilterFieldMetadata);
			// Update the model
			oJSONData[oFilterFieldMetadata.fieldName] = {
				value: null
			};
			if (bIsRangeField) {
				aRanges = aItems.slice(0);
				aItems = [];
				oJSONData[oFilterFieldMetadata.fieldName].ranges = aRanges;
			}
			oJSONData[oFilterFieldMetadata.fieldName].items = aItems;

			// Update the corresponding control with array value
			this._updateMultiValueControl(oFilterFieldMetadata.control, aItems, aRanges);
		}
	};

	/**
	 * Initialises the JSON model for filter fields
	 * 
	 * @private
	 */
	FilterProvider.prototype._createInitialModel = function(bUseDefaultValues) {
		var oJSONData, iGroupLength, iFieldLength, oGroup, j, i;
		oJSONData = {};
		// This will now be recreated if required
		this._aFilterBarMultiValueFieldMetadata = [];
		if (this._aFilterBarViewMetadata) {
			iGroupLength = this._aFilterBarViewMetadata.length;
			for (i = 0; i < iGroupLength; i++) {
				oGroup = this._aFilterBarViewMetadata[i];
				iFieldLength = oGroup.fields.length;
				for (j = 0; j < iFieldLength; j++) {
					this._createInitialModelForField(oJSONData, oGroup.fields[j], bUseDefaultValues);
				}
			}
		}
		this.oModel.setData(oJSONData);
	};

	/**
	 * Updates the multi-value control with initial/filter data
	 * 
	 * @param {object} oControl - the control to be updated
	 * @param {Array} aItems = the array of key, text values to be set in the control
	 * @private
	 */
	FilterProvider.prototype._updateMultiValueControl = function(oControl, aItems, aRanges) {
		var i = 0, aTokens = null, oToken = null, oRange = null, sText = null, aKeys = null;
		// MultiComboBox and MultiInput fields cannot be bound, since the tokens are created internally and do not support 2 way binding
		// In case the model is reset/set initially, set the tokens manually through this
		if (oControl && aItems) {
			i = aItems.length;
			if (oControl instanceof MultiInput) {
				aTokens = [];
				while (i--) {
					sText = aItems[i].text || aItems[i].key;
					aTokens.push(new Token({
						key: aItems[i].key,
						text: sText,
						tooltip: sText
					}));
				}
				if (aRanges) {
					i = aRanges.length;
					while (i--) {
						oRange = aRanges[i];

						sText = FilterProvider.getFormattedRangeText(oRange.operation, oRange.value1, oRange.value2, oRange.exclude);
						oToken = new Token({
							key: sText,
							text: sText,
							tooltip: sText
						});
						oToken.data("range", oRange);
						aTokens.push(oToken);
					}
				}
				oControl.setTokens(aTokens);
			}
			if (oControl instanceof MultiComboBox) {
				aKeys = [];
				while (i--) {
					aKeys.push(aItems[i].key);
				}
				oControl.setSelectedKeys(aKeys);
			}
		}
	};

	/**
	 * Updates the view metadata by applying index of groups and fields from the additional configuration.
	 * 
	 * @private
	 */
	FilterProvider.prototype._applyIndexes = function() {
		var groupLength, i;

		if (!this._aFilterBarViewMetadata) {
			return;
		}

		// sort groups by index
		this._aFilterBarViewMetadata = this._sortByIndex(this._aFilterBarViewMetadata);

		groupLength = this._aFilterBarViewMetadata.length;
		for (i = 0; i < groupLength; i++) {
			// sort fields of a group by index
			if (this._aFilterBarViewMetadata[i].fields) {
				this._aFilterBarViewMetadata[i].fields = this._sortByIndex(this._aFilterBarViewMetadata[i].fields);
			}
		}
	};

	/**
	 * Returns a new Array containing all Elements from the incoming Array and the order was changed considering the indexes
	 * 
	 * @param {Array} aArray - Array of objects having an index property
	 * @returns {Array} sorted array
	 * @private
	 */
	FilterProvider.prototype._sortByIndex = function(aArray) {
		var aFieldsHavingAnIndex, i, length, j, length2, aResult;

		if (!aArray || !aArray.length) {
			return aArray;
		}
		aResult = [];
		aFieldsHavingAnIndex = [];
		length = aArray.length;
		for (i = 0; i < length; i++) {
			if (parseInt(aArray[i].index, 10) || aArray[i].index === 0) {
				if (aFieldsHavingAnIndex.length === 0) {
					aFieldsHavingAnIndex.push(aArray[i]);
				} else {
					length2 = aFieldsHavingAnIndex.length;
					for (j = 0; j < length2; j++) {
						if (aFieldsHavingAnIndex[j].index > aArray[i].index) {
							aFieldsHavingAnIndex.splice(j, 0, aArray[i]);
							break;
						} else if (j + 1 === aFieldsHavingAnIndex.length) {
							aFieldsHavingAnIndex.push(aArray[i]);
							break;
						}
					}
				}
			} else {
				aResult.push(aArray[i]); // fields having no index...
			}
		}

		length = aFieldsHavingAnIndex.length;
		for (i = 0; i < length; i++) {
			if (aFieldsHavingAnIndex[i].index > aResult.length) {
				aResult.push(aFieldsHavingAnIndex[i]);
			} else {
				aResult.splice(aFieldsHavingAnIndex[i].index, 0, aFieldsHavingAnIndex[i]);
			}
		}
		return aResult;
	};

	/**
	 * Updates the view metadata by applying the groupId from the additional configuration.
	 * 
	 * @private
	 */
	FilterProvider.prototype._applyGroupId = function() {
		var groupLength, i, fieldLength, j, oField, oNewParentGroup, k;
		groupLength = this._aFilterBarViewMetadata.length;

		for (i = 0; i < groupLength; i++) {
			if (!this._aFilterBarViewMetadata[i].fields) { // if there are no fields...
				continue;
			}
			fieldLength = this._aFilterBarViewMetadata[i].fields.length;
			for (j = 0; j < fieldLength; j++) {
				oField = this._aFilterBarViewMetadata[i].fields[j];
				if (oField && oField.groupId && oField.groupId !== this._aFilterBarViewMetadata[i].groupName) {
					// Find new parent group
					oNewParentGroup = undefined;
					for (k = 0; k < groupLength; k++) {
						if (this._aFilterBarViewMetadata[k].groupName === oField.groupId) {
							oNewParentGroup = this._aFilterBarViewMetadata[k];
							break;
						}
					}

					// Move field to new parent group
					if (oNewParentGroup) {
						this._aFilterBarViewMetadata[i].fields.splice(j, 1);
						j--;
						fieldLength--;
						oNewParentGroup.fields = oNewParentGroup.fields || [];
						oNewParentGroup.fields.push(oField);
					}
				}
			}
		}
	};

	/**
	 * Creates a group based on the OData metadata
	 * 
	 * @private
	 * @param {object} oODataFilterBarGroup - OData metadata for group
	 * @returns {object} view metadata for group
	 */
	FilterProvider.prototype._createGroupMetadata = function(oODataFilterBarGroup) {
		var oGroupMetadata, oGroupConfiguration;

		// Get additional configuration for groups
		oGroupConfiguration = this._oAdditionalConfiguration.getGroupConfigurationByKey(oODataFilterBarGroup.groupName);

		oGroupMetadata = {};
		oGroupMetadata.groupName = oODataFilterBarGroup.groupName;
		oGroupMetadata.groupLabel = this._getGroupLabel(oODataFilterBarGroup, oGroupConfiguration); // if label is specified in additional
		// configuration,
		// pick this
		// one
		oGroupMetadata.fields = [];
		oGroupMetadata.index = this._getGroupIndex(oGroupConfiguration);

		return oGroupMetadata;
	};

	/**
	 * Creates a group based on the additional configuration (GroupConfiguration)
	 * 
	 * @private
	 * @param {object} oGroupConfiguration - OData metadata for group
	 * @returns {object} view metadata for group
	 */
	FilterProvider.prototype._createGroupMetadataForCustomGroup = function(oGroupConfiguration) {
		var oGroupMetadata;

		oGroupMetadata = {};
		oGroupMetadata.groupName = oGroupConfiguration.key;
		oGroupMetadata.groupLabel = oGroupConfiguration.label;
		// one
		oGroupMetadata.fields = [];
		oGroupMetadata.index = this._getGroupIndex(oGroupConfiguration);

		return oGroupMetadata;
	};

	/**
	 * Creates the control instance based on the OData Metadata and additional configuration
	 * 
	 * @param {object} oFieldViewMetadata - resolved filter view data with OData metadata and control configuration
	 * @returns an instance of the control to be used in the SmartFilterBar
	 * @private
	 */
	FilterProvider.prototype._createControl = function(oFieldViewMetadata) {
		var oControl, oType, bIsInterval = false, oFloatFormatOptions, fClearModel;

		// if a custom control is specified, use it
		if (oFieldViewMetadata.customControl) {
			return oFieldViewMetadata.customControl;
		}

		// Set type to float for decimal fields!
		if (oFieldViewMetadata.type === "Edm.Decimal") {
			if (oFieldViewMetadata.precision || oFieldViewMetadata.scale) {
				oFloatFormatOptions = {};
				if (oFieldViewMetadata.precision) {
					oFloatFormatOptions["maxIntegerDigits"] = parseInt(oFieldViewMetadata.precision, 10);
				}
				if (oFieldViewMetadata.scale) {
					oFloatFormatOptions["maxFractionDigits"] = parseInt(oFieldViewMetadata.scale, 10);
				}
			}

			oType = new Float(oFloatFormatOptions);
		}

		oControl = new oFieldViewMetadata.fControlConstructor();
		if (oFieldViewMetadata.fControlConstructor === DateRangeSelection) {
			oControl.bindProperty('dateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/low");
			oControl.bindProperty('secondDateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/high");
		} else if (oFieldViewMetadata.fControlConstructor === ComboBox) {
			if (oControl.setForceSelection) {
				oControl.setForceSelection(true);
			}
			this._associateValueList(oControl, "items", oFieldViewMetadata);
			oControl.bindProperty('selectedKey', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);
		} else if (oFieldViewMetadata.fControlConstructor === MultiComboBox) {
			this._associateValueList(oControl, "items", oFieldViewMetadata);
			// Listen to the selection change and update the model accordingly
			oControl.attachSelectionChange(jQuery.proxy(function(oEvt) {
				var oCtrl = oEvt.getSource(), aSelectedItems = null, aKeys = [], iLength;
				aSelectedItems = oCtrl.getSelectedItems();
				if (aSelectedItems) {
					iLength = aSelectedItems.length;
					while (iLength--) {
						aKeys.push({
							key: aSelectedItems[iLength].getKey(),
							text: aSelectedItems[iLength].getText()
						});
					}
				}
				if (this.oModel) {
					this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/items", aKeys);
				}
				// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
				oCtrl.fireChange({
					value: ""
				});
			}, this));
			oControl.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/value");
		} else if (oFieldViewMetadata.fControlConstructor === MultiInput) {
			if (oFieldViewMetadata.hasValueHelpDialog) {
				this._associateValueHelpDialog(oControl, oFieldViewMetadata, oFieldViewMetadata.filterRestriction !== sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple, true);
			} else {
				oControl.setShowValueHelp(false);
			}
			//oControl.setEnableMultiLineMode(true);
			oControl.bindProperty('value', {
				path: this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/value",
				type: oType
			});
		} else if (oFieldViewMetadata.fControlConstructor === Input) {
			if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval) {
				bIsInterval = true;
				// we assume the interval values shall be split by "-"; so bind only to low and resolve this later while creating the filters
				oControl.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/low");
				if (!this.oResourceBundle) {
					this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
				}
				if (!this.sIntervalPlaceholder) {
					this.sIntervalPlaceholder = this.oResourceBundle.getText("INTERVAL_PLACEHOLDER_TEXT");
				}
				oControl.setPlaceholder(this.sIntervalPlaceholder);
			} else {
				oControl.bindProperty('value', {
					path: this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName,
					type: oType
				});
			}
			if (oFieldViewMetadata.hasValueHelpDialog) {
				oControl.setShowValueHelp(true);
				this._associateValueHelpDialog(oControl, oFieldViewMetadata, false, false);
			}
		} else if (oFieldViewMetadata.fControlConstructor === DatePicker) {
			oControl.bindProperty('dateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);
		}

		if (this._oDateFormatSettings && this._oDateFormatSettings.style && oControl instanceof DatePicker) {
			oControl.setDisplayFormat(this._oDateFormatSettings.style);
		}

		if (oFieldViewMetadata.hasTypeAhead) {
			oControl.setShowSuggestion(true);
			oControl.setFilterSuggests(false);
			this._associateValueList(oControl, "suggestionRows", oFieldViewMetadata, true);
		}

		// Convert typed in values to UpperCase for displayFormat = UpperCase
		if (oFieldViewMetadata.displayFormat === "UpperCase" && oControl.attachChange && oControl.setValue) {
			oControl.attachChange(function() {
				var sValue = oControl.getValue();
				if (sValue) {
					oControl.setValue(sValue.toUpperCase());
				}
			});
		}

		// Additional handling for Input and MultiInput
		if (oControl instanceof Input) {
			// Set MaxLength for fields without any ValueListAnnotation or non intervals!
			if (!oFieldViewMetadata.oValueListAnnotation && !bIsInterval && oFieldViewMetadata.maxLength) {
				oControl.setMaxLength(parseInt(oFieldViewMetadata.maxLength, 10));
			}

			// Special handling when users clears the value or enters an invalid one
			if (oType) {
				fClearModel = jQuery.proxy(function(oEvent) {
					var oBindingInfo, oException, sState;
					// Empty Value is valid for filters
					if (oEvent.getParameter("newValue") === "") {
						sState = sap.ui.core.ValueState.None;
						if (oEvent.getParameter("property") === "value") {
							oBindingInfo = oControl.getBindingInfo("value");
							if (oBindingInfo && oBindingInfo.binding) {
								this.oModel.setProperty(oBindingInfo.binding.getPath(), null);
							}
						}
					} else {
						sState = sap.ui.core.ValueState.Error;
						oException = oEvent.getParameter("exception");
						if (oException) {
							if (oControl.setValueStateText) {
								oControl.setValueStateText(oException.message);
							}
						}
					}
					if (oControl && oControl.setValueState) {
						oControl.setValueState(sState);
					}
				}, this);
				oControl.attachParseError(fClearModel);
				oControl.attachFormatError(fClearModel);
				oControl.attachValidationError(fClearModel);
				oControl.attachValidationSuccess(function(oEvent) {
					if (oControl && oControl.setValueState) {
						oControl.setValueState(sap.ui.core.ValueState.None);
					}
				});
			}
		}

		return oControl;
	};

	/**
	 * Creates the control instance based on the OData Metadata and additional configuration
	 * 
	 * @param {object} oFieldViewMetadata - view metadata for the filter field
	 * @returns {function} - the constructor function of the control
	 * @private
	 */
	FilterProvider.prototype._getControlConstructor = function(oFieldViewMetadata) {
		// default to input
		var fControlConstructor = Input, bFilterRestrictionSingle, bFilterRestrictionInterval;

		// if a custom control is specified, use it
		if (oFieldViewMetadata.isCustomFilterField) {
			return;
		}

		bFilterRestrictionSingle = (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single);
		bFilterRestrictionInterval = (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval);

		if (oFieldViewMetadata.controlType === sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.date) {
			fControlConstructor = (bFilterRestrictionInterval) ? DateRangeSelection : DatePicker;
			// Filter Restriction is defaulted to auto, reset it to single if it is a date filter
			if (!bFilterRestrictionInterval) {
				oFieldViewMetadata.filterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single;
			}
			this._aFilterBarDateFieldNames.push(oFieldViewMetadata.fieldName); // Date fields need special handling to always store Date objects
		} else if (oFieldViewMetadata.controlType === sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.dropDownList) {
			fControlConstructor = (bFilterRestrictionSingle) ? ComboBox : MultiComboBox;
			// Filter Restriction is defaulted to auto, reset it to multiple if it is a MultiComboBox
			if (!bFilterRestrictionSingle) {
				oFieldViewMetadata.filterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple;
			}
		} else if (!bFilterRestrictionSingle && !bFilterRestrictionInterval) {
			fControlConstructor = MultiInput;
		}
		return fControlConstructor;
	};

	/**
	 * Associates the control with a ValueHelp Dialog using the details retrieved from the metadata (annotation)
	 * 
	 * @param {object} oControl - The control
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @param {boolean} bSupportRanges - Specify if the ValueHelpDialog supports ranges
	 * @param {boolean} bSupportMultiselect - Specify if the ValueHelpDialog supports multi select
	 * @private
	 */
	FilterProvider.prototype._associateValueHelpDialog = function(oControl, oFieldViewMetadata, bSupportRanges, bSupportMultiselect) {
		var oValueHelpDialogProvider;

		oValueHelpDialogProvider = new ValueHelpProvider({
			annotation: oFieldViewMetadata.oValueListAnnotation,
			additionalAnnotations: oFieldViewMetadata.additionalAnnotations,
			control: oControl,
			filterModel: this.oModel,
			filterProvider: this,
			model: this._oParentODataModel,
			preventInitialDataFetchInValueHelpDialog: oFieldViewMetadata.preventInitialDataFetchInValueHelpDialog,
			supportMultiSelect: bSupportMultiselect,
			supportRanges: bSupportRanges,
			isSingleIntervalRange: oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval,
			fieldName: oFieldViewMetadata.fieldName,
			type: oFieldViewMetadata.type,
			maxLength: oFieldViewMetadata.maxLength,
			displayFormat: oFieldViewMetadata.displayFormat,
			displayBehaviour: oFieldViewMetadata.displayBehaviour,
			title: oFieldViewMetadata.label
		});
		this._aValueHelpDialogProvider.push(oValueHelpDialogProvider);

		if (bSupportMultiselect) {
			oControl.attachTokenChange(jQuery.proxy(function(oEvt) {
				var aTokens = oEvt.getSource().getTokens(), aItems = [], iLength, oToken = null, oRangeData = null, aRanges = [];
				if (aTokens) {
					iLength = aTokens.length;
					while (iLength--) {
						oToken = aTokens[iLength];
						oRangeData = oToken.data("range");
						// Check if token is a range token
						if (oRangeData) {
							aRanges.push(oRangeData);
						} else {
							// Items array
							aItems.push({
								key: oToken.getKey(),
								text: oToken.getText()
							});
						}
					}
				}
				if (this.oModel) {
					this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/items", aItems);
					this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/ranges", aRanges);
				}
				// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
				oControl.fireChange({
					value: ""
				});
			}, this));
		}
	};

	/**
	 * Associates the control with a ValueList using the details retrieved from the metadata (annotation)
	 * 
	 * @param {object} oControl - The control
	 * @param {string} sAggregation - The aggregation in the control to bind to
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @param {boolean} bHasTypeAhead - Indicates whether the control also supports TypeAhead aka Suggest
	 * @private
	 */
	FilterProvider.prototype._associateValueList = function(oControl, sAggregation, oFieldViewMetadata, bHasTypeAhead) {
		if (oFieldViewMetadata.oValueListAnnotation) {
			this._aValueListProvider.push(new ValueListProvider({
				control: oControl,
				typeAheadEnabled: bHasTypeAhead,
				aggregation: sAggregation,
				displayFormat: oFieldViewMetadata.displayFormat,
				displayBehaviour: oFieldViewMetadata.displayBehaviour,
				annotation: oFieldViewMetadata.oValueListAnnotation,
				filterModel: this.oModel,
				filterProvider: this,
				model: this._oParentODataModel
			}));
		}
	};

	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @returns {object}
	 * @private
	 */
	FilterProvider.prototype._createFieldMetadata = function(oFilterFieldODataMetadata) {
		var oFieldViewMetadata, oControlConfiguration;

		oFilterFieldODataMetadata.fieldName = this._getFieldName(oFilterFieldODataMetadata);

		// Get Additional configuration
		oControlConfiguration = this._oAdditionalConfiguration.getControlConfigurationByKey(oFilterFieldODataMetadata.fieldName);

		oFieldViewMetadata = {};

		oFieldViewMetadata.fullName = oFilterFieldODataMetadata.fullName;
		oFieldViewMetadata.fieldName = oFilterFieldODataMetadata.fieldName;
		oFieldViewMetadata.type = oFilterFieldODataMetadata.type;
		oFieldViewMetadata.name = oFilterFieldODataMetadata.name;
		oFieldViewMetadata.displayFormat = oFilterFieldODataMetadata.displayFormat;
		oFieldViewMetadata.maxLength = oFilterFieldODataMetadata.maxLength;
		oFieldViewMetadata.precision = oFilterFieldODataMetadata.precision;
		oFieldViewMetadata.scale = oFilterFieldODataMetadata.scale;
		oFieldViewMetadata.filterRestriction = this._getFilterRestriction(oFilterFieldODataMetadata, oControlConfiguration);
		this._setAnnotationMetadata(oFieldViewMetadata);
		oFieldViewMetadata.hasValueHelpDialog = this._hasValueHelpDialog(oFieldViewMetadata, oControlConfiguration);
		oFieldViewMetadata.preventInitialDataFetchInValueHelpDialog = oControlConfiguration ? oControlConfiguration.preventInitialDataFetchInValueHelpDialog : true;
		oFieldViewMetadata.controlType = this._getControlType(oFieldViewMetadata, oControlConfiguration);
		oFieldViewMetadata.displayBehaviour = oControlConfiguration ? oControlConfiguration.displayBehaviour : undefined;
		oFieldViewMetadata.isCustomFilterField = !!(oControlConfiguration && oControlConfiguration.customControl);
		oFieldViewMetadata.visibleInAdvancedArea = !!(oControlConfiguration && oControlConfiguration.visibleInAdvancedArea);
		oFieldViewMetadata.label = this._getLabel(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.quickInfo = oFilterFieldODataMetadata.quickInfo;
		oFieldViewMetadata.isMandatory = this._isMandatory(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.width = this._getWidth(oControlConfiguration);
		oFieldViewMetadata.isVisible = this._isVisible(oControlConfiguration);
		oFieldViewMetadata.groupId = this._getGroupID(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.index = this._getIndex(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.fControlConstructor = this._getControlConstructor(oFieldViewMetadata);
		oFieldViewMetadata.hasTypeAhead = this._hasTypeAhead(oFieldViewMetadata, oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.customControl = oControlConfiguration ? oControlConfiguration.customControl : undefined;
		oFieldViewMetadata.control = this._createControl(oFieldViewMetadata);
		this._applyWidth(oFieldViewMetadata);
		oFieldViewMetadata.defaultFilterValues = oControlConfiguration ? oControlConfiguration.defaultFilterValues : undefined;

		return oFieldViewMetadata;
	};

	/**
	 * Creates the metadata for the basic search field. The basic search is supposed to be used in the ValuehelpDialog
	 * 
	 * @returns {object}
	 * @private
	 */
	FilterProvider.prototype._createBasicSearchFieldMetadata = function() {
		var oFieldViewMetadata;

		oFieldViewMetadata = {};
		oFieldViewMetadata.filterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single;
		oFieldViewMetadata.name = FilterProvider.BASIC_SEARCH_FIELD_ID;
		oFieldViewMetadata.fieldName = FilterProvider.BASIC_SEARCH_FIELD_ID;
		oFieldViewMetadata.label = undefined;
		oFieldViewMetadata.isMandatory = false;
		oFieldViewMetadata.isVisible = true;
		oFieldViewMetadata.groupId = FilterProvider.BASIC_FILTER_AREA_ID;
		oFieldViewMetadata.index = 0;
		oFieldViewMetadata.control = new SearchField({
			width: "28rem",
			showSearchButton: false
		});
		oFieldViewMetadata.control.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);

		return oFieldViewMetadata;
	};

	/**
	 * If a width is specified in the additional configruation, it will be applied to the control
	 * 
	 * @private
	 */
	FilterProvider.prototype._applyWidth = function(oFieldViewMetadata) {

		if (oFieldViewMetadata && oFieldViewMetadata.width && oFieldViewMetadata.control && oFieldViewMetadata.control.setWidth && (typeof oFieldViewMetadata.control.setWidth === 'function')) {
			oFieldViewMetadata.control.setWidth(oFieldViewMetadata.width);
		}
	};

	/**
	 * Set any annotation(s) metadata on the control
	 * 
	 * @private
	 */
	FilterProvider.prototype._setAnnotationMetadata = function(oFieldViewMetadata) {
		var mAnnotation = null;
		if (oFieldViewMetadata) {
			mAnnotation = this._oMetadataAnalyser.getValueListAnnotation(oFieldViewMetadata.fullName);
			oFieldViewMetadata.oValueListAnnotation = mAnnotation.primaryValueListAnnotation;
			oFieldViewMetadata.additionalAnnotations = mAnnotation.additionalAnnotations;
		}
	};

	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 * 
	 * @param {object} oControlConfiguration - the control configuration for the field
	 * @returns {object}
	 * @private
	 */
	FilterProvider.prototype._createFieldMetadataForCustomFilterFields = function(oControlConfiguration) {
		var oFieldViewMetadata;

		// Custom filter fields are required to have a custom control
		if (!oControlConfiguration || !oControlConfiguration.customControl) {
			return undefined;
		}

		oFieldViewMetadata = {};
		oFieldViewMetadata.name = oControlConfiguration.key;
		oFieldViewMetadata.fieldName = oControlConfiguration.key;
		oFieldViewMetadata.label = oControlConfiguration.label;
		oFieldViewMetadata.visibleInAdvancedArea = !!(oControlConfiguration && oControlConfiguration.visibleInAdvancedArea);
		oFieldViewMetadata.isVisible = this._isVisible(oControlConfiguration);
		oFieldViewMetadata.groupId = oControlConfiguration.groupId;
		oFieldViewMetadata.isMandatory = this._isMandatory(undefined, oControlConfiguration);
		oFieldViewMetadata.index = oControlConfiguration.index;
		oFieldViewMetadata.width = this._getWidth(oControlConfiguration);
		oFieldViewMetadata.control = oControlConfiguration.customControl;
		oFieldViewMetadata.isCustomFilterField = true;
		this._applyWidth(oFieldViewMetadata);

		return oFieldViewMetadata;
	};

	/**
	 * Extends the filter metadata with fieldName attribute which has the entity name for associations
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @returns {string}
	 * @private
	 */
	FilterProvider.prototype._getFieldName = function(oFilterFieldODataMetadata) {
		if (oFilterFieldODataMetadata.entityName === this.sEntityTypeName) {
			return oFilterFieldODataMetadata.name;
		} else {
			return oFilterFieldODataMetadata.entityName + "." + oFilterFieldODataMetadata.name;
		}
	};

	/**
	 * Returns a flag indicating whether the field supports the value help dialog, or not
	 * 
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean}
	 * @private
	 */
	FilterProvider.prototype._hasValueHelpDialog = function(oFieldViewMetadata, oControlConfiguration) {
		var bValueHelpDialog = true;

		if (oControlConfiguration) {
			if (oControlConfiguration.controlType === sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.dropDownList) {
				bValueHelpDialog = false;
			} else if (oControlConfiguration.hasValueHelpDialog !== true) {
				bValueHelpDialog = false;
			}
		}
		if (oFieldViewMetadata && !oFieldViewMetadata.oValueListAnnotation) {
			if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single || oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple) {
				bValueHelpDialog = false;
			}
		}

		return bValueHelpDialog;
	};

	/**
	 * Returns a flag indicating whether the field supports the value help dialog, or not
	 * 
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean}
	 * @private
	 */
	FilterProvider.prototype._isVisible = function(oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.isVisible === false) {
			return false;
		}

		return true;
	};

	/**
	 * Returns the width from the control configuration. Undefined if there is no width specified
	 * 
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {string} - width of the filter field
	 * @private
	 */
	FilterProvider.prototype._getWidth = function(oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.width) {
			return oControlConfiguration.width;
		}

		return undefined;
	};

	/**
	 * Returns a flag indicating whether the field supports the value help dialog, or not
	 * 
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean}
	 * @private
	 */
	FilterProvider.prototype._isMandatory = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.mandatory !== sap.ui.comp.smartfilterbar.ControlConfiguration.MANDATORY.auto) {
			return oControlConfiguration.mandatory === sap.ui.comp.smartfilterbar.ControlConfiguration.MANDATORY.mandatory;
		}
		if (oFilterFieldODataMetadata) {
			return oFilterFieldODataMetadata.requiredField;
		}
		return false;
	};

	/**
	 * Returns the effective filter restriction. Possible values can be found in this enum: sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} sFilterRestriction; the effective filter restriction
	 */
	FilterProvider.prototype._getFilterRestriction = function(oFilterFieldODataMetadata, oControlConfiguration) {
		var sFilterRestriction;

		if (oControlConfiguration && oControlConfiguration.filterType && oControlConfiguration.filterType !== sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.auto) {
			sFilterRestriction = oControlConfiguration.filterType;
		} else if (oFilterFieldODataMetadata.filterRestriction === "single-value") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.single;
		} else if (oFilterFieldODataMetadata.filterRestriction === "multi-value") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.multiple;
		} else if (oFilterFieldODataMetadata.filterRestriction === "interval") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.interval;
		} else {
			sFilterRestriction = sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE.auto;
		}

		return sFilterRestriction;
	};

	/**
	 * Returns the effective control type. Control types can be found in enum: sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE
	 * 
	 * @param {object} oFieldViewMetadata - view metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} sControlType; the effective control type
	 */
	FilterProvider.prototype._getControlType = function(oFieldViewMetadata, oControlConfiguration) {
		var sControlType;

		if (oControlConfiguration && oControlConfiguration.controlType && oControlConfiguration.controlType !== sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.auto) {
			sControlType = oControlConfiguration.controlType;
		} else if (oFieldViewMetadata.type === "Edm.DateTime" && oFieldViewMetadata.displayFormat === "Date") {
			sControlType = sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.date;
		} else if (oFieldViewMetadata.oValueListAnnotation && oFieldViewMetadata.oValueListAnnotation.semantics === "fixed-values") {
			sControlType = sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.dropDownList;
		} else {
			sControlType = sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE.input;
		}
		return sControlType;
	};

	/**
	 * Returns the id of the parent group for a filter field from the additional configuration
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns groupId; the groupId for the configuration
	 */
	FilterProvider.prototype._getGroupID = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.groupId) {
			return oControlConfiguration.groupId;
		} else if (oFilterFieldODataMetadata && oFilterFieldODataMetadata.requiredField) {
			return this._sBasicFilterAreaID;
		}
		return this._getGroupIDFromFieldGroup(oFilterFieldODataMetadata);
	};

	/**
	 * Returns the id (if found) of the parent group for a filter field from the FieldGroup annotation
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns groupId; the groupId for the field (if found)
	 */
	FilterProvider.prototype._getGroupIDFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, sGroupName;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields && oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.name) > -1) {
					sGroupName = oFieldGroupAnnotation.groupName;
					break;
				}
			}
		}
		return sGroupName;
	};

	/**
	 * Returns the label of the filter field. OData metadata and additional configuration are used for this
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns label for the filter field
	 */
	FilterProvider.prototype._getLabel = function(oFilterFieldODataMetadata, oControlConfiguration) {

		if (oControlConfiguration && oControlConfiguration.label) {
			return oControlConfiguration.label;
		}
		return this._getLabelFromFieldGroup(oFilterFieldODataMetadata) || oFilterFieldODataMetadata.fieldLabel || oFilterFieldODataMetadata.fieldName;
	};

	/**
	 * Returns the label (if found) of the filter field from the FieldGroup annotation
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns label; undefined if field is no part of field group annotation
	 */
	FilterProvider.prototype._getLabelFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, sLabel;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields && oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.name) > -1) {
					sLabel = oFieldGroupAnnotation.labels[oFilterFieldODataMetadata.name];
					break;
				}
			}
		}
		return sLabel;
	};

	/**
	 * Returns the index for a filter field from the additional configuration -or- based on FieldGroup annotation
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns index; undefined if index is not specified in additional configuration
	 */
	FilterProvider.prototype._getIndex = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && (oControlConfiguration.index || oControlConfiguration.index === 0)) {
			return oControlConfiguration.index;
		}
		return this._getIndexFromFieldGroup(oFilterFieldODataMetadata);
	};

	/**
	 * Returns the index (if found) of the filter field from the FieldGroup annotation
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns index; undefined if field is no part of field group annotation
	 */
	FilterProvider.prototype._getIndexFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, iIndex;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields) {
					iIndex = oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.name);
					if (iIndex > -1) {
						break;
					}
					iIndex = undefined;
				}
			}
		}
		return iIndex;
	};

	/**
	 * Returns the index for a filter group from the additional configuration
	 * 
	 * @param {object} oGroupConfiguration - Additional configuration for this filter group
	 * @private
	 * @returns index; undefined if index is not specified in additional configuration
	 */
	FilterProvider.prototype._getGroupIndex = function(oGroupConfiguration) {
		if (oGroupConfiguration && (oGroupConfiguration.index || oGroupConfiguration.index === 0)) {
			return oGroupConfiguration.index;
		}
	};

	/**
	 * Returns the label for a filter group from the additional configuration
	 * 
	 * @param {object} oFilterGroupODataMetadata - OData metadata for the filter group
	 * @param {object} oGroupConfiguration - Additional configuration for this filter group
	 * @private
	 * @returns index; undefined if label is not specified in additional configuration
	 */
	FilterProvider.prototype._getGroupLabel = function(oFilterGroupODataMetadata, oGroupConfiguration) {
		if (oGroupConfiguration && oGroupConfiguration.label) {
			return oGroupConfiguration.label;
		}
		return oFilterGroupODataMetadata.groupLabel || oFilterGroupODataMetadata.groupName;
	};

	/**
	 * Returns a flag indicating whether the field supports TypeAhead (aka. Suggest), or not
	 * 
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean}
	 * @private
	 */
	FilterProvider.prototype._hasTypeAhead = function(oFieldViewMetadata, oFilterFieldODataMetadata, oControlConfiguration) {
		var bHasTypeAhead;

		bHasTypeAhead = true;
		if (oControlConfiguration) {
			bHasTypeAhead = oControlConfiguration.hasTypeAhead;
		} else if (oFilterFieldODataMetadata.type !== "Edm.String") {
			return false;
		}
		// Disable type ahead for anything other than Input/MultiInput
		if (!(oFieldViewMetadata.fControlConstructor === Input || oFieldViewMetadata.fControlConstructor === MultiInput)) {
			return false;
		}

		return bHasTypeAhead;
	};

	/**
	 * Get the model
	 * 
	 * @returns {Object}
	 * @public
	 */
	FilterProvider.prototype.getModel = function() {
		return this.oModel;
	};

	/**
	 * Get the filterable fields
	 * 
	 * @returns {Array}
	 * @public
	 */
	FilterProvider.prototype.getFilterBarViewMetadata = function() {
		return this._aFilterBarViewMetadata;
	};

	/**
	 * Returns an parameter object which can be used to restrict the query result from OData. This function is required only for the basic search.
	 * 
	 * @returns {object} object containing OData query parameters
	 * @public
	 */
	FilterProvider.prototype.getParameters = function() {
		var oParameter, sBasicSearchText = null;

		if (this.oModel) {
			sBasicSearchText = this.oModel.getProperty("/" + FilterProvider.BASIC_SEARCH_FIELD_ID);
		}

		if (this._sBasicSearchFieldName || sBasicSearchText) {
			oParameter = {
				custom: {
					"search-focus": this._sBasicSearchFieldName,
					"search": sBasicSearchText || ""
				}
			};
		}
		return oParameter;
	};

	/**
	 * Returns an array of filters that can be used to restrict the query result from OData
	 * 
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {Array} array of filters if any
	 * @public
	 */
	FilterProvider.prototype.getFilters = function(aFieldNames) {
		var oData = null;
		if (this.oModel) {
			oData = this.oModel.getData();
		}
		return FilterProvider.generateFilters(aFieldNames, oData, this._oDateFormatSettings);
	};

	/**
	 * Returns the data currently set in the filter data model
	 * 
	 * @returns {object} the json data in the filter bar
	 * @public
	 */
	FilterProvider.prototype.getFilterData = function() {
		return this.oModel ? this.oModel.getData() : null;
	};

	/**
	 * Returns the data currently set in the filter data model as string
	 * 
	 * @returns {string} the string json data in the filter bar
	 * @public
	 */
	FilterProvider.prototype.getFilterDataAsString = function() {
		return this.oModel ? this.oModel.getJSON() : null;
	};

	/**
	 * Returns the filled data currently set in the filter data model
	 * 
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {object} the json data in the filter bar
	 * @public
	 */
	FilterProvider.prototype.getFilledFilterData = function(aFieldNames) {
		var oData, oFilledData = {}, iFieldLength, sField, oValue;
		oData = this.oModel ? this.oModel.getData() : null;
		if (oData && aFieldNames) {
			iFieldLength = aFieldNames.length;
			while (iFieldLength--) {
				sField = aFieldNames[iFieldLength];
				if (sField && sField !== FilterProvider.BASIC_SEARCH_FIELD_ID) {
					oValue = oData[sField];
					if (oValue && oValue.hasOwnProperty("low")) {// interval
						if (oValue.low) {
							oFilledData[sField] = oValue;
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// unrestricted/multi-value
						if (oValue.value && typeof oValue.value === "string") {
							oValue.value = oValue.value.trim();
						}
						if (oValue.items.length || (oValue.ranges && oValue.ranges.length) || oValue.value) {
							oFilledData[sField] = oValue;
						}
					} else if (oValue) {// Single Value
						if (typeof oValue === "string") {
							oValue = oValue.trim();
						}
						if (oValue) {
							oFilledData[sField] = oValue;
						}
					}
				}
				// Finally fill the Custom data if it exists
				if (iFieldLength === 0) {
					sField = FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY;
					oValue = oData[sField];
					if (oValue) {
						oFilledData[sField] = oValue;
					}
				}
			}
		}
		// Always return a copy of the original data, since some objects may be referenced elsewhere and could get destroyed (or removed) during
		// usage!
		return jQuery.extend(true, {}, oFilledData);
	};

	/**
	 * Returns the filled data currently set in the filter data model as string
	 * 
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {string} the string json data in the filter bar
	 * @public
	 */
	FilterProvider.prototype.getFilledFilterDataAsString = function(aFieldNames) {
		return JSON.stringify(this.getFilledFilterData(aFieldNames));
	};

	/**
	 * Sets the data in the filter data model
	 * 
	 * @param {object} oJson - the json data in the filter bar
	 * @param {boolean} bReplace - Replace existing filter data
	 * @public
	 */
	FilterProvider.prototype.setFilterData = function(oJson, bReplace) {
		var oData = null, aFieldNames = null, sKey = null;
		if (this.oModel && oJson) {
			if (bReplace) {
				this._createInitialModel(false);
			}
			oData = this._parseFilterData(oJson, bReplace);
			if (oData) {
				this.oModel.setData(oData, true);
				aFieldNames = [];
				for (sKey in oData) {
					aFieldNames.push(sKey);
				}
				this._handleFilterDataUpdate(aFieldNames);
			}
		}
	};

	/**
	 * Sets the data in the filter data model as string
	 * 
	 * @param {string} sJson - the json data in the filter bar
	 * @param {boolean} bReplace - Replace existing filter data
	 * @public
	 */
	FilterProvider.prototype.setFilterDataAsString = function(sJson, bReplace) {
		if (sJson) {
			this.setFilterData(JSON.parse(sJson), bReplace);
		}
	};

	/**
	 * Parse the filter data to handle some formats and not consider all formats
	 * 
	 * @param {object} oJson = the filter data input
	 * @returns {Object} the
	 * @private
	 */
	FilterProvider.prototype._parseFilterData = function(oJson, bReplace) {
		return FilterProvider.parseFilterData(this.oModel.getData(), oJson, this._aFilterBarDateFieldNames, bReplace);
	};

	/**
	 * Called once the FilterData is set via SetFilterData. Handles control update for non binding controls (multi-value)
	 * 
	 * @param {Array} aFieldNames - Array containing name of updated fields
	 * @private
	 */
	FilterProvider.prototype._handleFilterDataUpdate = function(aFieldNames) {
		var i = 0, oFilterFieldMetadata, oData, oFilterData;
		if (this._aFilterBarMultiValueFieldMetadata) {
			i = this._aFilterBarMultiValueFieldMetadata.length;
			while (i--) {
				if (!oData) {
					oData = this.oModel.getData();
				}
				if (oData) {
					oFilterFieldMetadata = this._aFilterBarMultiValueFieldMetadata[i];
					// Only update the value if the field was changed in the handleDataUpate
					if (aFieldNames.indexOf(oFilterFieldMetadata.fieldName) > -1) {
						oFilterData = oData[oFilterFieldMetadata.fieldName];
						if (oFilterData) {
							this._updateMultiValueControl(oFilterFieldMetadata.control, oFilterData.items, oFilterData.ranges);
						}
					}
				}
			}
		}
	};

	/**
	 * Clears the model
	 * 
	 * @public
	 */
	FilterProvider.prototype.clear = function() {
		this._createInitialModel(false);
	};

	/**
	 * Resets the model
	 * 
	 * @public
	 */
	FilterProvider.prototype.reset = function() {
		this._createInitialModel(true);
	};

	// TODO: Move this to a Util
	/**
	 * Static function to generate filter array from the given field name array and Json data object
	 * 
	 * @param {Array} aFieldNames - array of field names
	 * @param {object} oData - the json object data
	 * @returns {Array} array of sap.ui.model.Filter
	 * @private
	 */
	FilterProvider.generateFilters = function(aFieldNames, oData, oDateFormatSettings) {
		var aFilters = [], aArrayFilters = null, oExcludeFilters = null, aExcludeFilters = null, sField = null, oValue = null, oValue1, oValue2, aValue = null, iLen = 0, iFieldLength = 0;
		if (aFieldNames && oData) {
			iFieldLength = aFieldNames.length;
			while (iFieldLength--) {
				sField = aFieldNames[iFieldLength];
				if (sField && sField !== FilterProvider.BASIC_SEARCH_FIELD_ID) {
					oValue = oData[sField];
					if (oValue && oValue.hasOwnProperty("low")) {// The data in the model corresponds to low and high Objects
						if (oValue.low && oValue.high) {
							oValue1 = oValue.low;
							oValue2 = oValue.high;
							if (oDateFormatSettings && oDateFormatSettings.UTC && oValue1 instanceof Date && oValue2 instanceof Date) {
								oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
								oValue2 = FilterProvider.getDateInUTCOffset(oValue2);
							}
							aFilters.push(new Filter(sField.replace(".", "/"), sap.ui.model.FilterOperator.BT, oValue1, oValue2));
						} else if (oValue.low) {
							// since we bind non date interval values only to low; resolve this by splitting "-" into an interval
							aValue = oValue.low.split("-");
							if (aValue && aValue.length === 2) {
								aFilters.push(new Filter(sField.replace(".", "/"), sap.ui.model.FilterOperator.BT, aValue[0], aValue[1]));
							} else {
								// We do not have an interval value --> Use typed in value as a single value filter
								aFilters.push(new Filter(sField.replace(".", "/"), sap.ui.model.FilterOperator.EQ, oValue.low));
							}
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// The data in the model corresponds to multi-value/range with a typed in
						// value
						aArrayFilters = [];
						aExcludeFilters = [];
						oExcludeFilters = null;
						if (oValue && oValue.hasOwnProperty("ranges")) { // Check if the data is for an unrestricted filter
							aValue = oValue.ranges;
							iLen = aValue.length;
							// Range Filters
							while (iLen--) {
								if (aValue[iLen].exclude) { // Exclude Select Option is not supported entirely except EQ, which can be changed to NE
									if (aValue[iLen].operation === sap.ui.model.FilterOperator.EQ) {
										aExcludeFilters.push(new Filter(sField.replace(".", "/"), sap.ui.model.FilterOperator.NE, aValue[iLen].value1));
									}
								} else {
									aArrayFilters.push(new Filter(sField.replace(".", "/"), aValue[iLen].operation, aValue[iLen].value1, aValue[iLen].value2));
								}
							}
							if (aExcludeFilters.length) {
								oExcludeFilters = new Filter(aExcludeFilters, true);
							}
						}
						aValue = oValue.items;
						iLen = aValue.length;
						// Item filters
						while (iLen--) {
							aArrayFilters.push(new Filter(sField.replace(".", "/"), sap.ui.model.FilterOperator.EQ, aValue[iLen].key));
						}
						if (oValue.value || oValue.value === 0) {
							if (typeof oValue.value === "string") {
								oValue.value = oValue.value.trim();
							}
							if (oValue.value || oValue.value === 0) {
								aArrayFilters.push(new Filter(sField.replace(".", "/"), sap.ui.model.FilterOperator.EQ, oValue.value));
							}
						}

						// OR the array values while creating the filter
						if (aArrayFilters.length) {
							// If Exclude and array (inlcude) filters exists --> use AND between them before pushing to the filter array
							if (oExcludeFilters) {
								aFilters.push(new Filter([
									new Filter(aArrayFilters, false), oExcludeFilters
								], true));
							} else {
								aFilters.push(new Filter(aArrayFilters, false));
							}
						} else if (oExcludeFilters) {
							// Only exclude filters exists --> add to the filter array
							aFilters.push(oExcludeFilters);
						}
					} else if (oValue || oValue === 0) {// Single Value
						if (typeof oValue === "string") {
							oValue = oValue.trim();
						}
						if (oDateFormatSettings && oDateFormatSettings.UTC && oValue instanceof Date) {
							oValue = FilterProvider.getDateInUTCOffset(oValue);
						}
						if (oValue || oValue === 0) {
							aFilters.push(new Filter(sField.replace(".", "/"), sap.ui.model.FilterOperator.EQ, oValue));
						}
					}
				}
			}
		}
		// AND the top level filter attributes if there is more than 1
		return (aFilters.length > 1) ? [
			new Filter(aFilters, true)
		] : aFilters;
	};

	// TODO: Move this to a Util
	/**
	 * Static function to parse and convert json data to be set into the data of the filter model (JsonModel.oData) into proper format
	 * 
	 * @private
	 * @param {Object} oData - The data from the datamodel
	 * @param {Object} oInputJson - the json object data that needs to be convered/parsed
	 * @param {Array} aFilterBarDateFieldNames - the name of the date fields (since we need to convert Date fields to JavaScript Date objects)
	 * @returns {Object} The resolved/parsed/converted data that can be set into the model
	 */
	FilterProvider.parseFilterData = function(oData, oInputJson, aFilterBarDateFieldNames, bReplace) {
		var oResolvedData = {}, sField = null, oValue = null, oNewValue, oJson;
		if (!aFilterBarDateFieldNames) {
			aFilterBarDateFieldNames = [];
		}
		if (oData && oInputJson) {
			oJson = jQuery.extend({}, oInputJson, true);
			for (sField in oJson) {
				if (oData.hasOwnProperty(sField) && sField !== FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY) {
					oValue = oData[sField];
					oNewValue = oJson[sField];
					if (oValue && oValue.hasOwnProperty("low")) {// interval
						if (oNewValue.low && oNewValue.high) { // Date Range
							oResolvedData[sField] = oNewValue;
							if (!(oNewValue.low instanceof Date)) { // Date needs to be set as a Date Object always!
								oResolvedData[sField].low = new Date(oNewValue.low);
							}
							if (!(oNewValue.high instanceof Date)) {// Date needs to be set as a Date Object always!
								oResolvedData[sField].high = new Date(oNewValue.high);
							}
						} else if (oNewValue.low && !oNewValue.high) {
							oResolvedData[sField] = {
								low: oNewValue.low,
								high: null
							};
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// unrestricted/multi-value
						if (oNewValue.items || oNewValue.ranges) { // Unrestricted/multi-value
							oResolvedData[sField] = oNewValue;
						} else if (typeof oNewValue === "string" || typeof oNewValue === "number") { // Single Value
							oResolvedData[sField] = {
								value: oNewValue,
								items: []
							};
						}
					} else {// single value
						oResolvedData[sField] = null; // Default to null!
						if (typeof oNewValue === "string" || oNewValue instanceof Date) { // Single Date or string value
							if (typeof oNewValue === "string" && aFilterBarDateFieldNames.indexOf(sField) > -1) { // String input but date expected
								oResolvedData[sField] = new Date(oNewValue);
							} else {
								oResolvedData[sField] = oNewValue;
							}
						} else if (oNewValue && (oNewValue.value || oNewValue.value === 0)) { // Use the types in value from multiValue if any
							oResolvedData[sField] = oNewValue.value;
						} else if (oNewValue && oNewValue.items && oNewValue.items.length) { // use the 1st value in items array if any
							oResolvedData[sField] = oNewValue.items[0].key;
						}
					}
				} else if (bReplace || sField === FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY) {
					// Value is for _CUSTOM -> add it as it is
					oResolvedData[sField] = oJson[sField];
				}
			}
		}
		return oResolvedData;
	};

	/**
	 * Static function that returns a UTC offset date
	 * 
	 * @private
	 * @param {Object} oDate - The input date object
	 * @returns {Object} The UTC offset date object
	 */
	FilterProvider.getDateInUTCOffset = function(oDate) {
		return new Date(oDate.valueOf() - oDate.getTimezoneOffset() * 60 * 1000);
	};

	// TODO: Move this to a Util
	/**
	 * Static function that returns a formatted expression based on the displayBehaviour. Fallback is to return the Id (sId)
	 * 
	 * @param {string} sDisplayBehaviour - the display behaviour (as defined in: sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR)
	 * @param {string} sId - the Id field name/path in the model
	 * @param {string} sDescription - the Description field name/path in the model
	 * @returns {string} the calulated path based on the displayBehaviour
	 * @private
	 */
	FilterProvider.getFormattedExpressionFromDisplayBehaviour = function(sDisplayBehaviour, sId, sDescription) {
		var sTextBinding = null;

		switch (sDisplayBehaviour) {
			case sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.descriptionAndId:
				sTextBinding = sDescription + " (" + sId + ")";
				break;
			case sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.idAndDescription:
				sTextBinding = sId + " (" + sDescription + ")";
				break;
			case sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR.descriptionOnly:
				sTextBinding = sDescription;
				break;
			// fallback to Id in case nothing was specified
			default:
				sTextBinding = sId;
				break;
		}

		return sTextBinding;
	};

	// TODO: Move to a Util
	/**
	 * creates and returns a formatted text for the specified range
	 * 
	 * @private
	 * @param {string} sOperation the operation type sap.ui.model.FilterOperator
	 * @param {string} sValue1 value of the first range field
	 * @param {string} sValue2 value of the second range field
	 * @param {boolean} bExclude indicates if the range is an Exclude range
	 * @returns {string} the range token text
	 */
	FilterProvider.getFormattedRangeText = function(sOperation, sValue1, sValue2, bExclude) {
		var sTokenText = "";
		if (sValue1) {
			switch (sOperation) {
				case sap.ui.model.FilterOperator.EQ:
					sTokenText = "=" + sValue1;
					break;
				case sap.ui.model.FilterOperator.GT:
					sTokenText = ">" + sValue1;
					break;
				case sap.ui.model.FilterOperator.GE:
					sTokenText = ">=" + sValue1;
					break;
				case sap.ui.model.FilterOperator.LT:
					sTokenText = "<" + sValue1;
					break;
				case sap.ui.model.FilterOperator.LE:
					sTokenText = "<=" + sValue1;
					break;
				case sap.ui.model.FilterOperator.Contains:
					sTokenText = "*" + sValue1 + "*";
					break;
				case sap.ui.model.FilterOperator.StartsWith:
					sTokenText = sValue1 + "*";
					break;
				case sap.ui.model.FilterOperator.EndsWith:
					sTokenText = "*" + sValue1;
					break;
				case sap.ui.model.FilterOperator.BT:
					if (sValue2) {
						sTokenText = sValue1 + "..." + sValue2;
					}
					break;
			}
		}

		if (bExclude && sTokenText) {
			sTokenText = "!(" + sTokenText + ")";
		}

		return sTokenText;
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	FilterProvider.prototype.destroy = function() {
		var i = 0;
		this._aFilterBarViewMetadata = null;
		this._aFilterBarDateFieldNames = null;
		this._aFilterBarMultiValueFieldMetadata = null;
		this._aFieldGroupAnnotation = null;

		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;

		if (this._aValueHelpDialogProvider) {
			i = this._aValueHelpDialogProvider.length;
			while (i--) {
				this._aValueHelpDialogProvider[i].destroy();
			}
		}
		this._aValueHelpDialogProvider = null;

		if (this._aValueListProvider) {
			i = this._aValueListProvider.length;
			while (i--) {
				this._aValueListProvider[i].destroy();
			}
		}
		this._aValueListProvider = null;

		this.oResourceBundle = null;
		this.sIntervalPlaceholder = null;
		this.sDefaultDropDownDisplayBehaviour = null;
		this.sDefaultTokenDisplayBehaviour = null;
		this._oSmartFilter = null;

		this.bIsDestroyed = true;
	};

	return FilterProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/FilterProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FieldListNode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.flexibility.FieldListNode.
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FieldListNode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexJustifyContent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FieldListNode",['jquery.sap.global', 'sap/m/CheckBox', 'sap/m/FlexBox', 'sap/m/FlexJustifyContent', 'sap/ui/comp/library', './Input', 'sap/ui/core/Control'],
	function(jQuery, CheckBox, FlexBox, FlexJustifyContent, library, Input, Control) {
	"use strict";


	
	/**
	 * Constructor for a new smartform/flexibility/FieldListNode.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A node within the field list control
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.flexibility.FieldListNode
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FieldListNode = Control.extend("sap.ui.comp.smartform.flexibility.FieldListNode", /** @lends sap.ui.comp.smartform.flexibility.FieldListNode.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * The label
			 */
			label : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * is visible flag
			 */
			isVisible : {type : "boolean", group : "Misc", defaultValue : null},
	
			/**
			 * is node selected
			 */
			isSelected : {type : "boolean", group : "Misc", defaultValue : null}
		},
		aggregations : {
	
			/**
			 * Nodes representing either a Form, a Group or a field
			 */
			nodes : {type : "sap.ui.comp.smartform.flexibility.FieldListNode", multiple : true, singularName : "node"}, 
	
			/**
			 * private aggregation
			 */
			layout : {type : "sap.ui.core.Control", multiple : false}
		},
		events : {
	
			/**
			 * node was selected
			 */
			selected : {
				parameters : {
	
					/**
					 * The inner node which was clicked
					 */
					target : {type : "sap.ui.comp.smartform.flexibility.FieldListNode"}
				}
			}
		}
	}});
	
	
	/**
	 * Init
	 * 
	 * @private
	 */
	FieldListNode.prototype.init = function() {

	
		this._textResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
	
		this._oLayout = new FlexBox({
			justifyContent: FlexJustifyContent.FlexStart
		});
	
		this._oIsVisibleCheckbox = new CheckBox(this.getId() + '-CheckBox');
		this._oIsVisibleCheckbox.setTooltip(this._textResources.getText("FORM_PERS_VIS_CHECKBOX_TOOLTIP"));
		this._oIsVisibleCheckbox.setSelected(this.getIsVisible());
		this._oIsVisibleCheckbox.attachSelect(this._onCheckboxChanged.bind(this));
		this._oIsVisibleCheckbox.setLayoutData(new sap.m.FlexItemData({
			order: 1
		}));
		this._oLayout.addItem(this._oIsVisibleCheckbox);
	
		this._oLabelInputField = new Input(this.getId() + '-Input');
		this._oLabelInputField.addStyleClass("sapUiCompFieldListNodeLabelInputField");
		this._oLabelInputField.setValue(this.getLabel());
		this._oLabelInputField.setEditable(false);
		this._oLabelInputField.attachChange(this._onLabelChanged.bind(this));
		this._oLabelInputField.attachSelectedByKeyboard(this._onLabelSelectedByKeyboard.bind(this));
		this._oLabelInputField.setLayoutData(new sap.m.FlexItemData({
			order: 2
		}));
		this._oLayout.addItem(this._oLabelInputField);
		this.setLayout(this._oLayout);
	};
	
	/**
	 * Overwritten - Sets the label property
	 * 
	 * @param {string} sLabel Label
	 * @ublic
	 */
	FieldListNode.prototype.setLabel = function(sLabel) {

		this._oLabelInputField.setValue(sLabel);
		this.setProperty("label", sLabel);
	};
	
	/**
	 * Overwritten - Sets the isVisible property
	 * 
	 * @param {boolean} bIsVisible isVisible
	 * @ublic
	 */
	FieldListNode.prototype.setIsVisible = function(bIsVisible) {

		this._oIsVisibleCheckbox.setSelected(bIsVisible);
		this.setProperty("isVisible", bIsVisible);
	};
	
	/**
	 * Overwritten - Sets the isSelected property
	 * 
	 * @param {boolean} bIsSelected field list node selected
	 * @public
	 */
	FieldListNode.prototype.setIsSelected = function(bIsSelected) {

		if (!bIsSelected) {
			this._oLabelInputField.setEditable(false);
		}
		this.setProperty("isSelected", bIsSelected);
	};
	
	/**
	 * Event handler - called when the user changes the checkbox value
	 * 
	 * @param {object} oEvent Event
	 * @ublic
	 */
	FieldListNode.prototype._onCheckboxChanged = function(oEvent) {

		var bIsVisible;
		bIsVisible = this._oIsVisibleCheckbox.getSelected();
		if (bIsVisible !== this.getIsVisible()) {
			this.setProperty("isVisible", bIsVisible);
		}
	};
	
	/**
	 * Event handler - called when the user changes the label
	 * 
	 * @param {object} oEvent Event
	 * @public
	 */
	FieldListNode.prototype._onLabelChanged = function(oEvent) {

		var sLabel;
		sLabel = this._oLabelInputField.getValue();
		if (sLabel !== this.getLabel()) {
			this.setProperty("label", sLabel);
		}
		this._oLabelInputField.setEditable(false);
	};
	
	/**
	 * Event handler - called when the user has selected the label using the keyboard
	 * 
	 * @param {object} oEvent Event
	 * @public
	 */
	FieldListNode.prototype._onLabelSelectedByKeyboard = function(oEvent) {

	
		this._oLabelInputField.setEditable(true);
		this._fireSelectedAndDelegateToParent(this);
	};
	
	/**
	 * Overwritten - Registers to DOM events after rendering
	 * 
	 * @private
	 */
	FieldListNode.prototype.onAfterRendering = function() {

		this.registerToDOMEvents();
	};
	
	/**
	 * Overwritten - Registers to DOM events before rendering
	 * 
	 * @private
	 */
	FieldListNode.prototype.onBeforeRendering = function() {

		this.deregisterToDOMEvents();
	};
	
	/**
	 * @private Registers to DOM events like mouse events
	 */
	FieldListNode.prototype.registerToDOMEvents = function() {

		jQuery("#" + this.getId()).on('click', jQuery.proxy(this._handleClick, this));
	};
	
	/**
	 * @private Deregisters from DOM events
	 */
	FieldListNode.prototype.deregisterToDOMEvents = function() {

		jQuery("#" + this.getId()).off('click');
	};
	
	/**
	 * @private Event handler, called when the user clicks somewhere into the form. Raises the Selected event.
	 * @param {object} oEvent event
	 */
	FieldListNode.prototype._handleClick = function(oEvent) {

		var target, oSourceNode;
		target = oEvent.target || oEvent.srcElement;
	
		if (target) {
			oSourceNode = sap.ui.getCore().byId(target.id); // Get SAPUI5 control by DOM reference
			if (!(oSourceNode instanceof FieldListNode)) {
				if (target.parentElement) {
					oSourceNode = sap.ui.getCore().byId(target.parentElement.id); // Get SAPUI5 control by DOM reference
				}
			}
		}
	
		// If node is already selected and label is clicked, make label editable
		if ((oSourceNode === this._oLabelInputField) && this.getIsSelected()) {
			this._oLabelInputField.setEditable(true);
		}
	
		// Fire event only if a field list node was clicked
		if (oSourceNode === this || oSourceNode === this._oLabelInputField) {
			this._fireSelectedAndDelegateToParent(this);
		}
	
	};
	
	/**
	 * @private Fires the is selected event for itsself and for the parent field list node
	 * @param {sap.ui.comp.smartform.flexibility.FieldListNode} oFieldListNode field list node instance
	 */
	FieldListNode.prototype._fireSelectedAndDelegateToParent = function(oFieldListNode) {

		var oParent;
	
		if (!(oFieldListNode instanceof FieldListNode)) {
			return;
		}
	
		this.fireSelected({
			target: oFieldListNode
		});
	
		// Call parent to fire event, too
		oParent = this.getParent();
		if (oParent && oParent instanceof FieldListNode) {
			oParent._fireSelectedAndDelegateToParent(oFieldListNode);
		}
	
	};
	

	return FieldListNode;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/FieldListNode.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagement') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.SmartVariantManagement.
jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Change'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Persistence'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagement",['jquery.sap.global', 'sap/ui/comp/library', './PersonalizableInfo', 'sap/ui/comp/variants/VariantItem', 'sap/ui/comp/variants/VariantManagement', 'sap/ui/core/ValueState', 'sap/ui/fl/Change', 'sap/ui/fl/Persistence', 'sap/ui/fl/registry/Settings', 'sap/m/MessageBox'],
	function(jQuery, library, PersonalizableInfo, VariantItem, VariantManagement, ValueState, Change, Persistence, Settings, MessageBox) {
	"use strict";


	
	/**
	 * Constructor for a new smartvariants/SmartVariantManagement.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * SmartVariantManagement is a specialization of the VariantManagementControl and communicates with the flexibility layer to manage the variants.
	 * @extends sap.ui.comp.variants.VariantManagement
	 *
	 * @author Franz Müller, Jan Heiler
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.SmartVariantManagement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartVariantManagement = VariantManagement.extend("sap.ui.comp.smartvariants.SmartVariantManagement", /** @lends sap.ui.comp.smartvariants.SmartVariantManagement.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		aggregations : {
	
			/**
			 * All controls that are interested and rely on variant handling have to be registered by this aggregation
			 */
			personalizableControls : {type : "sap.ui.comp.smartvariants.PersonalizableInfo", multiple : true, singularName : "personalizableControl"}
		},
		events : {
	
			/**
			 * Once the the SmartVariantControl has been initialized, and especially after retrieving the variants from the backend system, the registered consumers receive the information that this phase has been completed
			 */
			initialise : {}, 
	
			/**
			 * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
			 */
			afterSave : {}
		}
	}});
	
	
	/**
	 * set the current Variant. In case STANDARD-variant is the current one, and empty string will be returned.
	 *
	 * @name sap.ui.comp.smartvariants.SmartVariantManagement#setCurrentVariantId
	 * @function
	 * @param {string} sSVariantKey
	 *         the variant key
	 * @param {boolean} bBDoNotApplyVariant
	 *         if set to true the applyVariant method will not be executed yet. Relevant during navigation, where the pers-controller sets the variant id, but the initialise - sequence triggers the applyVariant method
	 * @type void
	 * @public
	 * @since 1.28.1
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * retrieve the current Variant. In case STANDARD-variant is the current one, and empty string will be returned.
	 *
	 * @name sap.ui.comp.smartvariants.SmartVariantManagement#getCurrentVariantId
	 * @function
	 * @type string
	 * @public
	 * @since 1.28.1
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	
	
	SmartVariantManagement._mComponentReadError = {};
	
	/**
	 * control initialization
	 * 
	 * @public
	 * @since 1.26.1
	 */
	SmartVariantManagement.prototype.init = function() {
		VariantManagement.prototype.init.apply(this); // Call base class
	
		this._mStandardVariants = {};
		this._mControlPersistence = {};
		this._mControlComponent = {};
		
		this._aPersonalizableControls = null;
		
		this._bIsInitialized = false;
	
		if (this.setLifecycleSupport) {
			this.setLifecycleSupport(true);
		}
		this._setBackwardCompatibility(false);
	};
	
	/**
	 * all controls interested and relying on variant handling have to be registered by this association
	 * 
	 * @public
	 * @param {sap.ui.comp/smartvariants/PersonalizableInfo} oCurrentControlInfo control providing the required aggregation for flex-layer
	 */
	SmartVariantManagement.prototype.addPersonalizableControl = function(oCurrentControlInfo) {
		this.addAggregation("personalizableControls", oCurrentControlInfo, true);
	
		var sControlId = oCurrentControlInfo.getControl();
	
		if (sControlId) {
			var oControl = sap.ui.getCore().getControl(sControlId);
			this._mControlPersistence[oControl] = new Persistence(oControl, oCurrentControlInfo.getKeyName());
	
			this._mControlComponent[oControl] = sap.ui.fl.Utils.getComponentClassName(oControl);
		}
	};
	
	/**
	 * all controls interested and relying on variant handling have to be registered by this association
	 * 
	 * @public
	 * @param {sap.ui.core.Control} oControl current control
	 * @param {string} sKey the variant key
	 * @returns {object} json object representing the content of the variant
	 */
	SmartVariantManagement.prototype.getVariantContent = function(oControl, sKey) {
		var oContent = null;
	
		if (sKey === this.STANDARDVARIANTKEY) {
			oContent = this._getStandardVariant(oControl);
	
		} else {
	
			var oVariant = this._getVariant(oControl, sKey);
			if (oVariant) {
				oContent = oVariant.getContent();
			}
		}
	
		return oContent;
	};
	
	/**
	 * retrieves and returns the variant with the requested id
	 * 
	 * @private
	 * @param {sap.ui.core.Control} oCurrentControl current control
	 * @param {string} id the variant key
	 * @returns {sap.ui.fl.Change} object representing the variant
	 */
	SmartVariantManagement.prototype._getVariant = function(oCurrentControl, id) {
	
		var oChange = null;
	
		if (oCurrentControl) {
	
			var oPersistence = this._mControlPersistence[oCurrentControl];
			if (oPersistence) {
				oChange = oPersistence.getChange(id);
			}
		}
	
		return oChange;
	};
	
	/**
	 * returns all registered controls 'currentVariant' - providers
	 * 
	 * @private
	 * @returns {array} a list of all registered controls
	 */
	SmartVariantManagement.prototype._getAllPersonalizableControls = function() {
		var i;
		var oControl = null;

		if (!this._aPersonalizableControls) {

			this._aPersonalizableControls = [];

			var aPersInfos = this.getPersonalizableControls();
			if (aPersInfos) {
				for (i = 0; i < aPersInfos.length; i++) {
					oControl = sap.ui.getCore().getControl(aPersInfos[i].getControl());
					if (oControl) {
						this._aPersonalizableControls.push({
							control: oControl,
							type: aPersInfos[i].getType(),
							dataSource: aPersInfos[i].getDataSource(),
							persistence: this._mControlPersistence[oControl],
							keyName: aPersInfos[i].getKeyName()
						});
					}
				}
			}
		}

		return this._aPersonalizableControls;
	};
	
	/**
	 * create entries into the variant management control, based on the list of variants
	 * 
	 * @private
	 * @param {map} mVariants list of variants, as determined by the flex layer
	 * @param {object} oCurrentControlInfo describes the personalizable control
	 * @returns {array} containing all variant keys
	 */
	SmartVariantManagement.prototype._createVariantEntries = function(mVariants, oCurrentControlInfo) {
	
		var n = null;
		var sVariantKey;
		var oVariant, oVariantItem;
		var aVariantKeys = [];
	
		this.removeAllItems();
	
		if (mVariants) {
			for (n in mVariants) {
				if (n) {
					oVariant = mVariants[n];
					if (oVariant.isVariant()) {
						oVariantItem = new VariantItem({
							key: oVariant.getId(),
							text: oVariant.getText("variantName"),
							global: !oVariant.isUserDependent(),
							executeOnSelection: this._getExecuteOnSelection(oVariant),
							lifecycleTransportId: oVariant.getRequest(),
							lifecyclePackage: oVariant.getPackage(),
							namespace: oVariant.getNamespace(),
							readOnly: oVariant.isReadOnly(),
							labelReadOnly: oVariant.isLabelReadOnly()
						});
						this.addVariantItem(oVariantItem);
	
						aVariantKeys.push(oVariant.getId());
					}
				}
			}
		}
	
		if (oCurrentControlInfo) {
			sVariantKey = this._getDefaultVariantKey(oCurrentControlInfo);
			if (sVariantKey) {
				this.setInitialSelectionKey(sVariantKey); // set the current selected variant
			}
		}
	
		if (this._isVariantDownport(oCurrentControlInfo)) {
			this._enableManualVariantKey(true);
		}
	
		return aVariantKeys;
	};
	
	/**
	 * retrieve the list of known variants via access to VM
	 * 
	 * @public
	 * @param {Function} fCallBack will be called once the promise is full filled
	 */
	SmartVariantManagement.prototype.getVariantsInfo = function(fCallBack) {
	
		if (!fCallBack) {
			jQuery.sap.log.error("'getVariantsInfo' failed . Expecting callBack not passed.");
			return;
		}
	
		var n = null;
		var oVariant;
		var aVariants = [];
		var aCurrentControls;
		var that = this;
	
		try {
	
			aCurrentControls = this._getAllPersonalizableControls();
			if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].persistence && aCurrentControls[0].control) {
	
				aCurrentControls[0].persistence.getChanges().then(function(mVariants) {
					if (mVariants) {
						for (n in mVariants) {
							if (n) {
								oVariant = mVariants[n];
								if (oVariant.isVariant()) {
									aVariants.push({
										key: oVariant.getId(),
										text: oVariant.getText("variantName")
									});
								}
							}
						}
					}
	
					fCallBack(aVariants);
				}, function(args) {
					var sError = "'getChanges' failed:";
					if (args && args[0] && args[0].messages && args[0].messages[0]) {
						sError += (' ' + args[0].messages[0]);
					}
					that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), sError, aCurrentControls[0].control);
	
					fCallBack(aVariants);
				});
			}
	
		} catch (ex) {
			this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), "'getChanges' throws an exception", null);
		}
	};
	
	/**
	 * returns the id of the currently selected variant. In case STANDARD is set, an empty string will be returned. An empty string will also be returned,
	 * when the initialize was not yet called.
	 * 
	 * @public
	 * @since 1.28.1
	 * @returns {string} id of the currently selected variant
	 */
	SmartVariantManagement.prototype.getCurrentVariantId = function() {
		var sKey = "";
		var oItem = this._getSelectedItem();
		if (oItem) {
			sKey = oItem.getKey();
			if (sKey === this.STANDARDVARIANTKEY) {
				sKey = "";
			}
		}
	
		return sKey;
	};
	
	/**
	 * Set the current variant according to the sVariantId. In case an empty string or null or undefined was passed the STANDARD will be set. STANDARD
	 * will also be set, in case the passed sVariantId could not be found. In case neither a flexibility variant, nor the content for the standard variant
	 * could not be obtained, nor the personalizable control obtained nothing will be executed/changed
	 * 
	 * @public
	 * @since 1.28.1
	 * @param {string} sVariantId id of the currently selected variant
	 * @param {boolean} bDoNotApplyVariant if set to true the applyVariant method will not be executed yet. Use-full if used during navigation, where the
	 *        pers-controller sets the variant id, but the initialise - sequence triggers the applyVariant method
	 */
	SmartVariantManagement.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {
		var oContent;
	
		var sId = sVariantId;
		if (!sId) {
			sId = this.STANDARDVARIANTKEY;
		} else {
	
			/* eslint-disable no-lonely-if */
			if (!this.getItemByKey(sId)) {
				sId = this.STANDARDVARIANTKEY;
			}
			/* eslint-enable no-lonely-if */
		}
				
		var aCurrentControls = this._getAllPersonalizableControls();
		if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].persistence && aCurrentControls[0].control) {

			if (!this._bIsInitialized) {
				aCurrentControls[0].currentVariantId = sVariantId;
			} else {
				oContent = this.getVariantContent(aCurrentControls[0].control, sId);
				if (oContent) {
					this._setSelectionByKey(sId); // set the current selected variant
					if (bDoNotApplyVariant !== true) {
						this._applyVariant(aCurrentControls[0].control, oContent);
					}
				}
			}
		}		
		
	};
	
	/**
	 * first function to be called. will initialize the flex layer, by retrieving the list of variants Once the initialization is completed the control
	 * for personalization will be informed via the event "initialise"
	 * 
	 * @public
	 */
	SmartVariantManagement.prototype.initialise = function() {
		var that = this;
		var aCurrentControls;
		var oContent = null, oVariant;
		var parameter = {
			variantKeys: []
		};
		var bSuiteApplied = false;
		var sKey;
	
		try {
	
			aCurrentControls = this._getAllPersonalizableControls();
			if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].persistence && aCurrentControls[0].control) {
	
				aCurrentControls[0].persistence.getChanges().then(function(mVariants) {

					var sComponentName = aCurrentControls[0].persistence.getComponentName();
					sap.ui.fl.registry.Settings.getInstance(sComponentName).then(function(oSettings) {
						if (oSettings) {
							that.setShowShare(oSettings.isKeyUser());
						}

						parameter.variantKeys = that._createVariantEntries(mVariants, aCurrentControls[0]);
												
						var sDefaultKey = that._getDefaultVariantKey(aCurrentControls[0]);
						if (sDefaultKey) {
							oVariant = that._getVariant(aCurrentControls[0].control, sDefaultKey);
							if (oVariant) {
								that.setDefaultVariantKey(sDefaultKey); // set the default variant
								that.setInitialSelectionKey(sDefaultKey); // set the current selected variant
							}
						}

						that.fireEvent("initialise", parameter);
						that._bIsInitialized = true;						
						
						that._setStandardVariant(aCurrentControls[0].control);

						// navigation to FilterBar: initialize leads to VM.clearVariantSelection --> ignore an eventual defaultVariant						
						if (aCurrentControls[0].currentVariantId) {
							that.setInitialSelectionKey(aCurrentControls[0].currentVariantId);							
							aCurrentControls[0].currentVariantId = undefined;
						} 
							
						sKey = that.getSelectionKey();														
						if (sKey && (sKey !== that.STANDARDVARIANTKEY)) {
							oVariant = that._getVariant(aCurrentControls[0].control, sKey);
							if (oVariant) {
								oContent = oVariant.getContent();
							}
						}

						if (oContent) {
							that._applyVariant(aCurrentControls[0].control, oContent, bSuiteApplied);
						} else {
							/* eslint-disable no-lonely-if */
							if ((sKey === that.STANDARDVARIANTKEY) && that.bExecuteOnSelectForStandard) {
								if (aCurrentControls[0].control.search) {
									that.setInitialSelectionKey(sKey);										
									aCurrentControls[0].control.search();
								}
							}
							/* eslint-enable no-lonely-if */
						}
					}, function(args) {
						var sError = "'getInstance' failed:";
						if (args && args[0] && args[0].messages && args[0].messages[0]) {
							sError += (' ' + args[0].messages[0]);
						}
						that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), sError, aCurrentControls[0].control);
		
						that.fireEvent("initialise", parameter);
						that._setStandardVariant(aCurrentControls[0].control);
					});

	
				}, function(args) {
					var sError = "'getChanges' failed:";
					if (args && args[0] && args[0].messages && args[0].messages[0]) {
						sError += (' ' + args[0].messages[0]);
					}
					that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), sError, aCurrentControls[0].control);
	
					that.fireEvent("initialise", parameter);
					that._setStandardVariant(aCurrentControls[0].control);
				});
	
			} else {
				this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), "'initialise' no personalizable component available", null);
	
				this.fireEvent("initialise", parameter);
				if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].control) {
					this._setStandardVariant(aCurrentControls[0].control);
				}
			}
	
		} catch (ex) {
			this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), "'getChanges' throws an exception", null);
	
			this.fireEvent("initialise", parameter);
			if (aCurrentControls && (aCurrentControls.length === 1) && aCurrentControls[0].control) {
				this._setStandardVariant(aCurrentControls[0].control);
			}
		}
	};
	
	SmartVariantManagement.prototype._updateVariant = function(oVariantInfo, oCurrentControlInfo) {
	
		if (oVariantInfo.key !== this.STANDARDVARIANTKEY) {
	
			if (oVariantInfo && oCurrentControlInfo && oCurrentControlInfo.control && oCurrentControlInfo.control.fetchVariant) {
				var oVariant = this._getVariant(oCurrentControlInfo.control, oVariantInfo.key);
				if (oVariant) {
					try {
	
						if ((oVariantInfo.lifecycleTransportId !== null) && (oVariantInfo.lifecycleTransportId !== undefined)) {
							oVariant.setRequest(oVariantInfo.lifecycleTransportId);
						}
	
						var oContent = oCurrentControlInfo.control.fetchVariant();
						if (oContent) {
							
							var oItem = this.getItemByKey(oVariantInfo.key);
							if (oItem) {
								oContent.executeOnSelection = oItem.getExecuteOnSelection();
							}
							
							oVariant.setContent(oContent);												
						}
	
					} catch (ex) {
						jQuery.sap.log.error("'_updateVariant' throws an exception");
					}
				}
			}
		}
	};
	
	SmartVariantManagement.prototype._newVariant = function(oVariantInfo, oCurrentControlInfo) {
	
		var sId;
	
		if (oVariantInfo && oCurrentControlInfo && oCurrentControlInfo.control && oCurrentControlInfo.control.fetchVariant && oCurrentControlInfo.persistence) {
	
			var sType = oCurrentControlInfo.type;
			var sDataService = oCurrentControlInfo.dataSource;
	
			var bUserDependent = !oVariantInfo.global;
	
			var sPackage = "";
			if ((oVariantInfo.lifecyclePackage !== null) && (oVariantInfo.lifecyclePackage !== undefined)) {
				sPackage = oVariantInfo.lifecyclePackage;
			}
	
			var sTransportId = "";
			if ((oVariantInfo.lifecycleTransportId !== null) && (oVariantInfo.lifecycleTransportId !== undefined)) {
				sTransportId = oVariantInfo.lifecycleTransportId;
			}
	
			var oContent = oCurrentControlInfo.control.fetchVariant();
			if (oContent) {
	
				var sContent = JSON.stringify(oContent);
				oContent = JSON.parse(sContent);
	
				if (oVariantInfo.exe) {
					oContent.executeOnSelection = oVariantInfo.exe;
				}
				if (oVariantInfo.tile) {
					oContent.tile = oVariantInfo.tile;
				}
	
			}
	
			sId = this._isVariantDownport(oCurrentControlInfo) ? oVariantInfo.key : null;
	
			var mParams = {
				type: sType,
				ODataService: sDataService,
				texts: {
					variantName: oVariantInfo.name
				},
				content: oContent,
				isVariant: true,
				packageName: sPackage,
				isUserDependent: bUserDependent,
				id: sId
			};
	
			sId = oCurrentControlInfo.persistence.addChange(mParams);
			this.replaceKey(oVariantInfo.key, sId);
			this.setInitialSelectionKey(sId);
	
			var oVariant = this._getVariant(oCurrentControlInfo.control, sId);
			if (oVariant) {
				oVariant.setRequest(sTransportId);
	
				var oItem = this.getItemByKey(sId);
				if (oItem) {
					oItem.setNamespace(oVariant.getNamespace());
				}
			}
	
			if (oVariantInfo.def === true) {
				this._setDefaultVariantKey(oCurrentControlInfo, sId);
			}
		}
	};
	
	SmartVariantManagement.prototype._appendLifecycleInformation = function(oVariant, sId) {
	
		var sTransportId;
	
		var oItem = this.getItemByKey(sId);
	
		if (oItem) {
			// sPackage = oItem.getLifecyclePackage();
			// if (sPackage === null || sPackage === undefined) {
			// sPackage = "";
			// }
	
			sTransportId = oItem.getLifecycleTransportId();
			if (sTransportId === null || sTransportId === undefined) {
				sTransportId = "";
			}
	
			if (oVariant) {
				oVariant.setRequest(sTransportId);
			}
		}
	
	};
	
	SmartVariantManagement.prototype._renameVariant = function(oVariantInfo, oCurrentControlInfo) {
	
		if (oVariantInfo.key !== this.STANDARDVARIANTKEY) {
			if (oVariantInfo && oCurrentControlInfo && oCurrentControlInfo.control) {
				var oVariant = this._getVariant(oCurrentControlInfo.control, oVariantInfo.key);
				if (oVariant) {
					oVariant.setText("variantName", oVariantInfo.name);
					this._appendLifecycleInformation(oVariant, oVariantInfo.key);
				}
			}
		}
	};
	
	SmartVariantManagement.prototype._deleteVariants = function(aVariantInfo, oCurrentControlInfo) {
		var i;
		if (aVariantInfo && aVariantInfo.length && oCurrentControlInfo && oCurrentControlInfo.control) {
	
			var sVariantKey = this._getDefaultVariantKey(oCurrentControlInfo);
	
			for (i = 0; i < aVariantInfo.length; i++) {
	
				if (aVariantInfo[i] === this.STANDARDVARIANTKEY) {
					continue;
				}
	
				var oVariant = this._getVariant(oCurrentControlInfo.control, aVariantInfo[i]);
				if (oVariant) {
					oVariant.markForDeletion();
					if (sVariantKey && sVariantKey === aVariantInfo[i]) {
						this._setDefaultVariantKey(oCurrentControlInfo, "");
					}
	
					this._appendLifecycleInformation(oVariant, aVariantInfo[i]);
				}
			}
		}
	};
	
	SmartVariantManagement.prototype._getDefaultVariantKey = function(oCurrentControlInfo) {
	
		var sDefaultVariantKey = "";
		if (oCurrentControlInfo && oCurrentControlInfo.persistence) {
			sDefaultVariantKey = oCurrentControlInfo.persistence.getDefaultVariantIdSync();
		}
	
		return sDefaultVariantKey;
	};
	
	SmartVariantManagement.prototype._setDefaultVariantKey = function(oCurrentControlInfo, sVariantKey) {
	
		// if (sVariantKey !== this.STANDARDVARIANTKEY) {
		if (oCurrentControlInfo && oCurrentControlInfo.persistence) {
			oCurrentControlInfo.persistence.setDefaultVariantIdSync(sVariantKey);
		}
		// }
	};
	
	SmartVariantManagement.prototype._isVariantDownport = function(oCurrentControlInfo) {
	
		var bDownport = false;
		if (oCurrentControlInfo && oCurrentControlInfo.persistence) {
			bDownport = oCurrentControlInfo.persistence.isVariantDownport();
		}
	
		return bDownport;
	};
	
	SmartVariantManagement.prototype._getExecuteOnSelection = function(oVariant) {
	
		var oJson;
	
		if (oVariant) {
			oJson = oVariant.getContent();
			if (oJson && (oJson.executeOnSelection !== undefined)) {
				return oJson.executeOnSelection;
			}
		}
	
		return false;
	};
	
	SmartVariantManagement.prototype._setExecuteOnSelections = function(aVariantInfo, oCurrentControlInfo) {
	
		var i;
		if (aVariantInfo && aVariantInfo.length && oCurrentControlInfo && oCurrentControlInfo.control) {
	
			for (i = 0; i < aVariantInfo.length; i++) {
	
				if (aVariantInfo[i].key === this.STANDARDVARIANTKEY) {
					continue;
				}
	
				var oVariant = this._getVariant(oCurrentControlInfo.control, aVariantInfo[i].key);
				if (oVariant) {
					var oJson = oVariant.getContent();
					if (oJson) {
						oJson.executeOnSelection = aVariantInfo[i].exe;
						oVariant.setContent(oJson);
					}
	
					this._appendLifecycleInformation(oVariant, aVariantInfo[i].key);
				}
			}
		}
	};
	
	/**
	 * save all variants
	 * 
	 * @private
	 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo information about the control to be personalized
	 */
	SmartVariantManagement.prototype._save = function(oCurrentControlInfo) {
	
		var that = this;
	
		if (oCurrentControlInfo && oCurrentControlInfo.persistence) {
			try {
				oCurrentControlInfo.persistence.saveAll().then(function() {
					that.fireEvent("afterSave");
				}, function(args) {
					var sError = "'_save' failed:";
					if (args && args[0] && args[0].messages && args[0].messages[0]) {
						sError += (' ' + args[0].messages[0]);
					}
					that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"), sError, oCurrentControlInfo.control);
				});
			} catch (ex) {
				this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"), "'_save' throws an exception", oCurrentControlInfo.control);
			}
		}
	};
	
	/**
	 * is called by the variant management control, when saving a variant
	 * 
	 * @public
	 * @param {object} oVariantInfo describes the variant to be saved
	 */
	SmartVariantManagement.prototype.fireSave = function(oVariantInfo) {
	
		var bSave = false;
	
		var aCurrentControls = this._getAllPersonalizableControls();
		if (aCurrentControls && (aCurrentControls.length === 1)) {
	
			if (oVariantInfo) {
				if (oVariantInfo.overwrite) {
					if (oVariantInfo.key !== this.STANDARDVARIANTKEY) { // Prohibit save on standard variant
	
						this.fireEvent("save");
						this._updateVariant(oVariantInfo, aCurrentControls[0]);
						bSave = true;
					}
				} else {
	
					this.fireEvent("save");
					this._newVariant(oVariantInfo, aCurrentControls[0]);
					bSave = true;
				}
	
				if (bSave) {
					this._save(aCurrentControls[0]);
				}
			}
		}
	};
	
	/**
	 * is called by the variant management control, when managing the variants
	 * 
	 * @public
	 * @param {object} oVariantInfo describes the variants, which will be deleted/renamed
	 */
	SmartVariantManagement.prototype.fireManage = function(oVariantInfo) {
	
		var i;
		var aCurrentControlsInfo = this._getAllPersonalizableControls();
		if (aCurrentControlsInfo && (aCurrentControlsInfo.length === 1)) {
	
			if (oVariantInfo) {
	
				if (oVariantInfo.renamed) {
	
					for (i = 0; i < oVariantInfo.renamed.length; i++) {
						this._renameVariant(oVariantInfo.renamed[i], aCurrentControlsInfo[0]);
					}
				}
	
				if (oVariantInfo.deleted) {
					this._deleteVariants(oVariantInfo.deleted, aCurrentControlsInfo[0]);
				}
	
				if (oVariantInfo.exe) {
					this._setExecuteOnSelections(oVariantInfo.exe, aCurrentControlsInfo[0]);
				}
	
				if (oVariantInfo.def) {
	
					var sDefaultVariantKey = this._getDefaultVariantKey(aCurrentControlsInfo[0]);
					if (sDefaultVariantKey !== oVariantInfo.def) {
						this._setDefaultVariantKey(aCurrentControlsInfo[0], oVariantInfo.def);
					}
				}
	
				if ((oVariantInfo.deleted && oVariantInfo.deleted.length > 0) || (oVariantInfo.renamed && oVariantInfo.renamed.length > 0) || (oVariantInfo.exe && oVariantInfo.exe.length > 0) || oVariantInfo.def) {
					this._save(aCurrentControlsInfo[0]);
				}
			}
		}
	};
	
	/**
	 * is called by the variant management control, when a variant was selected
	 * 
	 * @public
	 * @param {object} oVariantInfo describes the selected variant
	 */
	SmartVariantManagement.prototype.fireSelect = function(oVariantInfo) {
	
		var oContent = null;
	
		var aCurrentControls = this._getAllPersonalizableControls();
		if (aCurrentControls && (aCurrentControls.length === 1)) {
			if (oVariantInfo && oVariantInfo.key) {
	
				oContent = this.getVariantContent(aCurrentControls[0].control, oVariantInfo.key);
	
				if (oContent) {
					var sContent = JSON.stringify(oContent);
					oContent = JSON.parse(sContent);
	
					if ((oVariantInfo.key === this.STANDARDVARIANTKEY) && this.bExecuteOnSelectForStandard) {
						oContent.executeOnSelection = this.bExecuteOnSelectForStandard;
					}
	
					this._applyVariant(aCurrentControls[0].control, oContent);
				}
			}
		}
	};
	
	/**
	 * the standard variant will be retrieved from the ui.control
	 * 
	 * @private
	 * @param {sap.ui.core.Control} oCurrentControl ui-control providing the 'currentVariant' aggregation
	 */
	SmartVariantManagement.prototype._setStandardVariant = function(oCurrentControl) {
	
		if (oCurrentControl && oCurrentControl.fetchVariant) {
	
			var oStandardVariant = oCurrentControl.fetchVariant();
	
			this._mStandardVariants[oCurrentControl] = oStandardVariant;
		}
	};
	
	/**
	 * the standard variant will be obtained
	 * 
	 * @private
	 * @param {sap.ui.core.Control} oCurrentControl control to be personalized
	 * @returns {object} json object representing the variant data
	 */
	SmartVariantManagement.prototype._getStandardVariant = function(oCurrentControl) {
		var oContent = null;
	
		if (this._mStandardVariants && this._mStandardVariants[oCurrentControl]) {
	
			oContent = this._mStandardVariants[oCurrentControl];
		}
	
		return oContent;
	};
	
	/**
	 * the standard variant will be applied
	 * 
	 * @private
	 * @param {sap.ui.core.Control} oCurrentControl control to be personalized
	 * @param {object} oContent json object representing the variant data
	 */
	SmartVariantManagement.prototype._applyVariant = function(oCurrentControl, oContent) {
	
		if (oCurrentControl && oCurrentControl.applyVariant) {
			oCurrentControl.applyVariant(oContent);
		}
	};
	
	/**
	 * set an error state on the variant management control
	 * 
	 * @private
	 * @param {string} sText describing the error reason
	 * @param {string} sLogText describing the error reason for logging
	 * @param {object} oControl to obtain the correspondinf component name; may be null
	 */
	SmartVariantManagement.prototype._setErrorValueState = function(sText, sLogText, oControl) {
		this.setEnabled(false);
	
		if (sLogText) {
			jQuery.sap.log.error(sLogText);
		}
	
		var sComponentName = oControl ? this._mControlComponent[oControl] : null;
	
		SmartVariantManagement._displayError(this, sComponentName, sText);
	};
	
	/**
	 * workaround for having multiple smartVM controls on the page. Only one message - the first - should be raised
	 * 
	 * @private
	 * @param {sap.ui.comp.smartvariants.SmartVariantManagement} oSmartVariant instance of the smartVM
	 * @param {string} sComponentName name of the component; may be null
	 * @param {string} sText error text
	 */
	SmartVariantManagement._displayError = function(oSmartVariant, sComponentName, sText) {
	
		if (oSmartVariant) {
			if (sComponentName) {
				if (!SmartVariantManagement._mComponentReadError[sComponentName]) {
					SmartVariantManagement._mComponentReadError[sComponentName] = sComponentName;
	
					oSmartVariant._displayError(sText);
				}
			} else {
				oSmartVariant._displayError(sText);
			}
		}
	};
	
	SmartVariantManagement.prototype._displayError = function(sText) {

		MessageBox.show(sText, {
			icon: MessageBox.Icon.ERROR,
			title: this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_TITLE"),
			styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length > 0) ? "sapUiSizeCompact" : ""
		});
	};
	
	/**
	 * Destroys the control
	 * 
	 * @public
	 */
	SmartVariantManagement.prototype.exit = function() {
		VariantManagement.prototype.exit.apply(this, arguments);
	
		this._mStandardVariants = null;
		this._mControlPersistence = null;
		
		this._aPersonalizableControls = null;		
	
		var n, sComponentName;
		for (n in this._mControlComponent) {
			if (n) {
				sComponentName = this._mControlComponent[n];
				if (sComponentName) {
					delete SmartVariantManagement._mComponentReadError[sComponentName];
				}
			}
		}
	
		this._mControlComponent = null;
	};
	

	return SmartVariantManagement;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagementRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagementRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagementRenderer",['jquery.sap.global', 'sap/ui/comp/variants/VariantManagementRenderer', 'sap/ui/core/Renderer'],
	function(jQuery, VariantManagementRenderer, Renderer) {
	"use strict";


	/**
	 * @class SmartVariantManagement renderer.
	 * @static
	 */
	var SmartVariantManagementRenderer = Renderer.extend(VariantManagementRenderer);
	

	return SmartVariantManagementRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagementRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagementUi2') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.SmartVariantManagementUi2.
jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagementUi2'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagementUi2",['jquery.sap.global', 'sap/ui/comp/library', './PersonalizableInfo', 'sap/ui/comp/variants/VariantItem', 'sap/ui/comp/variants/VariantManagement', 'sap/m/MessageBox'],
	function(jQuery, library, PersonalizableInfo, VariantItem, VariantManagement, MessageBox) {
	"use strict";


	
	/**
	 * Constructor for a new smartvariants/SmartVariantManagementUi2.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * SmartVariantManagement is a specialization of the VariantManagementControl and communicates with the Ui2 personalization layer to manage the variants.
	 * @extends sap.ui.comp.variants.VariantManagement
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.SmartVariantManagementUi2
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartVariantManagementUi2 = VariantManagement.extend("sap.ui.comp.smartvariants.SmartVariantManagementUi2", /** @lends sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * retrieve/set the current Variant. In case STANDARD-variant is the current one, and empty string will be returned.
			 */
			currentVariantId : {type : "string", group : "Behavior", defaultValue : null}
		},
		aggregations : {
	
			/**
			 * The control that is interested and rely on variant handling have to be registered by this aggregation. Only currently known consumer is the FilterBar control.
			 */
			personalizableControl : {type : "sap.ui.comp.smartvariants.PersonalizableInfo", multiple : false}
		},
		events : {
	
			/**
			 * Once the the SmartVariant control has been initialized, and especially after retrieving the variants via the UI2 personalization service, the registered consumer will be notified that this phase has completed
			 */
			initialise : {}, 
	
			/**
			 * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
			 */
			afterSave : {}
		}
	}});
	
	
	/**
	 * set the current Variant. In case STANDARD-variant is the current one, and empty string will be returned.
	 *
	 * @name sap.ui.comp.smartvariants.SmartVariantManagementUi2#setCurrentVariantId
	 * @function
	 * @param {string} sSVariantId
	 *         retrieve the current Variant. In case STANDARD-variant is the current one, and empty string will be returned.
	 * @param {boolean} bBDoNotApplyVariant
	 *         if set to true the applyVariant method will not be executed yet. Relevant during navigation, where the pers-controller sets the variant id, but the initialise - sequence triggers the applyVariant method
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * retrieve the current Variant. In case STANDARD-variant is the current one, and empty string will be returned.
	 *
	 * @name sap.ui.comp.smartvariants.SmartVariantManagementUi2#getCurrentVariantId
	 * @function
	 * @type string
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * control initialization
	 * 
	 * @public
	 * @since 1.28.0
	 */
	SmartVariantManagementUi2.prototype.init = function() {
		VariantManagement.prototype.init.apply(this); // Call base class
	
		this._oStandardVariant = null;
		this._oPersController = null;
		this._sKeyName = null;
	
		this._oContainer = null;
		this._oVariantSet = null;
	
		if (this.setLifecycleSupport) {
			this.setLifecycleSupport(true);
		}
		this._setBackwardCompatibility(false);
	};
	
	/**
	 * all controls interested and relying on variant handling have to be registered by this association
	 * 
	 * @public
	 * @param {sap.ui.core.Control} oControl current control
	 * @param {string} sKey the variant key
	 * @returns {object} json object representing the content of the variant
	 */
	SmartVariantManagementUi2.prototype.getVariantContent = function(oControl, sKey) {
		var oContent = null;
	
		if (sKey === this.STANDARDVARIANTKEY) {
			oContent = this._getStandardVariant();
	
		} else {
	
			/* eslint-disable no-lonely-if */
			if (this._oVariantSet) {
				var oVariant = this._oVariantSet.getVariant(sKey);
				if (oVariant) {
					oContent = this._getContent(oVariant);
				}
			}
			/* eslint-enable no-lonely-if */
		}
	
		return oContent;
	};
	
	/**
	 * returns the id of the currently selected variant. In case STANDARD is set, an empty string will be returned. An empty string will also be returned,
	 * when the initialize was not yet called.
	 * 
	 * @public
	 * @returns {string} id of the currently selected variant
	 */
	SmartVariantManagementUi2.prototype.getCurrentVariantId = function() {
		var sKey = "";
		var oItem = this._getSelectedItem();
		if (oItem) {
			sKey = oItem.getKey();
			if (sKey === this.STANDARDVARIANTKEY) {
				sKey = "";
			}
		}
	
		return sKey;
	};
	
	/**
	 * Set the current variant according to the sVariantId. In case an empty string or null or undefined was passed the STANDARD will be set. STANDARD
	 * will also be set, in case the passed sVariantId could not be found. In case neither a flexibility variant, nor the content for the standard variant
	 * could not be obtained, nor the personalisable control obtained nothing will be executed/changed
	 * 
	 * @public
	 * @param {string} sVariantId id of the currently selected variant
	 * @param {boolean} bDoNotApplyVariant if set to true the applyVariant method will not be executed yet. Use-full if used during navigation, where the
	 *        pers-controller sets the variant id, but the initialise - sequence triggers the applyVariant method
	 */
	SmartVariantManagementUi2.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {
		var oContent;
	
		var sId = sVariantId;
		if (!sId) {
			sId = this.STANDARDVARIANTKEY;
		} else {
			/* eslint-disable no-lonely-if */
			if (!this.getItemByKey(sId)) {
				sId = this.STANDARDVARIANTKEY;
			}
			/* eslint-enable no-lonely-if */
		}
	
		if (this._oVariantSet) {
	
			oContent = this.getVariantContent(this._oPersController, sId);
			if (oContent) {
				this._setSelectionByKey(sId); // set the current selected variant
				if (bDoNotApplyVariant !== true) {
					this._applyVariantContent(oContent);
				}
			}
		}
	};
	
	/**
	 * all controls interested and relying on variant handling have to be registered by this association
	 * 
	 * @public
	 * @param {sap.ui.comp/smartvariants/PersonalizableInfo} oCurrentControlInfo control providing the required aggregation for flex-layer
	 */
	SmartVariantManagementUi2.prototype.addPersonalizableControl = function(oCurrentControlInfo) {
		this.setAggregation("personalizableControl", oCurrentControlInfo, true);
	
		if (oCurrentControlInfo.getControl()) {
			this._oPersController = sap.ui.getCore().getControl(oCurrentControlInfo.getControl());
		}
	
		this._sKeyName = oCurrentControlInfo.getKeyName();
	};
	
	/**
	 * retrieve the personalization container. "initialize" has to be triggered in each potential exit-branch
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype.initialise = function() {
	
		var sContainerKey = this._getPersistencyKey();
	
		if (!sContainerKey) {
			jQuery.sap.log.warning("PersistencyKey not set");
			this.fireEvent("initialise");
	
			return;
		}
	
		if (sap.ushell && sap.ushell.Container) {
	
			var that = this;
			sap.ushell.Container.getService("Personalization").getContainer(sContainerKey, {
				validity: Infinity
			}).fail(function() {
				jQuery.sap.log.error("Loading personalization container failed");
				that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"));
	
				that.fireEvent("initialise");
			}).done(function(oContainer) {
				that._readPersonalization(oContainer);
				that.fireEvent("initialise");
	
				that._setStandardVariant();
	
				that._setSelectedVariant();
			});
	
			return;
		}
	
		jQuery.sap.log.error("Could not obtain the personalization container");
		this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"));
	
		this.fireEvent("initialise");
	};
	
	/**
	 * obtains from the variant management the current selected entry ands applies the corresponding variant. In case nothing was selected variant
	 * management returns null -> no variant will be applied
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._setSelectedVariant = function() {
		var oVariant = null;
	
		if (this._oVariantSet) { // in case a variant is currently selected, re-apply this variant
			var sKey = this.getSelectionKey();
			if (sKey) {
				oVariant = this._oVariantSet.getVariant(sKey);
	
				if (oVariant) {
					this._applyVariant(oVariant);
				}
			}
		}
	};
	
	/**
	 * read the variant container and create the variant items
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._reCreateVariantEntries = function() {
	
		var n = null;
		var sVariantKey = null;
		var oVariant, oVariantItem;
	
		this.removeAllItems();
	
		if (this._oVariantSet) {
			var mVariantList = this._oVariantSet.getVariantNamesAndKeys();
			if (mVariantList) {
				for (n in mVariantList) {
					if (n) {
	
						oVariantItem = new VariantItem({
							text: n,
							key: mVariantList[n]
						});
						this.addVariantItem(oVariantItem);
					}
				}
	
				sVariantKey = this._oVariantSet.getCurrentVariantKey();
				oVariant = this._oVariantSet.getVariant(sVariantKey);
				if (oVariant) {
					this.setDefaultVariantKey(sVariantKey); // set the default variant
					this.setInitialSelectionKey(sVariantKey); // set the current selected variant
				}
			}
		}
	};
	
	/**
	 * read the variant container and create the variant items
	 * 
	 * @private
	 * @returns {object} the variant set adapter
	 */
	SmartVariantManagementUi2.prototype._getVariantSetAdapter = function() {
	
		var oVariantSetAdapter = null;
	
		if (this._oContainer) {
			// jQuery.sap.require("sap.ushell.services.Personalization.VariantSetAdapter");
			oVariantSetAdapter = new sap.ushell.services.Personalization.VariantSetAdapter(this._oContainer);
		}
	
		return oVariantSetAdapter;
	};
	
	/**
	 * read the variant container and create the variant items
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._createVariantEntries = function() {
	
		var oVariantSetAdapter = this._getVariantSetAdapter();
		if (oVariantSetAdapter) {
			this._oVariantSet = oVariantSetAdapter.getVariantSet("filterBarVariantSet");
			if (this._oVariantSet) {
				this._reCreateVariantEntries();
			} else {
				this._oVariantSet = oVariantSetAdapter.addVariantSet("filterBarVariantSet");
			}
		}
	
	};
	
	/**
	 * read the personalization and re-act to the information
	 * 
	 * @private
	 * @param {object} oContainer personalization conmteiner
	 */
	SmartVariantManagementUi2.prototype._readPersonalization = function(oContainer) {
	
		this._oContainer = oContainer;
	
		if (this._oContainer) {
			this._createVariantEntries();
		}
	};
	
	/**
	 * handling the save for the personalization container for variants
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._savePersonalizationContainer = function() {
	
		var that = this;
	
		if (this._oContainer) {
	
			this._oContainer.save() // save the whole container!
			.fail(function() {
				jQuery.sap.log.error("Saving personalization data failed");
				that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"));
	
			}).done(function() {
				// Before the next save is triggered the last one has to be finished.
				// Could be done by disabling the save button during the save.
				jQuery.sap.log.info("Saving personalization data succeeded");
				that.fireEvent("afterSave");
			});
		}
	};
	
	/**
	 * reaction to Save-event from variant management
	 * 
	 * @private
	 * @param {object} oVariantInfo containing variant information
	 */
	SmartVariantManagementUi2.prototype.fireSave = function(oVariantInfo) {
	
		var oVariant = null, oNewVariant = null;
		var sVariantKey;
	
		if (!this._oVariantSet) {
			return;
		}
	
		if (oVariantInfo) {
	
			if (oVariantInfo.overwrite) {
				if (oVariantInfo.key) {
					oVariant = this._oVariantSet.getVariant(oVariantInfo.key);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (oVariantInfo.name) {
					oVariant = this._oVariantSet.addVariant(oVariantInfo.name);
					oNewVariant = oVariant; // indicates that we have to adapt the variant management key
	
					sVariantKey = oNewVariant.getVariantKey();
					this.replaceKey(oVariantInfo.key, sVariantKey);
	
					this.setInitialSelectionKey(sVariantKey);
				}
				/* eslint-enable no-lonely-if */
			}
	
			if (oVariant) {
	
				this.fireEvent("save", oVariantInfo);
				var oVariantContent = this._fetchVariant();
				if (oVariantContent) {
	
					oVariant.setItemValue("filterBarVariant", oVariantContent.filterBarVariant);
					oVariant.setItemValue("filterbar", oVariantContent.filterbar);
	
					sVariantKey = oVariant.getVariantKey();
					if (oVariantInfo.def) {
						if (sVariantKey) {
							this._oVariantSet.setCurrentVariantKey(sVariantKey);
						}
					} else {
						var sDefaultVariantKey = this._oVariantSet.getCurrentVariantKey();
						if (sVariantKey === sDefaultVariantKey) {
							this._oVariantSet.setCurrentVariantKey(null);
						}
					}
				}
	
				this._savePersonalizationContainer();
	// if (oNewVariant) {
	// sVariantKey = oNewVariant.getVariantKey();
	// this.replaceKey(oVariantInfo.key, sVariantKey);
	//
	// this.setInitialSelectionKey(sVariantKey);
	// }
			}
		}
	
	};
	
	/**
	 * obtain and store the standard variant. Only relevant for the UI2 personalization-service
	 * 
	 * @private
	 */
	SmartVariantManagementUi2.prototype._setStandardVariant = function() {
		this._oStandardVariant = this._fetchVariant();
	};
	
	/**
	 * returns a previously stored representation of the standard variant. Only relevant for the UI2 personalization-service
	 * 
	 * @private
	 * @returns {object} json compatible object representing the standard variant
	 */
	SmartVariantManagementUi2.prototype._getStandardVariant = function() {
		return this._oStandardVariant;
	};
	
	/**
	 * workaround for missing Variant feature 'setVariantName' with U2 < 1.24.0
	 * 
	 * @private
	 * @param {object} oVariant the original variant
	 * @param {string} sVariantKey the key of the original variant
	 * @param {string} sNewName the new name of the original variant
	 */
	SmartVariantManagementUi2.prototype._setVariantName = function(oVariant, sVariantKey, sNewName) {
	
		var sKey;
		var aFieldsAndValues, aFields;
	
		if (this._oVariantSet) {
			var oNewVariant = this._oVariantSet.addVariant(sNewName);
	
			aFieldsAndValues = oVariant.getItemValue("filterBarVariant");
			oNewVariant.setItemValue("filterBarVariant", aFieldsAndValues);
	
			aFields = oVariant.getItemValue("filterbar");
			oNewVariant.setItemValue("filterbar", aFields);
	
			sKey = this._oVariantSet.getCurrentVariantKey();
			if (sKey === sVariantKey) {
				this._oVariantSet.setCurrentVariantKey(oNewVariant.getVariantKey());
			}
			this._oVariantSet.delVariant(sVariantKey);
	
			sKey = oNewVariant.getVariantKey();
			this.replaceKey(sVariantKey, sKey);
	
			this.setInitialSelectionKey(sKey);
	
		}
	
	};
	
	/**
	 * reaction to Manage-event from variant management
	 * 
	 * @private
	 * @param {object} oVariantInfo containing variant information
	 */
	SmartVariantManagementUi2.prototype.fireManage = function(oVariantInfo) {
	
		var i;
		var renamed = null, deleted = null;
		var oVariant;
	
		if (!this._oVariantSet) {
			return;
		}
	
		if (oVariantInfo) {
			renamed = oVariantInfo.renamed;
			deleted = oVariantInfo.deleted;
	
			if (renamed) {
				for (i = 0; i < renamed.length; i++) {
					oVariant = this._oVariantSet.getVariant(renamed[i].key);
					if (oVariant) {
						if (oVariant.setVariantName) { // available with 1.24.0
							oVariant.setVariantName(renamed[i].name);
						} else {
							this._setVariantName(oVariant, renamed[i].key, renamed[i].name); // workaround for missing variant feature 'setVariantName'
						}
					}
				}
			}
	
			if (deleted) {
				var sVariantKey = this._oVariantSet.getCurrentVariantKey();
				for (i = 0; i < deleted.length; i++) {
					oVariant = this._oVariantSet.getVariant(deleted[i]);
					if (oVariant) {
						if (sVariantKey && sVariantKey === oVariant.getVariantKey()) {
							this._oVariantSet.setCurrentVariantKey(null);
						}
	
						this._oVariantSet.delVariant(deleted[i]);
					}
				}
			}
	
			if (oVariantInfo.def) {
				oVariant = this._oVariantSet.getVariant(oVariantInfo.def);
				if (oVariant || (oVariantInfo.def === this.STANDARDVARIANTKEY)) {
					this._oVariantSet.setCurrentVariantKey(oVariantInfo.def);
				}
			}
	
			if ((deleted && deleted.length > 0) || (renamed && renamed.length > 0) || (oVariantInfo.def)) {
				this._savePersonalizationContainer();
			}
		}
	
	};
	
	/**
	 * reaction to Select-event from variant management
	 * 
	 * @private
	 * @param {object} oVariantInfo containing variant information
	 */
	SmartVariantManagementUi2.prototype.fireSelect = function(oVariantInfo) {
	
		var oVariant = null;
	
		if (oVariantInfo && oVariantInfo.key) {
	
			if (this._oVariantSet) {
	
				if (oVariantInfo.key === this.STANDARDVARIANTKEY) {
					oVariant = this._getStandardVariant();
				} else {
					oVariant = this._oVariantSet.getVariant(oVariantInfo.key);
				}
			}
		}
	
		if (oVariant) {
			this._applyVariant(oVariant);
		}
	};
	
	/**
	 * apply a variant content
	 * 
	 * @private
	 * @param {object} oVariant json object representing the variant data
	 * @returns {object} the variant content
	 */
	SmartVariantManagementUi2.prototype._getContent = function(oVariant) {
		var oContent = null;
	
		if (oVariant) {
			if (oVariant.getItemValue) {
				oContent = {
					filterbar: oVariant.getItemValue("filterbar"),
					filterBarVariant: oVariant.getItemValue("filterBarVariant")
				};
			} else {
				oContent = oVariant; // STANDARD variant
			}
		}
	
		return oContent;
	
	};
	
	/**
	 * apply a variant content
	 * 
	 * @private
	 * @param {object} oVariant json object representing the variant data
	 */
	SmartVariantManagementUi2.prototype._applyVariant = function(oVariant) {
	
		var oContent = this._getContent(oVariant);
	
		this._applyVariantContent(oContent);
	};
	
	/**
	 * apply a variant content
	 * 
	 * @private
	 * @param {object} oContent json object representing the variant data
	 */
	SmartVariantManagementUi2.prototype._applyVariantContent = function(oContent) {
	
		if (oContent && this._oPersController && this._oPersController.applyVariant) {
			this._oPersController.applyVariant(oContent);
		}
	};
	
	/**
	 * fetch a variant content
	 * 
	 * @private
	 * @returns {object} json object representing the content of a variant
	 */
	SmartVariantManagementUi2.prototype._fetchVariant = function() {
	
		if (this._oPersController && this._oPersController.fetchVariant) {
			return this._oPersController.fetchVariant();
		}
	
		return null;
	};
	
	/**
	 * read the persistency key
	 * 
	 * @private
	 * @returns {string} persistency key value
	 */
	SmartVariantManagementUi2.prototype._getPersistencyKey = function() {
	
		if (this._oPersController && this._sKeyName) {
			return this._oPersController.getProperty(this._sKeyName);
		}
	
		return null;
	};
	
	/**
	 * set an error state on the variant management control
	 * 
	 * @private
	 * @param {string} sText describing the error reason
	 */
	SmartVariantManagementUi2.prototype._setErrorValueState = function(sText) {
		this.setEnabled(false);
	
		this._displayError(sText);
	};
	
	SmartVariantManagementUi2.prototype._displayError = function(sText) {

		MessageBox.show(sText, {
			icon: MessageBox.Icon.ERROR,
			title: this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_TITLE"),
			styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length > 0) ? "sapUiSizeCompact" : ""
		});
	};
	
	/**
	 * Destroys the control
	 * 
	 * @public
	 */
	SmartVariantManagementUi2.prototype.exit = function() {
		VariantManagement.prototype.exit.apply(this, arguments);
	
		this._oStandardVariant = null;
		this._oPersController = null;
		this._sKeyName = null;
	
		this._oContainer = null;
		this._oVariantSet = null;
	};
	

	return SmartVariantManagementUi2;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagementUi2.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagementUi2Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagementUi2Renderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagementUi2Renderer",['jquery.sap.global', 'sap/ui/comp/variants/VariantManagementRenderer', 'sap/ui/core/Renderer'],
	function(jQuery, VariantManagementRenderer, Renderer) {
	"use strict";


	/**
	 * @class SmartVariantManagementUI renderer.
	 * @static
	 */
	var SmartVariantManagementUi2Renderer = Renderer.extend(VariantManagementRenderer);
	

	return SmartVariantManagementUi2Renderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagementUi2Renderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterBar.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained
jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.CustomListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListSeparators'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.Form'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.ResponsiveGridLayout'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterBar",['jquery.sap.global', 'sap/m/ActionSheet', 'sap/m/Bar', 'sap/m/Button', 'sap/m/ButtonType', 'sap/m/CheckBox', 'sap/m/CustomListItem', 'sap/m/Dialog', 'sap/m/Label', 'sap/m/LabelDesign', 'sap/m/Link', 'sap/m/List', 'sap/m/ListSeparators', 'sap/m/ListType', 'sap/m/Panel', 'sap/m/PlacementType', 'sap/m/SearchField', 'sap/m/Text', 'sap/m/Toolbar', 'sap/m/ToolbarSpacer', 'sap/ui/Device', './VariantConverterFrom', './VariantConverterTo', 'sap/ui/comp/library', 'sap/ui/comp/smartvariants/PersonalizableInfo', 'sap/ui/comp/smartvariants/SmartVariantManagement', 'sap/ui/comp/smartvariants/SmartVariantManagementUi2', 'sap/ui/comp/variants/VariantManagement', 'sap/ui/core/Icon', 'sap/ui/core/TextAlign', 'sap/ui/core/Title', 'sap/ui/core/ValueState', 'sap/ui/layout/Grid', 'sap/ui/layout/GridData', 'sap/ui/layout/HorizontalLayout', 'sap/ui/layout/ResponsiveFlowLayout', 'sap/ui/layout/ResponsiveFlowLayoutData', 'sap/ui/layout/VerticalLayout', 'sap/ui/layout/form/Form', 'sap/ui/layout/form/FormContainer', 'sap/ui/layout/form/FormElement', 'sap/ui/layout/form/ResponsiveGridLayout'],
	function(jQuery, ActionSheet, Bar, Button, ButtonType, CheckBox, CustomListItem, Dialog, Label, LabelDesign, Link, List, ListSeparators, ListType, Panel, PlacementType, SearchField, Text, Toolbar, ToolbarSpacer, Device, VariantConverterFrom, VariantConverterTo, library, PersonalizableInfo, SmartVariantManagement, SmartVariantManagementUi2, VariantManagement, Icon, TextAlign, Title, ValueState, Grid, GridData, HorizontalLayout, ResponsiveFlowLayout, ResponsiveFlowLayoutData, VerticalLayout, Form, FormContainer, FormElement, ResponsiveGridLayout) {
	"use strict";


	
	/**
	 * Constructor for a new filterbar/FilterBar.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The FilterBar control displays filters in a user-friendly manner to populate values for a query. The FilterBar consists of a row containing the variant management control, the related buttons, and an area underneath displaying the filters.
	 * The filters are arranged in a logical row that is divided depending on the space available and the width of the filters.
	 * The area containing the filters can be hidden or shown using the HideFilterBar/ShowFilterBar button. The 'Go' button triggers the search event, and the 'Filters' button shows the filter dialog. In this dialog, the user has full control over the filter bar. The filters in this dialog are displayed in one column and organized in groups. The filter items of the filterItems aggregation are grouped in the 'Basic' group . Each filter can be marked as visible in the filter bar by selecting 'Add to Filter Bar'. In addition, the items in the 'filterGroupItems' aggregation can be marked as a part of the current variant.
	 * The variant management control will be displayed above the filters.
	 * The FilterBar also supports a different UI layout when used inside a value help dialog. In this case the FilterBar consists of two logical areas, one containing the general search button and in the s.c. 'Advanced Search' area.
	 * The 'Advanced Search' is a collapsible area displaying the advanced filters in two columns.
	 * @extends sap.ui.layout.Grid
	 *
	 * @author Franz Mueller
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterBar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FilterBar = Grid.extend("sap.ui.comp.filterbar.FilterBar", /** @lends sap.ui.comp.filterbar.FilterBar.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * The persistencyKey represents the key for storing the variant values and the fields belonging to the variants
			 */
			persistencyKey : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * The advance mode overwrites the standard behavior such that:
			 * - the text 'Dynamic Selection' is replaced by 'Advanced Search'
			 * - all filter fields are added to the advanced area
			 * - the Restore button is hidden
			 * - the advanced area is expanded
			 */
			advancedMode : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * describes whether the advanced area should be displayed collapsed or expanded
			 */
			expandAdvancedArea : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * enables/disables the search button
			 */
			searchEnabled : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * allow to display the FilterBar in expanded /collapsed mode
			 * @since 1.26.1
			 */
			filterBarExpanded : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * If this property is set, then the label for filters with a filter group title will be enhanced with the group title.
			 * @since 1.28.0
			 */
			considerGroupTitle : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * indicates if the 'Clear' button should be shown.
			 * Has to be set during filter bar initialization.
			 * @since 1.26.1
			 */
			showClearButton : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * indicates if the 'Restore' button should be shown.
			 * Has to be set during filter bar initialization.
			 * @since 1.26.1
			 */
			showRestoreButton : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * indicates if the 'Go' button should be shown in the filter bar.
			 * Has to be set during FilterBar initialization.
			 * @since 1.28.0
			 */
			showGoOnFB : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * indicates if the 'Restore' button should be shown in the filter bar.
			 * Has to be set during FilterBar initialization.
			 * @since 1.28.0
			 */
			showRestoreOnFB : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * indicates if the 'Clear' button should be shown in the filter bar.
			 * Has to be set during FilterBar initialization.
			 * @since 1.28.0
			 */
			showClearOnFB : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * indicates if the 'Go' button should be shown in the filter bar.
			 * Has to be set during FilterBar initialization.
			 * @since 1.26.1
			 * @deprecated Since version 1.28.0. 
			 * please use instead the property 'showGoOnFB'
			 */
			showGoButton : {type : "boolean", group : "Misc", defaultValue : null, deprecated: true}
		},
		aggregations : {
	
			/**
			 * is used to populate the basic area with selection fields
			 */
			filterItems : {type : "sap.ui.comp.filterbar.FilterItem", multiple : true, singularName : "filterItem"}, 
	
			/**
			 * is used for the population of the advanced area with filter fields
			 */
			filterGroupItems : {type : "sap.ui.comp.filterbar.FilterGroupItem", multiple : true, singularName : "filterGroupItem"}
		},
		events : {
	
			/**
			 * this event is fired if the button 'Reset' is executed
			 */
			reset : {}, 
	
			/**
			 * this event is fired if the button 'Search' is executed
			 */
			search : {}, 
	
			/**
			 * Fired before a variant is saved. This event can be used to adapt the model of the smart filter bar, which will be saved as variant later on.
			 */
			beforeVariantSave : {}, 
	
			/**
			 * Fired after a variant was loaded and applied to the SmartFilterBar. The event could be used to adapt custom control with data from the variant.
			 */
			afterVariantLoad : {}, 
	
			/**
			 * Event fired when the filter criteria has changed
			 */
			filterChange : {}, 
	
			/**
			 * Event fired if the Clear button is executed. The intention is to clear every filter.
			 */
			clear : {}, 
	
			/**
			 * Event fired when the filter bar is initialized and its controls are created and the variants are obtained
			 */
			initialise : {}, 
	
			/**
			 * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
			 */
			afterVariantSave : {}
		}
	}});
	
	
	/**
	 * resets the aggregation FilterItems
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#removeAllFilterItems
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * resets the aggregation FilterGroupItem
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#removeAllFilterGroupItems
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * returns all items of the FilterBar, or depending on the flag, only all visible items
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#getAllFilterItems
	 * @function
	 * @type sap.ui.comp.filterbar.FilterItem[]
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * Relevant for variant handling. This fCallBack will be executed, if a variant save is triggered and has to provide, in Json notation, all relevant fields and values
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#registerFetchData
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * Relevant for variant handling. This fCallBack will be executed, if a variant has to be applied. The fCallBack will receive the corresponding data set, in Json notation, containing all relevant data as initialy provided by the fCallBack for fetchData
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#registerApplyData
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * returns the associated control for a filter item
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#determineControlByFilterItem
	 * @function
	 * @type sap.ui.core.Control
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * returns the associated control based on name and optional group name
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#determineControlByName
	 * @function
	 * @type sap.ui.core.Control
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * the variant management will be formed , via this api, to reset the current variant selection. Required for the navigation scenario.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#clearVariantSelection
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * sets the type of the Search-button either to Emphasized or to Default. The state of the Search button will always be reset to Default, once the event search is executed
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#setSearchButtonEmphType
	 * @function
	 * @type void
	 * @public
	 * @deprecated Since version 1.26.0. 
	 * New design makes it obsolete
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * retrieve the list of controls for all mandatory fields
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#determineMandatoryFilterItems
	 * @function
	 * @type sap.ui.comp.filterbar.FilterItem[]
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * rerender the filter area
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#rerenderFilters
	 * @function
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * This function registers a callBack method to obtain the filters with values.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#registerGetFiltersWithValues
	 * @function
	 * @type sap.ui.comp.filterbar.FilterItem[]
	 * @public
	 * @since 1.26.1
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * retrieve the current Variant. In case STANDARD-variant is the current one, and empty string will be returned.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#getCurrentVariantId
	 * @function
	 * @type string
	 * @public
	 * @since 1.28.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * set the current Variant. In case STANDARD-variant is the current one, and empty string will be returned.
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#setCurrentVariantId
	 * @function
	 * @param {string} sSVariantId
	 *         the variant key
	 * @param {boolean} bBDoNotApplyVariant
	 *         if set to true the applyVariant method will not be executed yet. Relevant during navigation, where the pers-controller sets the variant id, but the initialise - sequence triggers the applyVariant method
	 * @type void
	 * @public
	 * @since 1.28.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * retrieve the filter bar data in suite format
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#getDataSuiteFormat
	 * @function
	 * @param {boolean} bBConsiderAllFilters
	 *         indicates if filters with visible=false should be considered
	 * @type string
	 * @public
	 * @since 1.28.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	/**
	 * set the suite data to filterbar
	 *
	 * @name sap.ui.comp.filterbar.FilterBar#setDataSuiteFormat
	 * @function
	 * @param {string} sSSuiteData
	 *         representing the suite data
	 * @param {boolean} bBReplace
	 *         indicates a clean-up before appliance
	 * @type void
	 * @public
	 * @since 1.28.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	
	
	
	
	
	
	
	
	
	FilterBar.INTERNAL_GROUP = "__$INTERNAL$";
	
	/**
	 * Initializes the FilterBar control
	 * 
	 * @private
	 */
	FilterBar.prototype.init = function() {
	
		this._oBasicAreaLayout = null;
		this._oAdvancedAreaForm = null;
		this._oAdvancedPanel = null;
		this._oVariantManagement = null;
	
		this._aBasicAreaSelection = null;
		this._mAdvancedAreaFilter = null;
	
		this._fRegisteredFetchData = null;
		this._fRegisteredApplyData = null;
		this._fRegisterGetFiltersWithValues = null;
		this._oHideShowButton = null;
		this._oSearchButton = null;
		this._oFiltersButton = null;
		this._oSearchButtonAdvanced = null;
		this._oClearButtonOnFB = null;
		this._oRestoreButtonOnFB = null;
	
		this._oDialog = null;
		this._oFilterDialog = null;
		this._oActionSheet = null;
		this._bInitialized = false;
	
		this._oVariant = {};
	
		this._nFirstElementWidth = 0;
	
		this._mChangedFilterItems = null;
	
		this._filterChangeSemaphore = true;
	
		this._fRegisteredFilterChangeHandlers = null;
		this._fInitialiseVariants = null;
	
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
	
		this.addStyleClass("sapUiCompFilterBar");
		if (this._isPhone()) {
			this.addStyleClass("sapUiCompFilterBarPhone");
		} else {
			this.addStyleClass("sapUiCompFilterBarNonPhone");
		}
	
		this.addStyleClass("sapUiCompFilterBarMarginBottom");
		this.addStyleClass("sapUiCompFilterBarPaddingPanel");
	
		this._oToolbar = this._createToolbar();
		this._oToolbar.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));
		this.addContent(this._oToolbar);
	
		// Basic
		this._oBasicAreaLayout = this._createBasicAreaLayout();
		this._oBasicAreaLayout.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));
		this.addContent(this._oBasicAreaLayout);
	
		// Advanced
		this._oAdvancedPanel = new Panel();
		this._oAdvancedPanel.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));
	
		this._oAdvancedPanel.setExpandable(false);
	
		this._oAdvancedPanel.setVisible(false);
		this._oAdvancedAreaForm = this._createAdvancedAreaForm();
		this._oAdvancedPanel.addContent(this._oAdvancedAreaForm);
	
		this.oAdvancedSearchArea = this._createBasicAreaLayout();
		this._oAdvancedPanel.addContent(this.oAdvancedSearchArea);
	
		this.addContent(this._oAdvancedPanel);
	
		// register event handler for resizing
		jQuery(window).on("resize.basicsearch", jQuery.proxy(this._fHandleResize, this));
	
		this.oModel = new sap.ui.model.json.JSONModel({});
		this.setModel(this.oModel, "FilterBar");
	
		this.setFilterBarExpanded(this._isTablet() ? false : this.getFilterBarExpanded());
	};
	
	/**
	 * set the visibility for the clear button on filterbar. Not supported on phone devices.
	 * 
	 * @public
	 * @since 1.28.0
	 * @param {boolean} bFlag state of visibility
	 */
	FilterBar.prototype.setShowClearOnFB = function(bFlag) {
	
		if (!this._isPhone()) {
			this.setProperty("showClearOnFB", bFlag);
			this._oClearButtonOnFB.setVisible(bFlag);
		}
	};
	
	/**
	 * set the visibility for the restore button on filterbar. Not supported on phone devices.
	 * 
	 * @public
	 * @since 1.28.0
	 * @param {boolean} bFlag state of visibility
	 */
	FilterBar.prototype.setShowRestoreOnFB = function(bFlag) {
	
		if (!this._isPhone()) {
			this.setProperty("showRestoreOnFB", bFlag);
			this._oRestoreButtonOnFB.setVisible(bFlag);
		}
	};
	
	/**
	 * set the visibility for the go button on filterbar
	 * 
	 * @public
	 * @since 1.28.0
	 * @param {boolean} bFlag state of visibility
	 */
	FilterBar.prototype.setShowGoOnFB = function(bFlag) {
	
		this.setProperty("showGoOnFB", bFlag);
	
		this._oSearchButton.setVisible(bFlag);
	};
	
	/**
	 * set the visibility for the go button on filterbar. This Property is deprecated. Please use instead the property 'showGoOnFB'.
	 * 
	 * @public
	 * @since 1.26.1
	 * @param {boolean} bFlag state of visibility
	 */
	FilterBar.prototype.setShowGoButton = function(bFlag) {

		this.setShowGoOnFB(bFlag);
	};
	/**
	 * get the visibility for the go button on filterbar. This Property is deprecated. Please use instead the property 'showGoOnFB'.
	 * 
	 * @public
	 * @since 1.26.1
	 * @returns {boolean} bFlag state of visibility
	 */
	FilterBar.prototype.getShowGoButton = function() {

		return this.getShowGoOnFB();
	};
	
	/**
	 * set the current variant id
	 * 
	 * @public
	 * @since 1.28.0
	 * @param {string} sVariantId id of the variant
	 * @param {boolean} bDoNotApplyVariant if set to true the applyVariant method will not be executed yet. Use-full if used during navigation, where the
	 *        pers-controller sets the variant id, but the initialise - sequence triggers the applyVariant method
	 */
	FilterBar.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {

	
		if (this._oVariantManagement) {
			this._oVariantManagement.setCurrentVariantId(sVariantId, bDoNotApplyVariant);
		}
	};
	
	/**
	 * retrieves the current variant id
	 * 
	 * @public
	 * @since 1.28.0
	 * @returns {string} id of the current variant
	 */
	FilterBar.prototype.getCurrentVariantId = function() {

		var sKey = "";
	
		if (this._oVariantManagement) {
			sKey = this._oVariantManagement.getCurrentVariantId();
		}
	
		return sKey;
	};
	
	/**
	 * retrieves the current variant in a suite format
	 * 
	 * @public
	 * @since 1.28.0
	 * @param {boolean} bConsiderAllFilters indicates, if hidden filters should be considered
	 * @returns {string} JSON string representing the 'new' format; null otherwise
	 */
	FilterBar.prototype.getDataSuiteFormat = function(bConsiderAllFilters) {
	
		var sSuiteVariant = null;
		var sKey, sContent, aFiltersInfo;
	
		if (this._oVariantManagement) {
			sKey = this.getCurrentVariantId();
	
			if (this.getFilterDataAsString) {
				aFiltersInfo = this._determineVariantFiltersInfo(bConsiderAllFilters);
	
				sContent = this.getFilterDataAsString(bConsiderAllFilters);
				if (sContent) {
					var oConverter = new VariantConverterTo();
					sSuiteVariant = oConverter.convert(sKey, aFiltersInfo, sContent, this);
				}
			}
		}
	
		return sSuiteVariant;
	};
	FilterBar.prototype.getCurrentVariant = function(bConsiderAllFilters) {

		return this.getDataSuiteFormat(bConsiderAllFilters);
	};
	
	/**
	 * retrieves the current variant in a suite format
	 * 
	 * @public
	 * @since 1.28.0
	 * @param {string} sSuiteData representing the suite data
	 * @param {boolean} bReplace indicates a clean-up before appliance
	 */
	FilterBar.prototype.setDataSuiteFormat = function(sSuiteData, bReplace) {

		var sContent;
		
		if (sSuiteData) {
			
			var oConverter = new VariantConverterFrom();
			sContent = oConverter.convert(sSuiteData, this);
			
			if (sContent && this.setFilterDataAsString) {
				this._setConsiderFilterChanges(false);				
				this.setFilterDataAsString(sContent, bReplace);
				this._setConsiderFilterChanges(true);				
			}			
		}
	};
	FilterBar.prototype.setCurrentVariant = function(sSuiteData, bReplace) {

		this.setDataSuiteFormat(sSuiteData, bReplace);
	};
	
	/**
	 * set the persistency key for
	 * 
	 * @public
	 * @param {string} sPersistenceKey id for persistency
	 */
	FilterBar.prototype.setPersistencyKey = function(sPersistenceKey) {

		this.setProperty("persistencyKey", sPersistenceKey);
	
		this._oVariantManagement.setVisible(!this.getAdvancedMode());
	};
	
	/**
	 * When the filterBar is started via navigation, we need to inform the variant management to reset an eventual previous selection
	 * 
	 * @public
	 */
	FilterBar.prototype.clearVariantSelection = function() {

		if (this._oVariantManagement) {
			this._oVariantManagement.clearVariantSelection();
		}
	};
	
	/**
	 * sets the type of the Search-button to Emphasize. The state of the Search button will always be reset, once the event search is executed
	 * 
	 * @public
	 * @param {boolean} bSetEmphasize sets the Emphasized or Default - type
	 */
	FilterBar.prototype.setSearchButtonEmphType = function(bSetEmphasize) {

	};
	
	/**
	 * enables/disables the search button
	 * 
	 * @public
	 * @param {boolean} bValue sets/resets the enable state of the search button
	 */
	FilterBar.prototype.setSearchEnabled = function(bValue) {
	
		this.setProperty("searchEnabled", bValue);
	
		if (this._oSearchButton) {
			this._oSearchButton.setEnabled(bValue);
		}
	};
	
	/**
	 * NOT REQUIRED ANY LONGER The simplified mode is with beginning of 1.25 always implicitly used. The former setter-method method stays in place, so
	 * that the former usages do not have to be adapted. new layout set the new behavior: all fields (select and filters) are displayed in one ui region.
	 * The initial display occurs in one line. public
	 * 
	 * @param {boolean} bFlag sets/resets the simplified mode
	 */
	FilterBar.prototype.setSimplifiedMode = function(bFlag) {

		// the simplified mode is with beginning of 1.25 always implicitly used.
		// The former setter-method method stays in place, so that the former usages do not have to be adapted.
	};
	
	/**
	 * NOT REQUIRED ANY LONGER The simplified mode is with beginning of 1.25 always implicitly used. The former getter-method method stays in place, so
	 * that the former usages do not have to be adapted. new layout set the new behavior: all fields (select and filters) are displayed in one ui region.
	 * The initial display occurs in one line. public
	 * 
	 * @param {boolean} bFlag mode
	 * @returns {boolean} false if the current advanced mode is set, true otherwise
	 */
	FilterBar.prototype.getSimplifiedMode = function(bFlag) {
	
		if (this.getAdvancedMode()) {
			return false;
		}
	
		return true;
	};
	
	/**
	 * describes whether the advanced area should be displayed collapsed or expanded
	 * 
	 * @public
	 * @param {boolean} bFlag sets/resets the advanced area to expanded/collapsed
	 */
	FilterBar.prototype.setExpandAdvancedArea = function(bFlag) {
	
		this.setProperty("expandAdvancedArea", bFlag);
	
		if (this._oAdvancedPanel.getVisible()) {
			this._oAdvancedPanel.setExpanded(bFlag);
		}
	};
	
	/**
	 * describes whether the advanced area is currently displayed as collapsed or expanded
	 * 
	 * @public
	 * @returns {boolean} return the current state of the expand area
	 */
	FilterBar.prototype.getExpandAdvancedArea = function() {
	
		if (this._oAdvancedPanel.getVisible()) {
			return this._oAdvancedPanel.getExpanded();
		}
	
		return false;
	};
	
	/**
	 * handling the search button, based on the scenario
	 * 
	 * @private
	 * @param {boolean} bFlag indicates the scenario
	 */
	FilterBar.prototype._switchButtons = function(bFlag) {

		if (bFlag) {

			if (!this._oSearchButtonAdvanced) {
				this._oSearchButtonAdvanced = this._oSearchButton.clone();				
				this._oSearchButtonAdvanced.setText(this._oRb.getText("FILTER_BAR_SEARCH"));
				this._oSearchButtonAdvanced.setVisible(true);			
			}

			this._initializeSearchButtonsLocation();			

		} else {
			this._oBasicAreaLayout.removeContent(this._oSearchButtonAdvanced);
			this.oAdvancedSearchArea.removeContent(this._oSearchButtonAdvanced);			
		}

		this._oToolbar.setVisible(!bFlag);
	};
	
	FilterBar.prototype._initializeSearchButtonsLocation = function() {
		var aContent, idx = 0;
		
		if (this._oSearchButtonAdvanced) {
			this._oSearchButtonAdvanced.setVisible(true);	
			if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP] && this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items && this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items.length > 0) {
				aContent = this._oBasicAreaLayout.getContent();
				if (aContent.length > 0) {
					idx = aContent.length - 1;
				}				
				this._oBasicAreaLayout.insertContent(this._oSearchButtonAdvanced, idx);					
			} else {				
				this._oSearchButtonAdvanced.addStyleClass("sapUiCompFilterBarFloatRight");
				this.oAdvancedSearchArea.addContent(this._oSearchButtonAdvanced);		
				this.oAdvancedSearchArea.setVisible(true);					
			}			
		}
	};
	
	
	/**
	 * In advanced mode the text 'Dynamic Selection' is replaced by 'Advanced Search' all filter fields are added to the advanced area and the add/remove
	 * filter button and the variant management buttons are hidden
	 * 
	 * @public
	 * @param {boolean} bFlag - true or false / set-reset advanced mode
	 */
	FilterBar.prototype.setAdvancedMode = function(bFlag) {

		this.setProperty("advancedMode", bFlag);
	
		this.setFilterBarExpanded(bFlag);
	
		this._oFiltersButton.setVisible(!bFlag);
	
		this._switchButtons(bFlag);
	
		if (!bFlag) {
	
			if (this.getPersistencyKey()) {
				this._oVariantManagement.setVisible(true);
			}
	
			return;
		}
	
		var i, n = null;
		var oGroup;
	
		this._oVariantManagement.setVisible(false);
	
		for (n in this._mAdvancedAreaFilter) {
			if (n) {
				oGroup = this._mAdvancedAreaFilter[n];
				if (oGroup && oGroup.items) {
					for (i = 0; i < oGroup.items.length; i++) {
						oGroup.items[i].filterItem.setVisibleInFilterBar(true);
					}
				}
			}
		}
	
	};
	
	/**
	 * add an FilterItem element to the basic area
	 * 
	 * @public
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem filter item
	 */
	FilterBar.prototype.addFilterItem = function(oFilterItem) {

		var sName;
		var oControl;
	
		if (!oFilterItem) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem' may not be null nor empty");
		}
	
		sName = oFilterItem.getName();
		if (!sName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem.name' may not be null nor empty");
		}
	
		oControl = oFilterItem.getControl();
		if (!oControl) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem.control' may not be null nor empty");
		}
	
		this.addAggregation("filterItems", oFilterItem, true);
	
		// has to be initialized before the call to the container creation
		if (!this._aBasicAreaSelection) {
			this._aBasicAreaSelection = [];
		}
	
		var oObj = {
			control: oFilterItem.getControl(),
			filterItem: oFilterItem
		};
		this._aBasicAreaSelection.push(oObj);
	
		if (this.getAdvancedMode()) {
	
			var oContainer = this._addControlToBasicAreaFormContainer(oFilterItem);
			if (oContainer) {
				oContainer.setVisible(oFilterItem.getVisible());
				oFilterItem.attachChange(this._filterItemChange.bind(this, oContainer));
				oObj.container = oContainer;
			}
	
		} else {
	
			var oFilterGroupItem = new sap.ui.comp.filterbar.FilterGroupItem({
				label: oFilterItem.getLabel(),
				labelTooltip: oFilterItem.getLabelTooltip(),
				name: oFilterItem.getName(),
				mandatory: oFilterItem.getMandatory(),
				visible: oFilterItem.getVisible(),
				visibleInFilterBar: oFilterItem.getVisibleInFilterBar(),
				partOfCurrentVariant: true,
				control: oFilterItem.getControl(),
				groupName: FilterBar.INTERNAL_GROUP,
				groupTitle: ""
			});
	
			if (oFilterItem.data('isCustomField')) {
				oFilterGroupItem.data('isCustomField', true);
			}
	
			oFilterItem.attachChange(this._filterItemChange.bind(this, null));
	
			this.addFilterGroupItem(oFilterGroupItem);
		}
	
	};
	
	/**
	 * add an FilterItem element to the advanced area
	 * 
	 * @public
	 * @param {sap.ui.comp.filterbar.FilterGroupItem} oFilterGroupItem group filter item
	 */
	FilterBar.prototype.addFilterGroupItem = function(oFilterGroupItem) {
	
		if (!oFilterGroupItem) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItem()" + " Expected argument 'oFilterGroupItem' may not be null nor empty");
		}
	
		this.addAggregation("filterGroupItems", oFilterGroupItem, true);
	
		var sGroupName = oFilterGroupItem.getGroupName();
		if (!sGroupName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItems()" + " GroupName may not be null nor empty");
		}
	
		var sName = oFilterGroupItem.getName();
		if (!sName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItems()" + " Name may not be null nor empty");
		}
	
		if (!this._mAdvancedAreaFilter) {
			this._mAdvancedAreaFilter = {};
		}
		if (!this._mAdvancedAreaFilter[sGroupName]) {
			this._mAdvancedAreaFilter[sGroupName] = {};
			this._mAdvancedAreaFilter[sGroupName].filterItem = oFilterGroupItem;
			this._mAdvancedAreaFilter[sGroupName].items = [];
		}
	
		var oObj = {
			control: oFilterGroupItem.getControl(),
			filterItem: oFilterGroupItem
		};
	
		if (this.getAdvancedMode() || oFilterGroupItem.getVisibleInFilterBar()) {
			oFilterGroupItem.setVisibleInFilterBar(true);
		} else {
			oFilterGroupItem.setVisibleInFilterBar(false);
		}
	
		this._mAdvancedAreaFilter[sGroupName].items.push(oObj);
	
		if (this.getAdvancedMode()) {
			this._rerenderAA();
			oFilterGroupItem.attachChange(this._filterGroupItemChange.bind(this));
		} else {
			var oContainer = this._addControlToBasicAreaFormContainer(oFilterGroupItem);
			if (oContainer) {
				oObj.container = oContainer;
	
				oContainer.setVisible(oFilterGroupItem.getVisible() && oFilterGroupItem.getVisibleInFilterBar());
				if (oFilterGroupItem.getVisibleInFilterBar()) {
					oFilterGroupItem.setPartOfCurrentVariant(oFilterGroupItem.getVisibleInFilterBar());
				}
	
				oFilterGroupItem.attachChange(this._filterGroupItemChange.bind(this));
			}
		}
	};
	
	/**
	 * Event handler called when the property of a filter item has changed
	 * 
	 * @private
	 * @param {object} oContainer the container of the filter item's control and label
	 * @param {object} oEvent the event
	 */
	FilterBar.prototype._filterItemChange = function(oContainer, oEvent) {
	
		var oItem;
		var bFlag;
	
		if (oEvent && oEvent.oSource && (oEvent.oSource instanceof sap.ui.comp.filterbar.FilterItem)) {
	
			var sPropertyName = oEvent.getParameter("propertyName");
	
			if (this.getAdvancedMode() && (sPropertyName === "visible")) {
				oContainer.setVisible(bFlag);
				return;
			}
	
			if (sPropertyName === "visibleInFilterBar" || sPropertyName === "visible" || sPropertyName === "label" || sPropertyName === "mandatory") {
				oItem = this._determineItemByName(oEvent.oSource.getName(), FilterBar.INTERNAL_GROUP);
	
				if (oItem && oItem.filterItem) {
					if ((sPropertyName === "visible")) {
						bFlag = oEvent.oSource.getVisible();
						oItem.filterItem.setVisible(bFlag);
					} else if (sPropertyName === "visibleInFilterBar") {
						bFlag = oEvent.oSource.getVisibleInFilterBar();
						var bChangePossible = this._checkChangePossibleVisibleInFilterBar(oItem.filterItem, bFlag);
						if (bChangePossible) {
							oItem.filterItem.setVisibleInFilterBar(bFlag);
						} else {
							oEvent.oSource.setVisibleInFilterBar(true);
						}
	
					} else if (sPropertyName === "label") {
						oItem.filterItem.setLabel(oEvent.oSource.getLabel());
					} else if (sPropertyName === "mandatory") {
						bFlag = oEvent.oSource.getMandatory();
						oItem.filterItem.setMandatory(bFlag);
					}
				}
			}
		}
	};
	
	/**
	 * Event handler called when the property of a filter group item has changed
	 * 
	 * @private
	 * @param {object} oEvent the event
	 */
	FilterBar.prototype._filterGroupItemChange = function(oEvent) {
	
		var oItem;
		var sPropertyName;
	
		if (this.getAdvancedMode()) {
			this._rerenderAA();
			return;
		}
	
		if (oEvent && oEvent.oSource) {
			sPropertyName = oEvent.getParameter("propertyName");
			if (sPropertyName === "visibleInFilterBar" || sPropertyName === "visible") {
	
				oItem = this._determineItemByName(oEvent.oSource.getName(), oEvent.oSource.getGroupName());
				if (oItem) {
					if (sPropertyName === "visibleInFilterBar") {
						var bFlag = oEvent.oSource.getVisibleInFilterBar();
	
						var bChangePossible = this._checkChangePossibleVisibleInFilterBar(oEvent.oSource, bFlag);
						if (!bChangePossible) {
							oEvent.oSource.setVisibleInFilterBar(true);
							bFlag = true;
						}
	
						if (bFlag) {
							oEvent.oSource.setPartOfCurrentVariant(true);
						}
	
						this._rerenderItem(oItem);
						this._adaptLinkText(oEvent.oSource.getGroupName());
	
					} else if (sPropertyName === "visible") {
						this._updateToolbarText();
						this._rerenderGroup(oItem, oEvent.oSource.getGroupName());
					}
				}
			} else if (sPropertyName === "groupTitle") {
				if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()]) {
					if (this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer) {
						this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer.setTitle(oEvent.oSource.getGroupTitle());
					} else {
						this._adaptGroupTitle(oEvent.oSource.getGroupName());
					}
				}
			} else if (sPropertyName === "label") {
				if (!this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer) { // do not adapt in case the advanced filters dialog is
					// active
					this._adaptGroupTitleForFilter(oEvent.oSource);
				}
			} else if (sPropertyName === "mandatory") {
				if (this._oFilterDialog) { // adapt only in case the advanced filters dialog is active
					this._adaptMandatoryForFilter(oEvent.oSource);
				}
			}
		}
	};
	
	/**
	 * visibleInFilterBar may not be changed to false, when the filter is mandatory and has no value
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem in question
	 * @param {boolean} bFlag - represents the value of visibleInFilterBar
	 * @returns {boolean} allowed or not allowed change
	 */
	FilterBar.prototype._checkChangePossibleVisibleInFilterBar = function(oFilterItem, bFlag) {
	
		if (oFilterItem && oFilterItem.getMandatory() && !bFlag) {
			var bHasValue = this._hasFilterValue(oFilterItem);
			if (!bHasValue) {
				oFilterItem.setVisibleInFilterBar(true);
				return false;
			}
		}
	
		return true;
	};
	
	/**
	 * in case the visibility was changed, check if the link text has to be adapted
	 * 
	 * @private
	 * @param {string} sGroupName the group name
	 */
	FilterBar.prototype._adaptLinkText = function(sGroupName) {
	
		if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].link) {
			this._setLinkText(sGroupName, this._mAdvancedAreaFilter[sGroupName].link);
		}
	};
	
	/**
	 * convenient function
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the filter
	 * @returns {boolean} returns if the passed filter has a value or not
	 */
	FilterBar.prototype._hasFilterValue = function(oFilterItem) {
	
		var aFilters = this._getFiltersWithValues();
		return this._checkFilterForValue(aFilters, oFilterItem);
	};
	
	/**
	 * handling dynamic change of the mandatory property
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the filter
	 */
	FilterBar.prototype._adaptMandatoryForFilter = function(oFilterItem) {
	
		var oItem;
		var sGroupName = oFilterItem.getGroupName();
	
		if (oFilterItem) {
			oItem = this._determineItemByName(oFilterItem.getName(), sGroupName);
			if (oItem && oItem.checkbox && oItem.checkbox.getVisible()) {
	
				var bEnabled = true;
				if (oFilterItem.getMandatory()) {
					var bHasValue = this._hasFilterValue(oFilterItem);
					if (!bHasValue) {
						bEnabled = false;
						oFilterItem.setVisibleInFilterBar(true);
					}
				}
	
				oItem.checkbox.setEnabled(bEnabled);
			}
		}
	};
	
	/**
	 * in case considerGroupTitle is set then all labels of filters of a specific group will post-fixed with the group title
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterGroupItem} oFilterItem the filter
	 */
	FilterBar.prototype._adaptGroupTitleForFilter = function(oFilterItem) {
	
		var sLabel;
		var oLabel;
	
		if (oFilterItem) {
			sLabel = oFilterItem.getLabel();
			oLabel = oFilterItem.getLabelControl();
			if (this.getConsiderGroupTitle()) {
				if (oLabel && oFilterItem.getGroupTitle()) {
					oLabel.setText(sLabel + " (" + oFilterItem.getGroupTitle() + ')');
				}
			} else {
				oLabel.setText(sLabel);
			}
		}
	};
	
	/**
	 * in case considerGroupTitle is set then all labels of filters of a specific group will post-fixed with the group title
	 * 
	 * @private
	 * @param {string} sGroupName filter group name
	 */
	FilterBar.prototype._adaptGroupTitle = function(sGroupName) {
	
		var i;
		var oItem;
	
		if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oItem = this._mAdvancedAreaFilter[sGroupName].items[i];
				if (oItem && oItem) {
					this._adaptGroupTitleForFilter(oItem.filterItem);
				}
			}
		}
	};
	
	/**
	 * in case considerGroupTitle is set then all labels of all filters of all groups will be post-fixed with the group title
	 * 
	 * @private
	 * @param {string} sGroupName the group name
	 */
	FilterBar.prototype._adaptGroupsTitle = function() {
	
		var n = null;
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n && n !== FilterBar.INTERNAL_GROUP) {
					this._adaptGroupTitle(n);
				}
			}
		}
	
	};
	
	/**
	 * fCallBack for being able to participate in variant save handling. This fCallBack will be executed, whenever the variant save is triggered and has
	 * to provide, in Json notation, all relevant fields and values. This data blob will be saved along with the current variant
	 * 
	 * @public
	 * @since 1.26.1
	 * @param {function} fCallBack to be called, when a variant has to be applied
	 */
	FilterBar.prototype.registerGetFiltersWithValues = function(fCallBack) {

	
		this._fRegisterGetFiltersWithValues = fCallBack;
	};
	
	/**
	 * fCallBack for being able to participate in variant save handling. This fCallBack will be executed, whenever the variant save is triggered and has
	 * to provide, in Json notation, all relevant fields and values. This data blob will be saved along with the current variant
	 * 
	 * @public
	 * @param {function} fCallBack to be called, when a variant has to be applied
	 */
	FilterBar.prototype.registerFetchData = function(fCallBack) {

		this._fRegisteredFetchData = fCallBack;
	};
	
	/**
	 * fCallBack for being able to participate in variant handling. This fCallBack will be executed, when ever a variant has to be applied. The fCallBack
	 * will receive the corresponding data set, in Json notation, containing all relevant data as initially provided by the fCallBack for fetchData
	 * 
	 * @public
	 * @param {function} fCallBack to be called, when a variant has to be applied
	 */
	FilterBar.prototype.registerApplyData = function(fCallBack) {
	
		this._fRegisteredApplyData = fCallBack;
	};
	
	FilterBar.prototype._isTINAFScenario = function() {
	
		if (this._oVariantManagement && (this._oVariantManagement instanceof SmartVariantManagement)) {
			return true;
		}
	
		return false;
	};
	
	/**
	 * read the personalization, apply eventual variants and inform all registered parties about the initialization finish. In case a default variant
	 * exists, trigger search
	 * 
	 * @public
	 */
	FilterBar.prototype.fireInitialise = function() {

	
		if (this._isTINAFScenario()) {
			this._fireInitialiseEvent();
		} else {
			this._initializeVariantManagement();
		}
	};
	
	/**
	 * initializes the variant management, when the prerequisites are full filled. In this case the initialise-event will be triggered lated, after the
	 * variant management initialization. Triggers the initialise-event immediately, in case the pre-requisits are not full filled
	 * 
	 * @private
	 */
	FilterBar.prototype._initializeVariantManagement = function() {
	
		// initialise SmartVariant stuff only if it is necessary! (Ex: has a persistencyKey)
		if (this._oVariantManagement && this.getPersistencyKey()) {
	
			this._fInitialiseVariants = jQuery.proxy(this._initialiseVariants, this);
			this._oVariantManagement.attachInitialise(this._fInitialiseVariants);
	
			this._oVariantManagement.initialise();
	
		} else {
			this._fireInitialiseEvent();
		}
	};
	
	FilterBar.prototype._fireInitialiseEvent = function() {

	
		this.fireEvent("initialise");
	
		this._bInitialized = true;
	};
	
	/**
	 * is triggered, whenever the flex layer is initialized
	 * 
	 * @private
	 */
	FilterBar.prototype._initialiseVariants = function() {

		this._fireInitialiseEvent();
		if (this._oVariantManagement) { // mark any changes as irrelevant
			this._oVariantManagement.currentVariantSetModified(false);
		}
	};
	
	/**
	 * informs the user of the filter bar, that a new variant was applied
	 * 
	 * @privare
	 */
	FilterBar.prototype.fireAfterVariantLoad = function() {
	
		this._rerenderFilters();
	
		this._mChangedFilterItems = null;
	
		this.fireEvent("afterVariantLoad");
	};
	
	/**
	 * removes all entries in the aggregation FilterItems
	 * 
	 * @public
	 */
	FilterBar.prototype.removeAllFilterItems = function() {
	
		var i;
		var aFilters;
	
		this._aBasicAreaSelection = null;
	
		var aControls = this._oBasicAreaLayout.getContent();
		if (aControls) {
			for (i = 0; i < aControls.length; i++) { // 'variant management' ... 'plus', ' more-less', buttons container
				this._oBasicAreaLayout.removeContent(aControls[i]);
			}
		}
	
		aFilters = this.getFilterItems();
		if (this._mAdvancedAreaFilter) {
			if ((this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP]) && (this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items)) {
				for (i = 0; i < this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items.length; i++) {
					if (this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem) {
						aFilters.push(this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem);
					}
				}
	
				delete this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP];
			}
	
			if (Object.keys(this._mAdvancedAreaFilter).length === 0) {
				this._mAdvancedAreaFilter = null;
			}
		}
	
		// this.removeAggregation("filterItems");
	
		this._destroyItems(aFilters);
	};
	
	/**
	 * removes all entries in the aggregation GroupFilterItems
	 * 
	 * @public
	 */
	FilterBar.prototype.removeAllFilterGroupItems = function() {
	
		var n = null, i;
		var aFilters = [];
	
		this._oAdvancedPanel.setVisible(false);
		this._oAdvancedAreaForm.removeAllFormContainers();
	
		for (n in this._mAdvancedAreaFilter) {
			if (n) {
				if (this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						if (this._mAdvancedAreaFilter[n].items[i].filterItem) {
							aFilters.push(this._mAdvancedAreaFilter[n].items[i].filterItem);
						}
					}
	
					delete this._mAdvancedAreaFilter[n];
				}
			}
	
			if (Object.keys(this._mAdvancedAreaFilter).length === 0) {
				this._mAdvancedAreaFilter = null;
			}
		}
	
		// this.removeAggregation("filterGroupItems");
		this._destroyItems(aFilters);
	};
	
	/**
	 * determine all known controls, regardless of their visibility
	 * 
	 * @public
	 * @param {boolean} bConsiderOnlyVisibleFields based on this flag either all or just the visible/partOfCurrentVariant items are returned
	 * @returns {array} array of all/only visible/partOfCurrentVariant items
	 */
	FilterBar.prototype.getAllFilterItems = function(bConsiderOnlyVisibleFields) {

		var i, n = null;
		var aFilters = [];
		var oElement, oItem;
	
		if (this.getAdvancedMode()) {
	
			if (this._aBasicAreaSelection) {
				for (i = 0; i < this._aBasicAreaSelection.length; i++) {
					oItem = this._aBasicAreaSelection[i];
					if (oItem && oItem.filterItem && oItem.filterItem.getVisible()) {
						aFilters.push(oItem.filterItem);
					}
				}
			}
		}
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oElement = this._mAdvancedAreaFilter[n];
					if (oElement.items) {
						for (i = 0; i < oElement.items.length; i++) {
							oItem = oElement.items[i];
							if (oItem && oItem.filterItem && oItem.filterItem.getVisible()) {
								if (bConsiderOnlyVisibleFields) {
									if (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()) {
										aFilters.push(oItem.filterItem);
									}
								} else {
									aFilters.push(oItem.filterItem);
								}
							}
						}
					}
				}
			}
		}
	
		return aFilters;
	};
	
	/**
	 * clear an eventual error state on all filter
	 * 
	 * @private
	 */
	FilterBar.prototype._clearErrorState = function() {
	
		var i;
		var oControl;
	
		var aFilterItems = this.determineMandatoryFilterItems();
		if (aFilterItems) {
			for (i = 0; i < aFilterItems.length; i++) {
				oControl = this.determineControlByFilterItem(aFilterItems[i]);
				if (oControl && oControl.setValueState) {
					oControl.setValueState(ValueState.None);
				}
			}
		}
	};
	
	/**
	 * destroys the aggregation items
	 * 
	 * @private
	 * @param {array} aFilterItems items from the aggregations
	 */
	FilterBar.prototype._destroyItems = function(aFilterItems) {
	
		if (aFilterItems && aFilterItems.length) {
			for (var i = 0; i < aFilterItems.length; i++) {
				aFilterItems[i].destroy();
			}
		}
	};
	
	/**
	 * is called whenever a variant is applied. Persisted data is loaded and the visibility of the filter fields has to be adapted
	 * 
	 * @private
	 * @param {array} aPersData information about the filter fields
	 */
	FilterBar.prototype._reapplyVisibility = function(aPersData) {
	
		var i, n = null;
		var oItem;
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroup = this._mAdvancedAreaFilter[n];
					if (oGroup && oGroup.items) {
						for (i = 0; i < oGroup.items.length; i++) {
							oItem = oGroup.items[i];
							if (oItem && oItem.filterItem) {
								this._setPersVisibility(aPersData, oItem.filterItem);
							}
						}
	
						if (n !== FilterBar.INTERNAL_GROUP) {
							this._adaptLinkText(n);
						}
					}
				}
			}
		}
	};
	
	/**
	 * determines if the current filter is marks as visible via the personalization
	 * 
	 * @private
	 * @param {array} aPersData array of filters as obtain by the persistence layer
	 * @param {sap.ui.comp.filterBar.FilterItem} oFilterItem current filterItem
	 */
	FilterBar.prototype._setPersVisibility = function(aPersData, oFilterItem) {

		var sGroupName, sName;
		var oFilterInfo;
	
		if (oFilterItem) {
			sName = oFilterItem.getName();
			sGroupName = oFilterItem.getGroupName();
	
			oFilterInfo = this._checkForFilterInfo(aPersData, sName);
			if (this._isTINAFScenario()) {
				if (oFilterInfo) {
					oFilterItem.setVisibleInFilterBar((oFilterInfo.visibleInFilterBar));
					oFilterItem.setPartOfCurrentVariant((oFilterInfo.partOfCurrentVariant));
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (oFilterInfo && (oFilterInfo.visibleInFilterBar !== undefined)) { // new format
					oFilterItem.setVisibleInFilterBar((oFilterInfo.visibleInFilterBar));
					oFilterItem.setPartOfCurrentVariant((oFilterInfo.partOfCurrentVariant));
				} else { // old format
					if ((sGroupName !== FilterBar.INTERNAL_GROUP) && oFilterInfo && (oFilterInfo.group === sGroupName)) {
	
						oFilterItem.setVisibleInFilterBar((oFilterInfo !== null));
					}
				}
				/* eslint-enable no-lonely-if */
			}
		}
	};
	
	/**
	 * determines the filter info from the persistence data for a specific filter
	 * 
	 * @private
	 * @param {array} aPersData array of filters as obtain by the persistence layer
	 * @param {string} sName name of the filter
	 * @returns {object} filter info object
	 */
	FilterBar.prototype._checkForFilterInfo = function(aPersData, sName) {
	
		var i;
		var oFilterInfo = null;
	
		if (aPersData && aPersData.length) {
			for (i = 0; i < aPersData.length; i++) {
				if (aPersData[i].name === sName) {
					oFilterInfo = aPersData[i];
					break;
				}
			}
		}
	
		return oFilterInfo;
	};
	
	/**
	 * creates the control for the variant-management
	 * 
	 * @private
	 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} the instance of variant management
	 */
	FilterBar.prototype._createVariantManagement = function() {
	
		var oVarMgm = new SmartVariantManagementUi2({
		// showExecuteOnSelection: true,
		// showShare: true
		});
	
		var oPersInfo = new PersonalizableInfo({
			type: "filterBar",
			keyName: "persistencyKey"
		});
		oPersInfo.setControl(this);
	
		oVarMgm.addPersonalizableControl(oPersInfo);
	
		oVarMgm.addStyleClass("sapUiCompFilterBarMarginLeft");
		return oVarMgm;
	};
	
	/**
	 * retrieve all filters with values
	 * 
	 * @private
	 * @returns {array} of filters with values
	 */
	FilterBar.prototype._getFiltersWithValues = function() {
	
		if (this._fRegisterGetFiltersWithValues) {
			try {
				return this._fRegisterGetFiltersWithValues();
			} catch (ex) {
				jQuery.sap.log.error("callback for obtaining the filter count throws an exception");
			}
		}
	
		return null;
	};
	
	/**
	 * retrieve the count for visible filters with values
	 * 
	 * @private
	 * @returns {number} count of visible filters with values
	 */
	FilterBar.prototype._getFiltersWithValuesCount = function() {
	
		var i, n = 0;
	
		var aFilters = this._getFiltersWithValues();
		if (aFilters) {
			for (i = 0; i < aFilters.length; i++) {
				if (aFilters[i].getVisible() && (aFilters[i].getVisibleInFilterBar() || aFilters[i].getPartOfCurrentVariant())) {
					n++;
				}
			}
		}
	
		return n;
	};
	
	/**
	 * determines if at least one filter is visible
	 * 
	 * @private
	 * @param {array} aFilterItemsWithValues contains all filters with values
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem filter to check
	 * @returns {boolean} indicated whether at least one filter is visible
	 */
	FilterBar.prototype._checkFilterForValue = function(aFilterItemsWithValues, oFilterItem) {
	
		var i;
		if (aFilterItemsWithValues) {
			for (i = 0; i < aFilterItemsWithValues.length; i++) {
				if (aFilterItemsWithValues[i] === oFilterItem) {
					return true;
				}
			}
		}
	
		return false;
	};
	
	/**
	 * toggles the filter bar mode Hide/Show
	 * 
	 * @private
	 */
	FilterBar.prototype._toggleHideShow = function() {

	
		this.setFilterBarExpanded(!this.getFilterBarExpanded());
	};
	
	/**
	 * updates the filters-button text with the count of filters with values
	 * 
	 * @private
	 */
	FilterBar.prototype._updateToolbarText = function() {
	
		var nFilterCount = this._getFiltersWithValuesCount();
		var sText = nFilterCount ? (this._oRb.getText("FILTER_BAR_ACTIVE_FILTERS", [
			nFilterCount
		])) : (this._oRb.getText("FILTER_BAR_ACTIVE_FILTERS_ZERO"));
		this._oFiltersButton.setText(sText);
	};
	
	/**
	 * set filter bar in collapsed/expanded mode
	 * 
	 * @private
	 * @since 1.26.1
	 * @param {boolean} bShowExpanded mode
	 */
	FilterBar.prototype.setFilterBarExpanded = function(bShowExpanded) {

	
		var bExpanded = this._isPhone() ? false : bShowExpanded;
	
		this.setProperty("filterBarExpanded", bExpanded);
	
		if (this._isPhone()) {
			this._oHideShowButton.setVisible(false);
			this._oSearchButton.setVisible(this.getShowGoOnFB());
	
			if (this.getAdvancedMode()) {
				this._oBasicAreaLayout.setVisible(true); // contains the basic search field
			} else {
				this._oBasicAreaLayout.setVisible(false);
			}
	
		} else {
	
			if (bExpanded) {
				this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_HIDE"));
			} else {
				this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_SHOW"));
			}
			this._oHideShowButton.setVisible(true);
			this._oSearchButton.setVisible(this.getShowGoOnFB());
			this._oBasicAreaLayout.setVisible(bExpanded);
		}
	
		this._updateToolbarText();
	};
	
	/**
	 * event-handler whenever in the 'Advanced Dialog' a field was checked/unchecked and handles its visibility in the filter bar
	 * 
	 * @private
	 * @param {sap.m.Checkbox } oCheckBox on which the select-state was changed
	 * @param {sap.ui.comp.filterbar.FilterItem } oFilterItem manipulated by the checkbox
	 */
	FilterBar.prototype._selectionChangedInFilterDialog = function(oCheckBox, oFilterItem) {
	
		oFilterItem.setVisibleInFilterBar(oCheckBox.getSelected());
	
		if (this._getConsiderFilterChanges() && this._oVariantManagement && this._oVariantManagement.getEnabled()) {
			this._oVariantManagement.currentVariantSetModified(true);
		}
	};
	
	/**
	 * event-handler x-check mandatory filed values
	 * 
	 * @private
	 * @param {object } oEvent general event object
	 */
	FilterBar.prototype._mandatoryFilterChange = function(oEvent) {
	
		if (!oEvent) {
			return;
		}
	
		var params = oEvent.getParameters();
		if (!params || !params.oSource) {
			return;
		}
	
		var oItem = this._determineByControl(params.oSource);
		if (oItem && oItem.checkbox) {
	
			var oFilterItem = oItem.filterItem;
	
			if (!oFilterItem.getMandatory()) {
				return;
			}
	
			var bHasValue = this._hasFilterValue(oFilterItem);
			if (oFilterItem.getVisibleInFilterBar()) {
				if (bHasValue) {
					oItem.checkbox.setEnabled(true);
				} else {
					oItem.checkbox.setEnabled(false);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (!bHasValue) {
					oFilterItem.setVisibleInFilterBar(true);
					oItem.checkbox.setSelected(true);
					oItem.checkbox.setEnabled(false);
				}
				/* eslint-enable no-lonely-if */
			}
		}
	};
	
	/**
	 * called from filters-dialog and creates the form containing all filters
	 * 
	 * @private
	 * @returns {sap.ui.layout.form.Form} the filter form
	 */
	FilterBar.prototype._createFiltersAndAdaptBasicArea = function() {
	
		var oForm;
	
		this._setConsiderFilterChanges(false);
		this._recreateBasicAreaContainer(true);
	
		oForm = this._createFilters();
		this._setConsiderFilterChanges(true);
	
		return oForm;
	};
	
	/**
	 * determines how many filters of a specific group are yet not part of the current variant
	 * 
	 * @private
	 * @param {string} sGroupName name of the current group
	 * @returns {number} count of filters, for the current group, yet not part of the current variant
	 */
	FilterBar.prototype._determineNotAssignedFiltersCount = function(sGroupName) {

		var nCount = 0, i;
		var oFilterItem;
	
		if (this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oFilterItem = this._mAdvancedAreaFilter[sGroupName].items[i].filterItem;
				if (!oFilterItem.getVisible()) {
					continue;
				}
				if (!oFilterItem.getPartOfCurrentVariant() && !oFilterItem.getVisibleInFilterBar()) {
					nCount++;
				}
			}
		}
	
		return nCount;
	};
	
	/**
	 * handles the visibility of the passed oItem; adapt the more-link text;handles the visibility for the form-container
	 * 
	 * @private
	 * @param {object} oItem representing a filter
	 * @param {string} sGroupName name of the current group
	 */
	FilterBar.prototype._rerenderGroup = function(oItem, sGroupName) {
	
		var i;
		var oFilterItem;
	
		this._rerenderItem(oItem);
		this._adaptLinkText(sGroupName);
	
		if (oItem.formelement) {
	
			if (this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items && this._mAdvancedAreaFilter[sGroupName].formcontainer) {
				for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
	
					oFilterItem = this._mAdvancedAreaFilter[sGroupName].items[i].filterItem;
					if (oFilterItem && oFilterItem.getVisible()) {
						this._mAdvancedAreaFilter[sGroupName].formcontainer.setVisible(true);
						return;
					}
				}
	
				this._mAdvancedAreaFilter[sGroupName].formcontainer.setVisible(false);
			}
		}
	};
	
	/**
	 * set for a group the link text containing the info about not yet assigned filters to the current group
	 * 
	 * @private
	 * @param {string} sGroupName name of the group
	 * @param {sap.m.Link } oLink control
	 * @param {number } nNotAssignedFilterCount count of not yet assigned filters
	 */
	FilterBar.prototype._setLinkTextAndCount = function(sGroupName, oLink, nNotAssignedFilterCount) {

		var sText;
	
		if (nNotAssignedFilterCount) {
			sText = this._oRb.getText("FILTER_BAR_SHOW_MORE_FILTERS", [
				nNotAssignedFilterCount
			]);
		} else {
			sText = this._oRb.getText("FILTER_BAR_SHOW_CHANGE_FILTERS");
		}
	
		oLink.setText(sText);
	};
	
	/**
	 * set for a group the link text containing the info about not yet assigned filters to the current group
	 * 
	 * @private
	 * @param {string} sGroupName name of the group
	 * @param {sap.m.Link } oLink control
	 */
	FilterBar.prototype._setLinkText = function(sGroupName, oLink) {

	
		var nNotAssignedFilterCount = this._determineNotAssignedFiltersCount(sGroupName);
	
		this._setLinkTextAndCount(sGroupName, oLink, nNotAssignedFilterCount);
	};
	
	/**
	 * create a link control for the current group. The link will open the 'Add/Remove Filters' dialog
	 * 
	 * @private
	 * @param {string} sGroupName name of the group
	 * @returns {sap.m.Link} link control
	 */
	FilterBar.prototype._createLink = function(sGroupName) {
	
		var that = this;
		var oLink = new Link();
		this._setLinkText(sGroupName, oLink);
	
		oLink.attachPress(function() {
			that._createAddRemoveFiltersDialog(sGroupName, oLink);
		});
	
		return oLink;
	};
	
	/**
	 * check if running under phone
	 * 
	 * @private
	 * @returns {boolean} true if phone, false other wise
	 */
	FilterBar.prototype._isPhone = function() {
	
		return (Device.system.phone) ? true : false;
	};
	
	/**
	 * check if running under tablet
	 * 
	 * @private
	 * @returns {boolean} true if phone, false other wise
	 */
	FilterBar.prototype._isTablet = function() {
	
		return (Device.system.tablet) ? true : false;
	};
	
	/**
	 * create the form containing all visible filters belonging to the current variant
	 * 
	 * @private
	 * @returns {sap.m.Form} form with all filters
	 */
	FilterBar.prototype._createFilters = function() {
	
		var that = this;
		var n = null, i;
		var sGroupName;
		var oFormContainer, oFormElement, aFormElements, oItem;
		var oTitle, oLink, oLabel;
		var oCheckBox = null;
		var bHasValue;
		var oAddToFilterBarLabel = null;
		var bFirstGroup = true;
		var nInvisibleCount;
	
		var oAdvancedLayout = new ResponsiveGridLayout();
		oAdvancedLayout.setColumnsL(1);
		oAdvancedLayout.setColumnsM(1);
	
		var oForm = new Form({
			editable: true,
			layout: oAdvancedLayout
		});
	
		oForm.addStyleClass("sapUiCompFilterBarDialogForm");
	
		if (this._oVariantManagement) {
			var idx = this._oToolbar.indexOfContent(this._oVariantManagement);
			if (idx >= 0) {
				var oClonedVM = this._oVariantManagement.clone();
				oClonedVM._setSelectionByKey(this._oVariantManagement.getSelectionKey());
				this._oToolbar.removeContent(this._oVariantManagement);
				this._oToolbar.insertContent(oClonedVM, idx);
	
				this._oVariant.key = this._oVariantManagement.getSelectionKey();
				this._oVariant.modified = this._oVariantManagement.currentVariantGetModified();
	
				oFormContainer = new FormContainer();
	
				this._oVariantManagement.setLayoutData(new GridData({
					span: "L10 M10 S12"
				}));
				oFormElement = new FormElement({
					fields: this._oVariantManagement
				});
	
				oFormContainer.addFormElement(oFormElement);
	
				if (!this._isPhone()) { // label 'Add To Filterbar'
	
					oAddToFilterBarLabel = new Label({
					// text: this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR")
					});
					// the text is set via the dialogOpen method, to minimize the replace-effect
	
					oAddToFilterBarLabel.setLayoutData(new GridData({
						span: "L2 M2 S2"
					}));
					oAddToFilterBarLabel.addStyleClass("sapUiCompFilterBarAddFilterLabel");
					this._oAddToFilterBarLabel = oAddToFilterBarLabel;
	
					oFormElement = new FormElement({
						label: oAddToFilterBarLabel
					});
	
					oFormContainer.addFormElement(oFormElement);
				}
	
				oForm.addFormContainer(oFormContainer);
			}
	
			oForm.addStyleClass("sapUiCompFilterBarGroupTitle");
		}
	
		var aFilters = this._getFiltersWithValues();
		this._fRegisteredFilterChangeHandlers = function(oEvent) {
			that._mandatoryFilterChange(oEvent);
		};
		this.attachFilterChange(this._fRegisteredFilterChangeHandlers);
	
		this._oVariant.content = this.fetchVariant();
	
		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].items) {
	
				oTitle = new Title();
	
				if (n === FilterBar.INTERNAL_GROUP) {
					this._oTitle = oTitle;
					sGroupName = this._oRb.getText("FILTER_BAR_BASIC_GROUP");
				} else {
					sGroupName = this._mAdvancedAreaFilter[n].filterItem.getGroupTitle();
				}
	
				oTitle.setText(sGroupName);
	
				oFormContainer = new FormContainer({
					title: oTitle
				});
	
				if (bFirstGroup && sGroupName === "" && oAddToFilterBarLabel) {
					oAddToFilterBarLabel.removeStyleClass("sapUiCompFilterBarAddFilterLabel");
					oAddToFilterBarLabel.addStyleClass("sapUiCompFilterBarAddFilterLabelNoGroup");
				}
	
				bFirstGroup = false;
				nInvisibleCount = 0;
	
				this._mAdvancedAreaFilter[n].formcontainer = oFormContainer;
	
				for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
					oItem = this._mAdvancedAreaFilter[n].items[i];
	
					if (oItem.control.getWidth) {
						oItem.width = oItem.control.getWidth();
	
						if (oItem.control.setWidth) {
							oItem.control.setWidth("100%");
						}
					}
	
					oLabel = oItem.filterItem.getLabelControl();
	
					if (this.getConsiderGroupTitle()) {
						oLabel.setText(oItem.filterItem.getLabel());
					}
	
					oCheckBox = new CheckBox({
						tooltip: this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR")
					});
					oCheckBox.setSelected(oItem.filterItem.getVisibleInFilterBar());
					if (oItem.filterItem.getMandatory()) {
						bHasValue = this._checkFilterForValue(aFilters, oItem.filterItem);
						if (!bHasValue && oItem.filterItem.getVisibleInFilterBar()) {
							oCheckBox.setEnabled(false);
						}
					}
					oCheckBox.attachSelect(jQuery.proxy(this._selectionChangedInFilterDialog, this, oCheckBox, oItem.filterItem));
	
					if (this._isPhone()) {
						oLabel.setLayoutData(new GridData({
							span: "L3 M3 S12"
						}));
						oItem.control.setLayoutData(new GridData({
							span: "L8 M8 S12"
						}));
	
						oCheckBox.setVisible(false);
	
					} else {
						oLabel.setLayoutData(new GridData({
							span: "L3 M3 S12"
						}));
						oItem.control.setLayoutData(new GridData({
							span: "L8 M8 S11"
						}));
						oCheckBox.setLayoutData(new GridData({
							span: "L1 M1 S1"
						}));
					}
	
					oFormElement = new FormElement({
						label: oLabel,
						fields: [
							oItem.control, oCheckBox
						]
					});
					oFormElement.setVisible(oItem.filterItem.getVisible() && (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()));
					if (!oItem.filterItem.getVisible()) {
						nInvisibleCount++;
					}
	
					oItem.formelement = oFormElement;
					oItem.checkbox = oCheckBox;
	
					oFormContainer.addFormElement(oFormElement);
				}
	
				aFormElements = oFormContainer.getFormElements();
				if (aFormElements && aFormElements.length > 0) {
	
					if (n !== FilterBar.INTERNAL_GROUP) {
						oLink = this._createLink(n);
						if (oLink) {
	
							if (this._isPhone()) {
								oLink.setLayoutData(new GridData({
									span: "L8 M8 S12"
								}));
							} else {
								oLink.setLayoutData(new GridData({
									span: "L8 M8 S12",
									indent: "L3 M3 S0"
								}));
							}
	
							oFormElement = new FormElement({
								fields: [
									oLink
								]
							});
	
							this._mAdvancedAreaFilter[n].link = oLink;
	
							oFormContainer.addFormElement(oFormElement);
						}
	
						if (nInvisibleCount === aFormElements.length) {
							oFormContainer.setVisible(false);
						}
					}
	
					oForm.addFormContainer(oFormContainer);
				}
			}
		}
	
		return oForm;
	
	};
	
	/**
	 * create the content of the basic area, either by replacing the controls with their clones, or removing the clones and moving the original controls
	 * back to it.
	 * 
	 * @private
	 * @param {boolean} bUseClone indicates if clones or 'original' controls should be placed inside the basic area
	 */
	FilterBar.prototype._recreateBasicAreaContainer = function(bUseClone) {
	
		var n = null, i;
		var oControl, oLabel;
		var oFilterGroupItem, oContainer;
	
		if (this._oVariantManagement) {
			var aContent = this._oToolbar.getContent();
			this._oToolbar.removeContent(aContent[0]);
			this._oToolbar.insertContent(this._oVariantManagement, 0);
		}
	
		this._oBasicAreaLayout.removeAllContent();
	
		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].items) {
	
				for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
					oFilterGroupItem = this._mAdvancedAreaFilter[n].items[i].filterItem;
	
					if (bUseClone) {
						if (!oFilterGroupItem.getVisible() || !oFilterGroupItem.getVisibleInFilterBar()) {
							continue; // handle only visible filters
						}
						oControl = this._mAdvancedAreaFilter[n].items[i].control.clone();
						oLabel = oFilterGroupItem.getLabelControl().clone();
	
						if (this.getConsiderGroupTitle()) {
							// in advanced filters dialog the label should not contain group title
							oFilterGroupItem.getLabelControl().setText(oFilterGroupItem.getLabel());
						}
					} else {
						oControl = this._mAdvancedAreaFilter[n].items[i].control;
						oLabel = oFilterGroupItem.getLabelControl();
	
						if (this._mAdvancedAreaFilter[n].items[i].width) {
							oControl.setWidth(this._mAdvancedAreaFilter[n].items[i].width);
						}
					}
	
					oContainer = this._addControlToBasicAreaContainer(oFilterGroupItem, oControl, oLabel);
					if (oContainer) {
						oContainer.setVisible(oFilterGroupItem.getVisible() && oFilterGroupItem.getVisibleInFilterBar());
						this._mAdvancedAreaFilter[n].items[i].container = oContainer;
					}
				}
			}
		}
	};
	
	/**
	 * search was executed. Check afterwards if any filer is in error state. Close dialog only in case non of the filters is in error state
	 * 
	 * @private
	 * @param {sap.ui.layout.form.Form} oForm representing the filters
	 */
	FilterBar.prototype._searchRequested = function(oForm) {
	
		if (this.search()) {
			this._oFilterDialog.close();		
		}
	};
	
	/**
	 * closed the 'Advanced Filters' dialog and restores the filter bar
	 * 
	 * @private
	 * @param {sap.ui.layout.form.Form} oForm representing the filters
	 */
	FilterBar.prototype._closeDialogAndRestoreFilterBar = function(oForm) {

		this._sSearchCriteriaInFiltersDialog = null;
	
		this._oVariant = {};
	
		oForm.removeAllFormContainers();
	
		if (this._oActionSheet) {
			this._oActionSheet.destroy();
			this._oActionSheet = null;
		}
		
		this._recreateBasicAreaContainer();
	
		this._deleteProperties();
		this._adaptGroupsTitle();
	
		if (this._fRegisteredFilterChangeHandlers) {
	
			this.detachFilterChange(this._fRegisteredFilterChangeHandlers);
			this._fRegisteredFilterChangeHandlers = null;
		}
	
		this._updateToolbarText();
			
	};
	
	FilterBar.prototype._variantSave = function(oEvent) {
	
		var sKey;
		this._oVariant = {};
	
		this.fireBeforeVariantSave();
	
		if (this._oVariantManagement && this._oFilterDialog) {
			sKey = this._oVariantManagement.getSelectionKey();
			this._oVariant.key = sKey;
			this._oVariant.modified = false;
			this._oVariant.content = this._oVariantManagement.getVariantContent(this, sKey);
		}
	};
	
	FilterBar.prototype._afterVariantSave = function(oEvent) {
	
		this.fireAfterVariantSave();
	};
	
	FilterBar.prototype._variantSavePressed = function(oEvent) {
	
		if (this._oVariantManagement) {
	
			var sKey = this._oVariantManagement.getSelectionKey();
			var oCurrentItem = this._oVariantManagement.getItemByKey(this._oVariantManagement.getSelectionKey());
	
			if ((sKey === this._oVariantManagement.STANDARDVARIANTKEY) || (oCurrentItem && oCurrentItem.getReadOnly && oCurrentItem.getReadOnly())) {
				this._oVariantManagement._openSaveAsDialog();
			} else {
				this._oVariantManagement._variantSavePressed();
			}
		}
	};
	
	FilterBar.prototype._dialogOpened = function() {

	
		if (this._oTitle && this._oAddToFilterBarLabel) {
	
			var oTitleElement = this._getDOMElement(this._oTitle.getId());
			if (oTitleElement) {
	
				var oTitlePosition = oTitleElement.offset();
				var oLabelElement = this._getDOMElement(this._oAddToFilterBarLabel.getId());
				if (oLabelElement) {
					var oLabelPosition = oLabelElement.offset();
					if (oLabelPosition && oTitlePosition) {
						oLabelPosition.top = oTitlePosition.top + 8;
						oLabelElement.offset(oLabelPosition);
					}
				}
			}
		}
	
		if (this._oAddToFilterBarLabel) {
			this._oAddToFilterBarLabel.setText(this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR"));
		}
	};
	
	FilterBar.prototype._cancelFilterDialog = function() {
	
		if (this._oVariant && this._oVariant.key && this._oVariant.content) {
			this.applyVariant(this._oVariant.content);
	
			if (this._oVariantManagement) {
				this._oVariantManagement._setSelectionByKey(this._oVariant.key);
				this._oVariantManagement.currentVariantSetModified(this._oVariant.modified);
			}
		}
	};
	
	/**
	 * dialog displaying the 'Advanced Filters'
	 * 
	 * @private
	 */
	FilterBar.prototype._showFilterDialog = function() {
	
		var that = this;
	
		this._oFilterDialog = new Dialog({
			stretch: Device.system.phone
		});
		this._oFilterDialog.setParent(this);
	
		this._oFilterDialog.addStyleClass("sapUiPopupWithPadding");
	
		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			this._oFilterDialog.addStyleClass("sapUiSizeCompact");
		}
	
		this._oFilterDialog.addStyleClass("sapUiCompFilterBarDialog");
		if (!this._isPhone()) {
			this._oFilterDialog.addStyleClass("sapUiCompFilterBarDialogNonPhone");
		}
	
		// oDialog.afterClose
		this._oFilterDialog.setTitle(this._oRb.getText("FILTER_BAR_ADV_FILTERS_DIALOG"));
	
		this._oFilterDialog.addStyleClass("sapMH4FontSize");
		this._oFilterDialog.addStyleClass("sapMH4Style");
	
		this._oFilterDialog.setVerticalScrolling(true);
	
		var oSubHeader = new Bar();
		var oSearchField = new SearchField();
		oSearchField.attachSearch(function(oEvent) {
			if (that._oFilterDialog) {
				that._triggerSearchInFilterDialog(oEvent);
			}
		});
	
		oSubHeader.addContentRight(oSearchField);
		this._oFilterDialog.setSubHeader(oSubHeader);
	
		var oForm = this._createFiltersAndAdaptBasicArea();
		if (!oForm) {
			jQuery.sap.log.error("Content for Advanced Filters Dialog could not be created");
			return;
		}
		this._oFilterDialog.addContent(oForm);
	
		this._oFilterDialog.attachAfterOpen(function() {
			that._dialogOpened();
		});

		this._oFilterDialog.attachBeforeClose(function() {			
			that._closeDialogAndRestoreFilterBar(oForm);			
		});		

		this._oFilterDialog.attachAfterClose(function() {			
			that._oFilterDialog.destroy();
			that._oFilterDialog = null;				
		});				
		
		this._oFilterDialog.setInitialFocus(oSearchField);
	
		this._addFilterDialogButtons(oForm);
	
		if (!this._isPhone()) {
			this._oFilterDialog.setContentWidth("42rem");
		}
	
		var nHeight = jQuery(document).height() / 16;
		this._oFilterDialog.setContentHeight((nHeight - 17) + "rem");
	
		this._oFilterDialog.open();
	};
	
	FilterBar.prototype._addFilterDialogButtons = function(oForm) {
	
		var that = this;
		var oModel, aButtons = [];
		var oVariantSaveButton, oClearButton, oRestoreButton, oSearchButton, oCancelButton;
		var oActionsButton;
	
		// search button
		oSearchButton = new Button({
			id: this.getId() + "-btnSearchOnFiltersDialog",
			text: this._oRb.getText("FILTER_BAR_GO"),
			press: function() {
				that._searchRequested(oForm);
			},
			type: ButtonType.Emphasized
		});
	
		// aButtons.push(oSearchButton.clone());
		this._oFilterDialog.addButton(oSearchButton);
	
		// variant save button
		if (this._oVariantManagement && this._oVariantManagement.getVisible() && this._oVariantManagement.oVariantSave) {
			oVariantSaveButton = new Button({
				id: this.getId() + "-btnVariantSaveOnFiltersDialog",
				text: this._oRb.getText("VARIANT_MANAGEMENT_SAVE"),
				enabled: this._oVariantManagement.oVariantSave.getEnabled(),
				press: function() {
					that._variantSavePressed();
				}
			});
	
			oModel = this._oVariantManagement.getModel("save_enablement");
	
			oVariantSaveButton.setModel(oModel);
			oVariantSaveButton.bindProperty("enabled", "/enabled");
	
			aButtons.push(oVariantSaveButton.clone());
			oVariantSaveButton.addStyleClass("sapUiHideOnPhone");
			this._oFilterDialog.addButton(oVariantSaveButton);
		}
	
		// clear button
		oClearButton = new Button({
			id: this.getId() + "-btnClearOnFiltersDialog",			
			text: this._oRb.getText("FILTER_BAR_CLEAR"),
			visible: this.getShowClearButton(),
			press: function() {
				that.clear();
			}
		});
	
		if (oClearButton.getVisible()) {
			aButtons.push(oClearButton.clone());
		}
		oClearButton.addStyleClass("sapUiHideOnPhone");
		this._oFilterDialog.addButton(oClearButton);
	
		// restore button
		if (oModel) {
			oRestoreButton = new Button({
				id: this.getId() + "-btnRestoreOnFiltersDialog",
				text: this._oRb.getText("FILTER_BAR_RESTORE"),
				visible: this.getShowRestoreButton(),
				enabled: this._oVariantManagement.oVariantSave.getEnabled(),
				press: function() {
					that.reset();
					that._oVariantManagement.currentVariantSetModified(false);
				}
			});
			oRestoreButton.setModel(oModel);
			oRestoreButton.bindProperty("enabled", "/enabled");
	
			if (oRestoreButton.getVisible()) {
				aButtons.push(oRestoreButton.clone());
			}
			oRestoreButton.addStyleClass("sapUiHideOnPhone");
			this._oFilterDialog.addButton(oRestoreButton);
		}
	
		// Cancel button
		oCancelButton = new Button({
			id: this.getId() + "-btnCancelOnFiltersDialog",			
			text: this._oRb.getText("FILTER_BAR_CANCEL"),
			press: function() {
				that._cancelFilterDialog();
				that._oFilterDialog.close();		
			}
		});
	
		// aButtons.push(oCancelButton.clone());
		// oCancelButton.addStyleClass("sapUiHideOnPhone");
		this._oFilterDialog.addButton(oCancelButton);
	
		if (aButtons.length > 0) {

			// Actions
			this._oActionSheet = new ActionSheet({
				showCancelButton: true,
				buttons: aButtons,
				placement: PlacementType.Top
			});
			oActionsButton = new Button({
				id: this.getId() + "-btnActionsOnFiltersDialog",
				// text: this._oRb.getText("FILTER_BAR_ACTIONS"),
				icon: "sap-icon://overflow",
				press: function() {
					that._oActionSheet.openBy(this);
				},
				tooltip: this._oRb.getText("FILTER_BAR_ACTIONS")
			});			
			oActionsButton.addStyleClass("sapUiVisibleOnlyOnPhone");
			
			this._oFilterDialog.addButton(oActionsButton);
		}
	
	};
	
	/**
	 * creates the buttons for the basic area
	 * 
	 * @private
	 * @returns {sap.ui.layout.HorizontalLayout} buttons are placed in this layout
	 */
	FilterBar.prototype._createButtons = function() {
	
		var that = this;
	
		var oButtonsLayout = new HorizontalLayout();
	
		this._oHideShowButton = new Button({
			id: this.getId() + "-btnHideShowFilterBar",
			text: this._oRb.getText("FILTER_BAR_HIDE"),
			type: ButtonType.Transparent
		});
		this._oHideShowButton.addStyleClass("sapUiCompFilterBarPaddingRightBtn");
		this._oHideShowButton.attachPress(function() {
			that._toggleHideShow();
		});
		oButtonsLayout.addContent(this._oHideShowButton);
	
		// clear button
		this._oClearButtonOnFB = new Button({
			id: this.getId() + "-btnClearOnFilterBar",
			visible: this.getShowClearOnFB(),
			text: this._oRb.getText("FILTER_BAR_CLEAR"),
			type: ButtonType.Transparent
		});
		this._oClearButtonOnFB.attachPress(function() {
			that.clear();
		});
		oButtonsLayout.addContent(this._oClearButtonOnFB);
	
		// Reset
		if (this._oVariantManagement) {
			this._oRestoreButtonOnFB = new Button({
				id: this.getId() + "-btnRestoreOnFilterBar",
				visible: this.getShowRestoreOnFB(),
				text: this._oRb.getText("FILTER_BAR_RESTORE"),
				type: ButtonType.Transparent
			});
			this._oRestoreButtonOnFB.attachPress(function() {
				that.reset();
			});
			oButtonsLayout.addContent(this._oRestoreButtonOnFB);
		}
	
		this._oFiltersButton = new Button({
			id: this.getId() + "-btnFiltersOnFilterBar",
			text: this._oRb.getText("FILTER_BAR_ACTIVE_FILTERS_ZERO"),
			type: ButtonType.Transparent
		});
		this._oFiltersButton.addStyleClass("sapUiCompFilterBarPaddingRightBtn");
	
		this._oFiltersButton.attachPress(function() {
			that._showFilterDialog();
		});
		oButtonsLayout.addContent(this._oFiltersButton);
	
		this._oSearchButton = new Button({
			id: this.getId() + "-btnSearchOnFilterBar",
			visible: this.getShowGoOnFB(),
			text: this._oRb.getText("FILTER_BAR_GO"),
			type: ButtonType.Emphasized
		});
		this._oSearchButton.attachPress(function() {
			that.search();
		});
	
		this._oSearchButton.addStyleClass("sapUiCompFilterBarMargingRight");
		oButtonsLayout.addContent(this._oSearchButton);
	
		this._oButtonsLayout = oButtonsLayout;
	
		return oButtonsLayout;
	};
	
	/**
	 * creates the layout for the buttons
	 * 
	 * @private
	 * @returns {sap.ui.layout.VerticalLayout} layout for the buttons
	 */
	FilterBar.prototype._createButtonsLayout = function() {
	
		var oVLayout = new HorizontalLayout();
		var oButtons = this._createButtons();
		oVLayout.addContent(oButtons);
	
		oVLayout.addStyleClass("sapUiCompFilterBarButtonGroup");
	
		return oVLayout;
	};
	
	/**
	 * creates the variant management
	 * 
	 * @private
	 * @returns {sap.ui.comp.variants.VariantManagement} the VM control
	 */
	FilterBar.prototype._createVariantLayout = function() {
	
		this._oVariantManagement = this._createVariantManagement();
		this._oVariantManagement.setVisible(false);
	
		this._fSaveVariant = jQuery.proxy(this._variantSave, this);
		this._oVariantManagement.attachSave(this._fSaveVariant);
	
		this._fAfterSaveVariant = jQuery.proxy(this._afterVariantSave, this);
		this._oVariantManagement.attachAfterSave(this._fAfterSaveVariant);
	
		return this._oVariantManagement;
	};
	
	/**
	 * creates the layout for the basic area
	 * 
	 * @private
	 * @returns {sap.m.Toolbar} the toolbar
	 */
	FilterBar.prototype._createToolbar = function() {

	
		var oToolbar = new Toolbar();
	
		var oVariantLayout = this._createVariantLayout();
		oToolbar.addContent(oVariantLayout);
	
		oToolbar.addContent(this._oText);
	
		oToolbar.addContent(new ToolbarSpacer());
	
		this._oButtonLayout = this._createButtonsLayout();
		oToolbar.addContent(this._oButtonLayout);
	
		oToolbar.addStyleClass("sapUiCompFilterBarToolbar");
		oToolbar.addStyleClass("sapUiCompFilterBarToolbarMarker");
		return oToolbar;
	};
	
	/**
	 * creates the layout for the basic area
	 * 
	 * @private
	 * @returns {sap.ui.layout.HorizontalLayout} the layout for the selected fields
	 */
	FilterBar.prototype._createBasicAreaLayout = function() {

	
		// form for selection parameters
		var oBasicAreaLayout = new HorizontalLayout();
		oBasicAreaLayout.setAllowWrapping(true);
	
		oBasicAreaLayout.addStyleClass("sapUiCompFilterBarWidth100");
		oBasicAreaLayout.addStyleClass("sapUiCompFilterBarBasicArea");
		return oBasicAreaLayout;
	};
	
	/**
	 * creates the form for the advanced area, where all the filters will be placed
	 * 
	 * @private
	 * @returns {sap.ui.layout.form.Form} the form for the filter fields
	 */
	FilterBar.prototype._createAdvancedAreaForm = function() {

		var oAdvancedLayout = new ResponsiveGridLayout();
	
		oAdvancedLayout.addStyleClass("sapUiCompFilterBarPaddingForm");
	
		oAdvancedLayout.setColumnsL(3);
		oAdvancedLayout.setColumnsM(2);
		var oForm = new Form({
			editable: true
		});
		oForm.setLayout(oAdvancedLayout);
	
		return oForm;
	};
	
	/**
	 * add a selection field to a FormContainer and the FormContainer to the basic area form
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterItem filter
	 * @returns {sap.ui.layout.VerticalLayout} the container
	 */
	FilterBar.prototype._addControlToBasicAreaFormContainer = function(oFilterItem) {
	
		var oControl = oFilterItem.getControl();
		if (!oControl) {
			jQuery.sap.log.error("no Control obtained");
			return null;
		}
	
		var oLabel = oFilterItem.getLabelControl();
		if (!oLabel) {
			jQuery.sap.log.error("no Label obtained");
			return null;
		}
	
		if (!this.getAdvancedMode()) {
			this._adaptGroupTitleForFilter(oFilterItem);
		} else {
			this._oAdvancedPanel.setExpandable(true);
			var sAdvancedSearchText = this._oRb.getText("ADVANCED_SEARCH_TEXT");
			this._oAdvancedPanel.setHeaderText(sAdvancedSearchText);
	
			this.oAdvancedSearchArea.setVisible(false);
			if (this._oSearchButtonAdvanced) {
				
				this._oSearchButtonAdvanced.removeStyleClass("sapUiCompFilterBarFloatRight");
				this._oBasicAreaLayout.insertContent(this._oSearchButtonAdvanced, 0);	
				this._oSearchButtonAdvanced.setVisible(true);
			}
	
		}
	
		return this._addControlToBasicAreaContainer(oFilterItem, oControl, oLabel);
	};
	
	/**
	 * add a selection field to a FormContainer and the FormContainer to the basic area form
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterItem the filter item
	 * @param {sap.ui.core.Control} oControl the filter control
	 * @param {sap.m.Label} oLabel the label of the filter
	 * @returns {sap.ui.layout.VerticalLayout} the container
	 */
	FilterBar.prototype._addControlToBasicAreaContainer = function(oFilterItem, oControl, oLabel) {
	
		var oVLayout = new VerticalLayout();
		oVLayout.setLayoutData(new ResponsiveFlowLayoutData({
			margin: true
		}));
	
		// if no width is set, use default width
		if (oControl.getWidth) {
			// if ((oControl.getWidth() === "100%") || (oControl.getWidth() === "")) {
			oVLayout.setWidth("12rem");
			// }
		}
	
		if (!this.getAdvancedMode()) {
			if (oLabel) {
				oVLayout.addContent(oLabel);
				oLabel.setLabelFor(oControl);
			}
		}
	
		oVLayout.addContent(oControl);
	
		oVLayout.addStyleClass("sapUiCompFilterBarPaddingRight");
	
		if (this.getAdvancedMode()) {
			var aContent = this._oBasicAreaLayout.getContent();
			if (aContent.length > 0) {
				this._oBasicAreaLayout.insertContent(oVLayout, aContent.length - 1);
			} else {
				this._oBasicAreaLayout.addContent(oVLayout);
			}
		} else {
			oVLayout.addStyleClass("sapUiCompFilterBarPaddingTop");
			this._oBasicAreaLayout.addContent(oVLayout);
		}
	
		return oVLayout;
	};
	
	/**
	 * converts the map containing the advanced area filters to an array for simpler handling; only visible filter items are considered
	 * 
	 * @private
	 * @returns {array} oControl the visible filter fields
	 */
	FilterBar.prototype._flattenMap = function() {

		var n = null, i;
		var aControls = [];
		var bGroupIsAdded;
	
		if (this._mAdvancedAreaFilter) {
	
			for (n in this._mAdvancedAreaFilter) {
	
				if (n && this._mAdvancedAreaFilter[n].items) {
	
					bGroupIsAdded = false;
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						var oItem = this._mAdvancedAreaFilter[n].items[i];
	
						if (oItem.filterItem && oItem.filterItem.getVisibleInFilterBar() && oItem.filterItem.getVisible()) {
	
							if (!bGroupIsAdded) {
								bGroupIsAdded = true;
	
								aControls.push({
									control: null,
									filterItem: this._mAdvancedAreaFilter[n].filterItem
								});
							}
	
							aControls.push({
								control: oItem.control,
								filterItem: oItem.filterItem
							});
						}
					}
				}
			}
		}
	
		return aControls;
	};
	
	/**
	 * re-render the advanced area
	 * 
	 * @private
	 */
	FilterBar.prototype._rerenderAA = function() {
	
		this._oAdvancedAreaForm.removeAllFormContainers();
	
		var aControls = this._flattenMap();
	
		if (aControls.length > 0) {
			this._oAdvancedPanel.setVisible(true);
	// if (this.getAdvancedMode()) {
	// this._oAdvancedPanel.setExpanded(this.getExpandAdvancedArea());
	// }
		} else {
			this._oAdvancedPanel.setVisible(false);
		}
	
		this._layOutAA(aControls);
	};
	
	/**
	 * react to search field selection. Hide all non matching list entries
	 * 
	 * @private
	 * @param {string} sValue the search string
	 */
	FilterBar.prototype._triggerSearchByValue = function(sValue) {
	
		var i, sText, sTooltip;
		var aCells;
		var bIsVisible;
	
		sValue = sValue.replace(/^\s+|\s+$/g, "").toLowerCase();
	
		if (this._aListItems) {
	
			var iSelectedItems = 0;
			for (i = this._aListItems.length - 1; i >= 0; i--) {
	
				aCells = this._aListItems[i].getContent();
				if (aCells.length === 2) {
					sText = aCells[1].getText();
					sTooltip = this._aListItems[i].data("quickinfo");
					// we want to show an item if it's either an item matching the search or if it's a group item with at least one item selected.
					if ((sText.toLowerCase().indexOf(sValue) >= 0 || (sTooltip && sTooltip.toLowerCase().indexOf(sValue) >= 0)) || (this._aListItems[i].hasStyleClass("sapUiCompFilterBarGroupListItem") && iSelectedItems > 0)) {
	
						bIsVisible = true;
						if (this._aListItems[i].hasStyleClass("sapUiCompFilterBarGroupListItem")) {
	
							if (!iSelectedItems) {
								bIsVisible = false; // matching text for group, but not hits in items
							}
	
						} else {
							iSelectedItems++; // a matching non-group item
						}
						this._aListItems[i].setVisible(bIsVisible);
					} else {
						this._aListItems[i].setVisible(false); // no hit
					}
				}
			}
		}
	};
	
	/**
	 * react to search field selection. Hide all non matching list entries
	 * 
	 * @private
	 * @param {object} oEvent containing the search string
	 */
	FilterBar.prototype._triggerSearch = function(oEvent) {

	
		if (!oEvent) {
			return;
		}
	
		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}
	
		var sValue = parameters.query ? parameters.query : "";
	
		this._triggerSearchByValue(sValue);
	};
	
	/**
	 * react to search field selection. Hide all non matching list entries
	 * 
	 * @private
	 * @param {string} sValue the search string
	 */
	FilterBar.prototype._triggerSearchByValueInFilterDialog = function(sValue) {
	
		var n = null, i;
		var sText, sTooltip;
		var oGroupElement, oFilterItem;
		var nCountInvisibleElements;
		var nCountNonPartOfCurrentVariant;
	
		sValue = sValue.replace(/^\s+|\s+$/g, "").toLowerCase();
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
	
						nCountInvisibleElements = 0;
						nCountNonPartOfCurrentVariant = 0;
	
						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].filterItem && oGroupElement.items[i].formelement) {
	
								oFilterItem = oGroupElement.items[i].filterItem;
	
								if (oFilterItem.getVisible()) {
	
									if (sValue) {
	
										// if (oFilterItem.getPartOfCurrentVariant()) {
										sText = oFilterItem.getLabel();
										sTooltip = oFilterItem.getLabelTooltip();
	
										if ((sText.toLowerCase().indexOf(sValue) >= 0 || (sTooltip && sTooltip.toLowerCase().indexOf(sValue) >= 0))) {
											if (oFilterItem.getPartOfCurrentVariant()) {
												oGroupElement.items[i].formelement.setVisible(true);
											} else {
												++nCountNonPartOfCurrentVariant;
											}
										} else {
											++nCountInvisibleElements;
											oGroupElement.items[i].formelement.setVisible(false);
										}
	
									} else {
										// reset to a state without considering search
										oGroupElement.items[i].formelement.setVisible(oFilterItem.getVisibleInFilterBar() || oFilterItem.getPartOfCurrentVariant());
										if (oGroupElement.link && !oGroupElement.link.getVisible()) {
											oGroupElement.link.setVisible(true);
										}
									}
								} else {
									++nCountInvisibleElements;
								}
							}
						}
	
						if (oGroupElement && oGroupElement.formcontainer) {
							if (nCountInvisibleElements === oGroupElement.items.length) {
								oGroupElement.formcontainer.setVisible(false);
							} else {
								oGroupElement.formcontainer.setVisible(true);

								if (oGroupElement.link) {
									oGroupElement.link.setVisible((sValue && (nCountNonPartOfCurrentVariant === 0)) ? false : true);

									if (sValue && (nCountNonPartOfCurrentVariant > 0)) {
										this._setLinkTextAndCount(n, oGroupElement.link, nCountNonPartOfCurrentVariant);
									} else {
										this._setLinkText(n, oGroupElement.link);
									}
								}
							}
						}
					}
				}
			}
		}
	};
	
	/**
	 * react to search field selection. Hide all non matching list entries
	 * 
	 * @private
	 * @param {object} oEvent containing the search string
	 */
	FilterBar.prototype._triggerSearchInFilterDialog = function(oEvent) {
	
		if (!oEvent) {
			return;
		}
	
		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}
	
		var sValue = parameters.query ? parameters.query : "";
	
		this._sSearchCriteriaInFiltersDialog = sValue;
	
		this._triggerSearchByValueInFilterDialog(sValue);
	};
	
	/**
	 * generate a grouped list of all potential advanced area filters for the personalization dialog
	 * 
	 * @private
	 * @param {string} sGroupName filter group name
	 * @returns {array} the list of advanced area filter fields
	 */
	FilterBar.prototype._generateListItems = function(sGroupName) {
	
		var i;
		var oGroupListItem;
		var oListItem, aAdvacedElements;
		var aListItems = [];
		var oLabel, oCheckBox;
		var bCompactMode = false;
	
		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			bCompactMode = true;
		}
	
		if (sGroupName && this._mAdvancedAreaFilter) {
	
			aAdvacedElements = this._mAdvancedAreaFilter[sGroupName];
	
			if (aAdvacedElements && aAdvacedElements.items) {
	
				oGroupListItem = new CustomListItem();
				oGroupListItem.addStyleClass("sapUiCompFilterBarGroupListItem");
	
				oLabel = new Label({
					text: aAdvacedElements.filterItem.getGroupTitle()
				});
	
				oGroupListItem.addContent(oLabel);
	
				for (i = 0; i < aAdvacedElements.items.length; i++) {
					var oItem = aAdvacedElements.items[i];
	
					if (oItem && oItem.filterItem) {
	
						if (!oItem.filterItem.getVisible()) {
							continue;
						}
	
						if (oGroupListItem) {
							aListItems.push(oGroupListItem); // show only group labels containing elements
							oGroupListItem = null;
						}
	
						oListItem = new CustomListItem(/* {type: sap.m.ListType.Navigation} */); // uncomment, one day, to achieve navigation to
						// see
	
						oListItem.setVisible(true);
	
						// details
						if (!bCompactMode) {
							oListItem.addStyleClass("sapUiCompFilterBarListItem");
						} else {
							oListItem.addStyleClass("sapUiCompFilterBarListItemCompact");
						}
						oListItem.data("quickinfo", oItem.filterItem.getLabelTooltip());
	
						oCheckBox = new CheckBox();
						oCheckBox.setSelected(oItem.filterItem.getPartOfCurrentVariant());
						if (((oItem.filterItem.getMandatory() && oItem.checkbox && !oItem.checkbox.getEnabled()) || oItem.filterItem.getVisibleInFilterBar())) {
							oCheckBox.setEnabled(false);
						}
	
						oItem.initialPartOfCurrentVariant = oItem.filterItem.getPartOfCurrentVariant();
	
						oCheckBox.attachSelect(jQuery.proxy(this._selectionChangedInAddFiltersDialog, this, oCheckBox, oItem));
	
						oListItem.addContent(oCheckBox);
	
						oLabel = new Label({
							text: oItem.filterItem.getLabel(),
							tooltip: oItem.filterItem.getLabelTooltip()
						});
						oListItem.addContent(oLabel);
						aListItems.push(oListItem);
					}
				}
			}
		}
	
		return aListItems;
	};
	
	/**
	 * adapt the visibility of the filter containers according to its property settings
	 * 
	 * @private
	 * @param {object} oItem representing the filter item
	 */
	FilterBar.prototype._rerenderItem = function(oItem) {
	
		if (oItem) {
			if (oItem.container) {
				oItem.container.setVisible(oItem.filterItem.getVisible() && oItem.filterItem.getVisibleInFilterBar());
			}
	
			if (oItem.formelement) {
				oItem.formelement.setVisible(oItem.filterItem.getVisible() && (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()));
				if (oItem.checkbox) {
					oItem.checkbox.setSelected(oItem.filterItem.getVisibleInFilterBar());
				}
			}
		}
	};
	
	/**
	 * adapt the visibility for all filter containers according to their property settings
	 * 
	 * @private
	 */
	FilterBar.prototype._rerenderFilters = function() {
	
		var i;
		var n = null;
		var oItem = null;
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n && this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						oItem = this._mAdvancedAreaFilter[n].items[i];
						this._rerenderItem(oItem);
					}
				}
			}
		}
	
		this._updateToolbarText();
	};
	
	/**
	 * adapt the visibility for all filter containers according to their property settings
	 * 
	 * @public
	 */
	FilterBar.prototype.rerenderFilters = function() {

	
		this._rerenderFilters();
	};
	
	/**
	 * clean-up and closes the add/remove filters dialog
	 * 
	 * @private
	 * @param {string} sGroupName name of the group for which the filters will be displayed
	 * @param {sap.m.Link} oLink control from filters dialog
	 */
	FilterBar.prototype._closeAddRemoveFiltersDialog = function(sGroupName, oLink) {
	
		if (sGroupName && oLink) {
			if (this._sSearchCriteriaInFiltersDialog && this._oFilterDialog) {
				this._triggerSearchByValueInFilterDialog(this._sSearchCriteriaInFiltersDialog);
			} else {
				this._setLinkText(sGroupName, oLink);
			}
		}
	
		this._oDialog.close();
		this._oDialog.destroy();
		this._oDialog = null;
	};
	
	/**
	 * restores the initial partOfCurrentVariant information
	 * 
	 * @private
	 * @param {string} sGroupName name of the group for which the filters will be displayed
	 */
	FilterBar.prototype._cancelAddRemoveFiltersDialog = function(sGroupName) {

		var i;
		var oItem;
	
		if (sGroupName && this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oItem = this._mAdvancedAreaFilter[sGroupName].items[i];
				if (oItem.initialPartOfCurrentVariant !== undefined && oItem.filterItem) {
					if (oItem.filterItem.getPartOfCurrentVariant() !== oItem.initialPartOfCurrentVariant) {
						oItem.filterItem.setPartOfCurrentVariant(oItem.initialPartOfCurrentVariant);
	
						this._rerenderItem(oItem);
	
						this._notifyAboutChangedFilters(oItem.initialPartOfCurrentVariant, oItem.control);
					}
				}
			}
		}
	
		if (this._oVariantManagement && (this._oVariant.modified2 !== undefined)) {
			this._oVariantManagement.currentVariantSetModified(this._oVariant.modified2);
		}
	};
	
	/**
	 * creates the add/remove filter dialog
	 * 
	 * @private
	 * @param {string} sGroupName filter group name
	 * @param {sap.m.Link} oLink more/clear filters link
	 */
	FilterBar.prototype._createAddRemoveFiltersDialog = function(sGroupName, oLink) {

		var i;
		var that = this;
	
		if (!sGroupName) {
			return;
		}
	
		this._oDialog = new Dialog({
			stretch: Device.system.phone
		});
		this._oDialog.addStyleClass("sapUiPopupWithPadding");
		this._oDialog.addStyleClass("sapUiCompAddRemoveFilterDialog");
	
		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			this._oDialog.addStyleClass("sapUiSizeCompact");
		}
	
		this._oDialog.setTitle(this._oRb.getText("SELECT_FILTER_FIELDS"));
	
		this._oDialog.addStyleClass("sapMH4FontSize");
		this._oDialog.addStyleClass("sapMH4Style");
	
		this._oDialog.setVerticalScrolling(true);
	
		var oSubHeader = new Bar();
		var oSearchField = new SearchField();
		this._oSearchField = oSearchField;
		oSearchField.attachSearch(function(oEvent) {
			that._triggerSearch(oEvent);
		});
	
		oSubHeader.addContentRight(oSearchField);
		this._oDialog.setSubHeader(oSubHeader);
	
		var oList = new List();
		oList.setShowSeparators(ListSeparators.None);
		this._oDialog.addContent(oList);
	
		this._aListItems = this._generateListItems(sGroupName);
	
		for (i = 0; i < this._aListItems.length; i++) {
			oList.addItem(this._aListItems[i]);
		}
	
		if (this._oVariant && this._oVariantManagement) {
			this._oVariant.modified2 = this._oVariantManagement.currentVariantGetModified();
		}
	
		// close button
		var oCloseButton = new Button({
			id: this.getId() + "-btnCloseAddRemoveFiltersDialog",
			text: this._oRb.getText("FILTER_BAR_OK")
		});
		oCloseButton.attachPress(function() {			
			that._closeAddRemoveFiltersDialog(sGroupName, oLink);
		});
		this._oDialog.addAggregation("buttons", oCloseButton);
	
		this._oDialog.setInitialFocus(this._oSearchField);
	
		this._oDialog.setContentHeight("23.25rem"); // 30.25 - 2*2.5rem - 2rem
	
		if (this._sSearchCriteriaInFiltersDialog) {
			this._triggerSearchByValue(this._sSearchCriteriaInFiltersDialog);
		}
	
		// Cancel button
		var oCancelButton = new Button({
			id: this.getId() + "-btnCancelAddRemoveFiltersDialog",			
			text: this._oRb.getText("FILTER_BAR_CANCEL"),
			press: function() {
				that._cancelAddRemoveFiltersDialog(sGroupName);
				that._closeAddRemoveFiltersDialog(sGroupName, oLink);
			}
		});
		this._oDialog.addAggregation("buttons", oCancelButton);
	
		this._oDialog.open();
	};
	
	/**
	 * selection of the checkbox in the 'Add/Remove Filter Fileds' dialog was changed
	 * 
	 * @private
	 * @param {sap.m.Checkbox} oCheckBox representing visible in filter bar
	 * @param {object} oItem internal object associated with this checkbox
	 */
	FilterBar.prototype._selectionChangedInAddFiltersDialog = function(oCheckBox, oItem) {

		var bVisible = oCheckBox.getSelected();
	
		if (!bVisible && ((oItem.filterItem.getMandatory() && !oItem.checkbox.getEnabled()) || oItem.filterItem.getVisibleInFilterBar())) {
			oCheckBox.setSelected(true);
			return; // only enabled entries (mandatory with values) can be removed from the filters dialog
		}
	
		oItem.filterItem.setPartOfCurrentVariant(bVisible);
	
		this._rerenderItem(oItem);
	
		this._notifyAboutChangedFilters(bVisible, oItem.control);
	};
	
	/**
	 * semaphore handling for variant change
	 * 
	 * @private
	 * @param {boolean} bFlag setting the semaphore state
	 */
	FilterBar.prototype._setConsiderFilterChanges = function(bFlag) {
	
		this._filterChangeSemaphore = bFlag;
	};
	
	/**
	 * semaphore handling for variant change
	 * 
	 * @private
	 * @returns {boolean} the semaphore state
	 */
	FilterBar.prototype._getConsiderFilterChanges = function() {

		return this._filterChangeSemaphore;
	};
	
	/**
	 * filter is either added/removed or changed its value
	 * 
	 * @private
	 * @param {object} oEvent general event object
	 * @param {boolean} bDoNotPropagate if set do not raise the filterChange event
	 */
	FilterBar.prototype.fireFilterChange = function(oEvent) {

		this._updateToolbarText();
	
		if (this._getConsiderFilterChanges() && this._oVariantManagement && this._oVariantManagement.getEnabled()) {
			this._oVariantManagement.currentVariantSetModified(true);
		}
	
		if (this._oFilterDialog && !(this._oFilterDialog.isOpen())) {
			return;
		}
	
		this.fireEvent("filterChange", oEvent);
	};
	
	/**
	 * prepare event object and fire event
	 * 
	 * @private
	 * @param {boolean} bVisible indicated whether an filter was added or removed
	 * @param {sap.ui.core.Control} oControl which was either added or removed
	 */
	FilterBar.prototype._notifyAboutChangedFilters = function(bVisible, oControl) {
	
		var oObj;
	
		if (bVisible) {
			oObj = {
				"added": oControl
			};
		} else {
			oObj = {
				"deleted": oControl
			};
		}
	
		this.fireFilterChange(oObj);
	
	};
	/**
	 * returns the list of all added/removed filter items
	 * 
	 * @private
	 * @returns {array} the list of all added/removed filter items. May be null.
	 */
	FilterBar.prototype.getAllAddedRemovedFilterItems = function() {
	
		return this._mChangedFilterItems;
	};
	
	/**
	 * the layout for all visible filters in the advanced area will be recreated
	 * 
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements
	 */
	FilterBar.prototype._layOutAA = function(aControls) {

		if (this._mAdvancedAreaFilter && Object.keys(this._mAdvancedAreaFilter).length > 1) {
			this._layOutAAMultipleGroup(aControls);
		} else {
			this._layOutAASingleGroup(aControls);
		}
	};
	
	/**
	 * the layout for all visible filters in the advanced area will be recreated. Each Group will be rendered in a FormContainer.
	 * 
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements
	 */
	FilterBar.prototype._layOutAAMultipleGroup = function(aControls) {

		var i, j, nGroups = 0;
		var oFormContainer = null;
	
		for (i = 0; i < aControls.length; i++) {
			if (aControls[i].control === null) {
				nGroups++;
			}
		}
	
		var oAdvancedLayout = this._oAdvancedAreaForm.getLayout();
		if (oAdvancedLayout) {
			if (nGroups >= 3) {
				oAdvancedLayout.setLabelSpanL(5);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(3);
				oAdvancedLayout.setColumnsM(2);
			} else if (nGroups === 2) {
				oAdvancedLayout.setLabelSpanL(4);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(2);
				oAdvancedLayout.setColumnsM(2);
			} else if (nGroups === 1) {
	
				// + dummy group
				oAdvancedLayout.setLabelSpanL(4);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(2);
				oAdvancedLayout.setColumnsM(2);
	
				// oAdvancedLayout.setLabelSpanL(6); //will consider M
				// oAdvancedLayout.setLabelSpanM(3);
				// oAdvancedLayout.setColumnsL(1);
				// oAdvancedLayout.setColumnsM(1);
			}
		}
	
		for (i = 0; i < aControls.length; i++) {
			if (aControls[i].control === null) {
				oFormContainer = new FormContainer();
	
				if (Object.keys(this._mAdvancedAreaFilter).length > 1) { // hide group when only one group is present
					oFormContainer.setTitle(aControls[i].filterItem.getGroupTitle());
				}
				this._oAdvancedAreaForm.addFormContainer(oFormContainer);
	
				j = i + 1;
				while (j < aControls.length && (aControls[j].control)) {
					this._addControlToAdvancedArea(aControls[j].filterItem, aControls[j].control, oFormContainer);
					j++;
				}
	
				i = j - 1;
			}
		}
	
		if (nGroups === 1) {
			this._oAdvancedAreaForm.addFormContainer(new FormContainer()); // dummy
		}
	};
	
	/**
	 * if only one group with multiple filter fields is available, it will be layouted in two columns. a dummy group will be created containing ~ half of
	 * the fields
	 * 
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements. First element is a group
	 */
	FilterBar.prototype._layOutAASingleGroup = function(aControls) { // adapt to LMS
	
		var i, idx, nCount, bMod;
		var nFields = aControls.length - 1;
		var nNewGroups = nFields > 2 ? 2 : 1;
	
		// if (nFields >= 7) { //does not work, because we do not have a news-paper layout
		// nNewGroups = 3;
		// } else if (nFields >= 4) {
		// nNewGroups = 2;
		// }
	
		if (nNewGroups > 1) {
			nCount = Math.floor(nFields / nNewGroups);
			bMod = ((nCount * nNewGroups) < nFields);
	
			for (i = 1; i < nNewGroups; i++) {
				idx = i * nCount;
				if (bMod) {
					++idx;
				}
	
				if ((idx + i) < aControls.length) {
					aControls.splice(idx + i, 0, aControls[0]); // add dummy group
				}
			}
		}
	
		this._layOutAAMultipleGroup(aControls);
	};
	
	/**
	 * write the current filter selection to the persistency
	 * 
	 * @private
	 * @param {boolean} bConsiderInvisibleFilters indicates if invisible filters should be considered
	 * @returns {array} of variant specific filter info
	 */
	FilterBar.prototype._determineVariantFiltersInfo = function(bConsiderInvisibleFilters) {
	
		var i;
		var n = null, oItem;
	
		var aFilters = null;
	
		if (this._mAdvancedAreaFilter) {
	
			for (n in this._mAdvancedAreaFilter) {
	
				if (n) {
					if (this._mAdvancedAreaFilter[n].items) {
	
						for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
							oItem = this._mAdvancedAreaFilter[n].items[i];
	
							if (bConsiderInvisibleFilters || oItem.filterItem.getVisible()) {
								if (!aFilters) {
									aFilters = [];
								}
								aFilters.push({
									group: oItem.filterItem.getGroupName(),
									name: oItem.filterItem.getName(),
									partOfCurrentVariant: oItem.filterItem.getPartOfCurrentVariant(),
									visibleInFilterBar: oItem.filterItem.getVisibleInFilterBar()
								});
							}
						}
					}
				}
			}
		}
	
		return aFilters;
	};
	
	/**
	 * add a filter to the FormContainer
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the corresponding filter item
	 * @param {sap.ui.core.Control} oControl the control itself
	 * @param {sap.ui.layout.form.FormContainer} oFormContainer in which the control will be added
	 */
	FilterBar.prototype._addControlToAdvancedArea = function(oFilterItem, oControl, oFormContainer) {
	
		var oFormElement = new FormElement({
			label: oFilterItem.getLabelControl(),
			fields: [
				(oControl !== null) ? oControl : new Text()
			]
		});
	
		oFormContainer.addFormElement(oFormElement);
	};
	
	/**
	 * determines if an item is relevant for the query
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem which is beeing checked
	 * @returns {boolean} true for relevanr, false for not relevat
	 */
	FilterBar.prototype._determineVisibility = function(oFilterItem) {

		var bVisible = false;
	
		if (oFilterItem) {
			bVisible = oFilterItem.getVisible() && (oFilterItem.getVisibleInFilterBar() || oFilterItem.getPartOfCurrentVariant());
		}
	
		return bVisible;
	};
	
	/**
	 * returns an array of all visible basic items
	 * 
	 * @private
	 * @returns {array} all visible basic items
	 */
	FilterBar.prototype._retrieveVisibleBasicItems = function() {
	
		var i, aBasicItems = [];
	
		if (this.getAdvancedMode()) {
			if (this._aBasicAreaSelection) {
				for (i = 0; i < this._aBasicAreaSelection.length; i++) {
					if (this._aBasicAreaSelection[i].filterItem) {
						// if (this._aBasicAreaSelection[i].filterItem.getVisible() && (this._aBasicAreaSelection[i].filterItem.getVisibleInFilterBar)) {
						if (this._determineVisibility(this._aBasicAreaSelection[i].filterItem)) {
							aBasicItems.push(this._aBasicAreaSelection[i]);
						}
					}
				}
			}
		}
	
		return aBasicItems;
	};
	
	/**
	 * returns an array of all visible advanced items
	 * 
	 * @private
	 * @returns {array} all visible advanced items
	 */
	FilterBar.prototype._retrieveVisibleAdvancedItems = function() {
	
		var i, n = null, oItem;
		var aAdvancedItems = [];
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					if (n === FilterBar.INTERNAL_GROUP) {
						if (this.getAdvancedMode()) {
							continue;
						}
					}
	
					if (this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
						for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
							oItem = this._mAdvancedAreaFilter[n].items[i];
							if (oItem) {
								// if (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()) {
								if (this._determineVisibility(oItem.filterItem)) {
									aAdvancedItems.push(oItem);
								}
							}
						}
					}
				}
			}
		}
	
		return aAdvancedItems;
	};
	
	/**
	 * retrieves all selection from the basic area and all filters from the advanced area. Only visible fields are considered
	 * 
	 * @private
	 * @returns {array} all visible controls from the basic and advanced area area
	 */
	FilterBar.prototype._retrieveCurrentSelectionSet = function() {
	
		var i;
		var aControls = [];
	
		var aBasicItems = this._retrieveVisibleBasicItems();
	
		var aAdvancedItems = this._retrieveVisibleAdvancedItems();
	
		var aItems = aBasicItems.concat(aAdvancedItems);
	
		for (i = 0; i < aItems.length; i++) {
			if (aItems[i].control) {
				aControls.push(aItems[i].control);
			}
		}
	
		return aControls;
	};
	
	/**
	 * event will be executed, once the SEARCH-button was fired. All controls from basic area and all visible advanced area controls will be passed as
	 * event-parameters
	 * 
	 * @private
	 * @returns {boolean} indicates the validation result. true means no validation errors.
	 */
	FilterBar.prototype.search = function() {
	
		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet();
	
		this.fireSearch(parameter);
	
		return true;
	};
	
	/**
	 * event will be executed, once the CLEAR-button was fired
	 * 
	 * @private
	 */
	FilterBar.prototype.clear = function() {
	
		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet();
	
		this._clearErrorState();
	
		this.fireClear(parameter);
	};
	
	/**
	 * obtains from the variant management the current selected entry ands applies the corresponding variant. In case nothing was selected variant
	 * management returns null -> no variant will be applied
	 * 
	 * @private
	 */
	FilterBar.prototype._setSelectedVariant = function() {
	
		var oVariant = null;
	
		if (this._oVariantManagement) { // in case a variant is currently selected, re-apply this variant
			var sKey = this._oVariantManagement.getSelectionKey();
			if (sKey) {
	
				oVariant = this._oVariantManagement.getVariantContent(this, sKey);
	
				if (oVariant) {
					this._applyVariant(oVariant);
				}
			}
		}
	};
	
	/**
	 * event will be executed, once the RESET-button was fired
	 * 
	 * @private
	 */
	FilterBar.prototype.reset = function() {
	
		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet();
	
		this.fireReset(parameter);
	
		this._setSelectedVariant();
	};
	
	/**
	 * retrieve the data for a specific variant and rearrange the advance area
	 * 
	 * @private
	 * @param {object} oVariant the variant
	 */
	FilterBar.prototype._applyVariant = function(oVariant) {
	
		var aPersFields = null;
		var aFieldsAndValues;
		var bExecuteOnSelection = false;
	
		if (oVariant) {
	
			this._setConsiderFilterChanges(false);
	
			aFieldsAndValues = oVariant.filterBarVariant;
			aPersFields = oVariant.filterbar;
	
			this._applyVariantFields(aFieldsAndValues);
			this._reapplyVisibility(aPersFields);
	
			this._setConsiderFilterChanges(true);
	
			this._updateToolbarText();
	
			this.fireAfterVariantLoad();
	
			if (oVariant.executeOnSelection) {
				bExecuteOnSelection = oVariant.executeOnSelection;
			}
	
			if (bExecuteOnSelection) {
				this.search();
			} else {
				this._clearErrorState();
			}
		}
	};
	
	/**
	 * Triggers the registered fCallBack for fetching the current variant data.
	 * 
	 * @private
	 * @returns {Object} the datat blob will be stored for the current variant and passed back, via fRegisteredApplyData at a later point in time
	 */
	FilterBar.prototype._fetchVariantFiltersData = function() {
	
		if (this._fRegisteredFetchData) {
			try {
				return this._fRegisteredFetchData();
			} catch (ex) {
				jQuery.sap.log.error("callback for fetching data throws an exception");
			}
		} else {
			jQuery.sap.log.warning("no callback for fetch data supplied");
		}
	
		return null;
	};
	
	/**
	 * Triggers the registered fCallBack for applying the variant data
	 * 
	 * @private
	 * @param {Object} oJson the data blob as initialy returned by the fRegisteredFetchData callback
	 * @returns {object} data to be stored as part of the variant content
	 */
	FilterBar.prototype._applyVariantFields = function(oJson) {
	
		if (this._fRegisteredApplyData) {
			try {
				return this._fRegisteredApplyData(oJson);
			} catch (ex) {
				jQuery.sap.log.error("callback for applying data throws an exception");
			}
		} else {
			jQuery.sap.log.warning("no callback for appy data supplied");
		}
	};
	
	/**
	 * Will be called from the smart variant control, as a request to determine the content of
	 * 
	 * @param {boolean} bConsiderInvisibleFilters indicates if invisible filters should be considered
	 * @returns {object} json object
	 * @public
	 */
	FilterBar.prototype.fetchVariant = function(bConsiderInvisibleFilters) {
	
		var aFiltersInfo;
		var oVariant = {};
		aFiltersInfo = this._determineVariantFiltersInfo(bConsiderInvisibleFilters);
	
		oVariant.filterbar = (!aFiltersInfo) ? [] : aFiltersInfo;
		oVariant.filterBarVariant = this._fetchVariantFiltersData();
	
		return oVariant;
	};
	
	/**
	 * Will be called from the smart variant control, as a request to apply the variant
	 * 
	 * @param {string} oVariant json object
	 * @public
	 */
	FilterBar.prototype.applyVariant = function(oVariant) {
	
		this._applyVariant(oVariant);
	};
	
	/**
	 * retrieve the mandatory filters
	 * 
	 * @public
	 * @returns {array} of visible mandatory filters
	 */
	FilterBar.prototype.determineMandatoryFilterItems = function() {
	
		var i;
		var aMandatoryFilters = [];
		var aBasicItems = this._retrieveVisibleBasicItems();
		var aAdvancedItems = this._retrieveVisibleAdvancedItems();
	
		var aItems = aBasicItems.concat(aAdvancedItems);
	
		for (i = 0; i < aItems.length; i++) {
			if (aItems[i].filterItem.getMandatory() === true) {
				if (aItems[i].control) {
					aMandatoryFilters.push(aItems[i].filterItem);
				}
			}
		}
	
		return aMandatoryFilters;
	};
	
	/**
	 * retrieve the control based on the filteBarItem
	 * 
	 * @public
	 * @param {sap.ui.comp.filterbar.Filter.FilterItem} oFilterItem from the aggregations
	 * @returns {sap.ui.core.Control} the corresponding control. If no match is found null will returned.
	 */
	FilterBar.prototype.determineControlByFilterItem = function(oFilterItem) {
	
		var i, n = null;
		var oItem, oGroupElement;
	
		if (this._aBasicAreaSelection) {
			for (i = 0; i < this._aBasicAreaSelection.length; i++) {
				oItem = this._aBasicAreaSelection[i];
				if (oFilterItem === oItem.filterItem) {
					return oItem.control;
				}
			}
		}
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
						for (i = 0; i < oGroupElement.items.length; i++) {
							oItem = oGroupElement.items[i];
							if (oFilterItem === oItem.filterItem) {
								return oItem.control;
							}
						}
					}
				}
			}
		}
	
		return null;
	};
	
	/**
	 * retrieve the control based on the name and group name
	 * 
	 * @public
	 * @param {string} sName the control's name
	 * @param {string} sGroupName is null for basic area
	 * @returns {sap.ui.core.Control} the corresponding control. If no match is found null will returned. For filters in the advanced area the
	 *          visibleInAdvancedArea flag is considered
	 */
	FilterBar.prototype.determineControlByName = function(sName, sGroupName) {

		var oItem = this._determineItemByName(sName, sGroupName);
		if (oItem) {
			return oItem.control;
		}
	
		return null;
	};
	
	/**
	 * retrieve the item based on the name and (optional) group name
	 * 
	 * @private
	 * @param {string} sName the control's name
	 * @param {string} sGrpName sGroupName is null for basic area
	 * @returns {object} the corresponding internal item. If no match is found null will returned.
	 */
	FilterBar.prototype._determineItemByName = function(sName, sGrpName) {

	
		var i;
		var oItem, oGroupElement;
		var sGroupName = sGrpName;
	
		if (!sName) {
			return null;
		}
	
		if (!sGroupName) {
			sGroupName = FilterBar.INTERNAL_GROUP;
		}
	
		if (this._mAdvancedAreaFilter) {
			// check the filter
			oGroupElement = this._mAdvancedAreaFilter[sGroupName];
			if (oGroupElement && oGroupElement.items) {
				for (i = 0; i < oGroupElement.items.length; i++) {
					oItem = oGroupElement.items[i];
					if (oItem && oItem.filterItem && (oItem.filterItem.getName() === sName)) {
						return oItem;
					}
				}
			}
		}
	
		return null;
	};
	
	/**
	 * retrieve the filter item based on the name
	 * 
	 * @private
	 * @param {string} sName the control's name
	 * @returns {sap.ui.comp.filterbar.FilterItem} the corresponding filter item. If no match is found null will returned.
	 */
	FilterBar.prototype.determineFilterItemByName = function(sName) {

	
		var n, oItem;
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				oItem = this._determineItemByName(sName, n);
				if (oItem) {
					return oItem.filterItem;
				}
			}
		}
	
		return null;
	};
	
	/**
	 * retrieve the item from local map
	 * 
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterGroupItem} oFilterGroupItem group filter item
	 * @returns {object} the corresponding internal representation. If no match is found null will returned.
	 */
	FilterBar.prototype._determineByFilterGroupItem = function(oFilterGroupItem) {

	
		var n = null, i;
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].filterItem === oFilterGroupItem) {
								return oGroupElement.items[i];
							}
						}
					}
				}
			}
		}
	
		return null;
	};
	
	/**
	 * retrieve the item from local map
	 * 
	 * @private
	 * @param {sap.ui.core.Control} oControl for a filter
	 * @returns {object} the corresponding internal representation. If no match is found null will returned.
	 */
	FilterBar.prototype._determineByControl = function(oControl) {

	
		var n = null, i;
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].control === oControl) {
								return oGroupElement.items[i];
							}
						}
					}
				}
			}
		}
	
		return null;
	};
	
	/**
	 * delete the property combobox
	 * 
	 * @private
	 */
	FilterBar.prototype._deleteProperties = function() {

	
		var n = null, i;
	
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
	
						if (oGroupElement.formcontainer) {
							delete oGroupElement.formcontainer;
						}
	
						if (oGroupElement.link) {
							delete oGroupElement.link;
						}
	
						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].checkbox) {
								delete oGroupElement.items[i].checkbox;
							}
							if (oGroupElement.items[i] && oGroupElement.items[i].formelement) {
								delete oGroupElement.items[i].formelement;
							}
						}
					}
				}
			}
		}
	
	};
	
	/**
	 * determines the corresponding DOM element
	 * 
	 * @private
	 * @param {string} sId of an element
	 * @returns {Object} the DOM element
	 */
	FilterBar.prototype._getDOMElement = function(sId) {

	
		return jQuery('#' + sId);
	};
	
	/**
	 * handle the resizing of the basic search field in the value dialog scenario
	 * 
	 * @private
	 */
	FilterBar.prototype._fHandleResize = function() {

	
		var nBasicSearchWidth, nHLayoutWidth, nButtonWidth, nAvailableSpace;
		var nDelta = 16, nMinWidth, nMaxWidth;
		var oSearchElement, oControl;
	
		if (this.getAdvancedMode()) {
	
			if (this._aBasicAreaSelection && this._aBasicAreaSelection.length === 1) {
				if (this._aBasicAreaSelection[0] && this._aBasicAreaSelection[0].control) {
	
					nMinWidth = nDelta * 2; // min size
	
					if (this._nFirstElementWidth) {
						nMaxWidth = this._nFirstElementWidth;
					} else {
						nMaxWidth = nDelta * 28; // basic search default field size
					}
	
					oControl = this._aBasicAreaSelection[0].control;
					oSearchElement = this._getDOMElement(oControl.getId()); // jQuery('#' + oControl.getId());
	
					nBasicSearchWidth = oSearchElement.width();
					nButtonWidth = this._getDOMElement(this._oSearchButtonAdvanced.getId()).width(); // jQuery('#' +
					// this._oSearchButton.getId()).width();
					nHLayoutWidth = this._getDOMElement(this._oBasicAreaLayout.getId()).width(); // jQuery('#' +
					// this._oBasicAreaLayout.getId()).width();
	
					nAvailableSpace = nHLayoutWidth - nButtonWidth - 3 / 2 * nDelta;
	
					if ((nBasicSearchWidth + nButtonWidth + 3 / 2 * nDelta) > nHLayoutWidth) {
	
						if (nAvailableSpace < nMinWidth) {
							nAvailableSpace = nMinWidth;
						}
	
					} else {
						/* eslint-disable no-lonely-if */
	
						if (nAvailableSpace > nMaxWidth) {
							nAvailableSpace = nMaxWidth;
						}
	
						/* eslint-enable no-lonely-if */
					}
	
					oSearchElement.width(nAvailableSpace);
				}
			}
		}
	};
	
	/**
	 * handle the initial determination of the basic field length and the initial resizing of the basic search field by calling the _fHandleResize
	 * 
	 * @private
	 */
	FilterBar.prototype.onAfterRendering = function() {
	
		if (this.getAdvancedMode()) {
			if (!this._nFirstElementWidth) {
				if (this._aBasicAreaSelection && this._aBasicAreaSelection.length === 1) {
					if (this._aBasicAreaSelection[0] && this._aBasicAreaSelection[0].control) {
						this._nFirstElementWidth = this._getDOMElement(this._aBasicAreaSelection[0].control.getId()).width();
						this._fHandleResize();
					}
				}
			}
		} else {
			/* eslint-disable no-lonely-if */
			if (this._oFilterDialog && this._mAdvancedAreaFilter) {
				this._dialogOpened();
			}
			/* eslint-enable no-lonely-if */
		}
	};
	
	/**
	 * destroys the current control and all inner controls
	 * 
	 * @public
	 */
	FilterBar.prototype.destroy = function() {

		// unregister eventhandler for resizing
		jQuery(window).off("resize.basicsearch");
	
		if (this._oVariantManagement) {
	
			if (this._fInitialiseVariants) {
				this._oVariantManagement.detachInitialise(this._fInitialiseVariants);
				this._fInitialiseVariants = null;
			}
	
			if (this._fSaveVariant) {
				this._oVariantManagement.detachSave(this._fSaveVariant);
				this._fSaveVariant = null;
			}
	
			if (this._fAfterSaveVariant) {
				this._oVariantManagement.detachSave(this._fAfterSaveVariant);
				this._fAfterSaveVariant = null;
			}
		}
	
		Grid.prototype.destroy.apply(this, arguments);
	
		if (this._oDialog) {
			this._oDialog.destroy();
			this._oDialog = null;
		}
		
		if (this._oActionSheet) {
			this._oActionSheet.destroy();
			this._oActionSheet = null;
		}	
		
		if (this._oFilterDialog) {
			this._oFilterDialog.destroy();
			this._oFilterDialog = null;
		}
			
		this._aBasicAreaSelection = null;
		this._mAdvancedAreaFilter = null;
		this._oBasicAreaLayout = null;
		this._oAdvancedAreaForm = null;
		this._oAdvancedPanel = null;
		this._oVariantManagement = null;
	
		this._oVariant = null;
	
		this._fRegisteredFetchData = null;
		this._fRegisteredApplyData = null;
		this._fRegisterGetFiltersWithValues = null;
	
		this._fRegisteredFilterChangeHandlers = null;
	
		this._oSearchButton = null;
		this._oSearchButtonAdvanced = null;
		this._oFiltersButton = null;
		this._oHideShowButton = null;
		this._oClearButtonOnFB = null;
		this._oRestoreButtonOnFB = null;
	
		this._mChangedFilterItems = null;
	
		this._oAddToFilterBarLabel = null;
		this._oTitle = null;
	};
	

	return FilterBar;

}, /* bExport= */ true);

}; // end of sap/ui/comp/filterbar/FilterBar.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterGroupItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterGroupItem.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterGroupItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterGroupItem",['jquery.sap.global', 'sap/m/Label', './FilterItem', 'sap/ui/comp/library', 'sap/ui/core/TooltipBase'],
	function(jQuery, Label, FilterItem, library, TooltipBase) {
	"use strict";


	
	/**
	 * Constructor for a new filterbar/FilterGroupItem.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * representation for a filter field in the advanced area. Has the same semantical meaning as the new visible in filter bar property.
	 * @extends sap.ui.comp.filterbar.FilterItem
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterGroupItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FilterGroupItem = FilterItem.extend("sap.ui.comp.filterbar.FilterGroupItem", /** @lends sap.ui.comp.filterbar.FilterGroupItem.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		properties : {
	
			/**
			 * the title of the group
			 */
			groupTitle : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * the name of the group
			 */
			groupName : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * If set to true, this field will be added to the advanced area ( Dynamic Selection) by default.
			 * This property is mapped against the new visibleInFilterBar property.
			 */
			visibleInAdvancedArea : {type : "boolean", group : "Misc", defaultValue : false}
		}
	}});
	
	
	FilterGroupItem.prototype.init = function() {
		this.setVisibleInAdvancedArea(false);
	};
	
	/**
	 * setter for group title
	 * 
	 * @public
	 * @param {string}
	 *            sValue property
	 */
	FilterGroupItem.prototype.setGroupTitle = function(sValue) {
		this.setProperty("groupTitle", sValue);
	
		this.fireChange({
			propertyName: "groupTitle"
		});
	};
	
	/**
	 * setter for controlling the filters visibility in the filter bar. This property is deprecated, please use 'visibleInFilterBar' The successor of this property
	 * is 'visibleInFilterBar'.
	 * 
	 * @public
	 * @param {boolean}
	 *            bValue property
	 */
	FilterGroupItem.prototype.setVisibleInAdvancedArea = function(bValue) {
		this.setVisibleInFilterBar(bValue);
	};
	
	/**
	 * getter for controlling the filters visibility in the filter bar. This property is deprecated, please use 'visibleInFilterBar' The successor of this property
	 * is 'visibleInFilterBar'.
	 * 
	 * @public
	 * @returns {boolean} bValue property
	 */
	FilterGroupItem.prototype.getVisibleInAdvancedArea = function() {
		return this.getVisibleInFilterBar();
	};
	
	/**
	 * destroys this element
	 * 
	 * @public
	 */
	FilterGroupItem.prototype.destroy = function() {
		FilterItem.prototype.destroy.apply(this, arguments);
	};
	

	return FilterGroupItem;

}, /* bExport= */ true);

}; // end of sap/ui/comp/filterbar/FilterGroupItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorController",["jquery.sap.global", "./FieldSelectorModelConverter"],
	function(jQuery, ModelConverter) {
	"use strict";


	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 * 
	 * @constructor
	 * @public
	 * @author Niels Hebling
	 */
	var FieldSelectorController = function() {
		this._oModelConverter = null;
		this._oFields = {};
	};
	
	/**
	 * Initialize the controller by providing a reference to the OData model and optionally a special entity set and/or a list of fields which should be ignored.
	 * @param {sap.ui.model.odata.ODataModel} oODataModel - OData model
	 * @param {string} sEntityTypes Entity type name(s) separated by comma-character or array 
	 * @param {Array} [aIgnoredFields] List of fields which should be ignored.
	 */
	FieldSelectorController.prototype.init = function(oODataModel, sEntityTypes, aIgnoredFields){
		
		if (!oODataModel) {
			jQuery.sap.log.error("oModel has to be set otherwise nothing will be displayed");
		}
		if (!sEntityTypes) {
			jQuery.sap.log.error("sEntityTypes has to be set otherwise nothing will be displayed");
		}
		
		this._oModelConverter = new ModelConverter(oODataModel);
		var oConvertedModel = this._oModelConverter.getConvertedModel(sEntityTypes, aIgnoredFields);
		this._sortFields(oConvertedModel);
	};
	
	/**
	 * Sort all fields form the converted model into a map of fields arranged by entity sets.
	 * @param {Object} oConvertedModel Model of the OData service converted into a simple list.
	 */
	FieldSelectorController.prototype._sortFields = function(oConvertedModel){
		var that = this;
		jQuery.each(oConvertedModel, function(key, value) {
			that._oFields[key] = value.sort(function(a, b) {
				if (a.fieldLabel > b.fieldLabel) {
					return 1;
				}
				if (a.fieldLabel < b.fieldLabel) {
					return -1;
				}
				// a must be equal to b
				return 0;
			});
		});
	};
	
	/**
	 * Get all fields of the service sorted by entity set. The fields itself are sorted by the alphabet.
	 * @returns {Object} Returns all fields of the service ordered by entity set
	 * @example {
	 * 				"entitySet_1":{
	 * 					"Field_D",
	 * 					"Field_E"
	 * 				},
	 * 				"entitySet_2":{
	 * 					"Field_A",
	 * 					"Field_B"
	 * 				}
	 * 			}
	 */
	FieldSelectorController.prototype.getFields = function(){
		return this._oFields;
	};
	
	/**
	 * Get all entity types of the OData service
	 * @returns {Array} Returns the list of entity types of the OData service 
	 */
	FieldSelectorController.prototype.getEntityTypes = function(){
		return this._oModelConverter.getEntityTypes();
	};
	
	/**
	 * Get the metadata analyzer
	 * @returns {Object} Returns a reference to the metadata analyzer of the current service
	 */
	FieldSelectorController.prototype.getMetaDataAnalyzer = function(){
		return this._oModelConverter.getMetaDataAnalyzer();
	};
	
	/**
	 * Get maximum number of rows in all entitysets returned in the table data.
	 * @returns {Number} Returns the maximum number of rows available in the largest EntitySet.
	 */
	FieldSelectorController.prototype.getMaxEntitySetSize = function(){
		var maxCount = 0;
		if (this._oFields){
			jQuery.each(this._oFields, function(key, value){
				if (value && value.length){
					if (value.length > maxCount){
						maxCount = value.length;
					}
				}
			});		
		}
		return maxCount;	
	};
	
	/**
	 * Destroy the current instance
	 */
	FieldSelectorController.prototype.destroy = function(){
		if (this._oModelConverter){			
			this._oModelConverter.destroy();
		}
		this._oModelConverter = null;
		this._oFields = null;
		
	};
	
	return FieldSelectorController;
}, /* bExport= */ true);
}; // end of sap/ui/comp/odata/FieldSelectorController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.Controller') ) {
/* eslint-disable strict */

/*
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP SE. All rights reserved
 */

// Provides Controller
jQuery.sap.declare('sap.ui.comp.personalization.Controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/Controller",[
	'jquery.sap.global', 'sap/ui/base/ManagedObject', './ColumnsController', './FilterController', './GroupController', './SortController', './Util'
], function(jQuery, ManagedObject, ColumnsController, FilterController, GroupController, SortController, Util) {
	"use strict";

	/**
	 * Constructor for a new controller of P13nDialog.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The personalization Controller provides capabilities in order to orchestrate the P13nDialog.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.28.1
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @private
	 * @since 1.26.0
	 * @alias sap.ui.comp.personalization.Controller
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Controller = ManagedObject.extend("sap.ui.comp.personalization.Controller", /** @lends sap.ui.comp.personalization.Controller */
	{
		constructor: function(sId, mSettings) {
			ManagedObject.apply(this, arguments);
		},
		metadata: {
			publicMethods: [
				"setPersonalizationData"
			],
			properties: {

				/**
				 * For each panel 'visible' and 'payload' attributes can be regulated.
				 */
				setting: {
					type: "object",
					defaultValue: null
				},
				/**
				 * The current state can be set back either to the state of initial table (ResetFull) or to the specific state of the table
				 * (ResetPartial) which has been set via setPersonalizationData method
				 */
				resetToInitialTableState: {
					type: "boolean",
					defaultValue: true
				}
			},
			associations: {
				/**
				 * Table on which the personalization will be performed
				 */
				table: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {
				/**
				 * When table is manipulated directly like e.g. column move, column resize etc. this event is raised before the action has been
				 * finished. There is no guarantee that table is really changed. E.g. touched column could be moved to a new position or could also be
				 * dropped at the old position.
				 */
				beforePotentialTableChange: {},
				/**
				 * When table is manipulated directly like e.g. column move, column resize etc. this event is raised after the action has been
				 * finished. There is no guarantee that table is really changed. E.g. touched column could be moved to a new position or could also be
				 * dropped at the old position.
				 */
				afterPotentialTableChange: {},

				/**
				 * Event is fired when the personalization model data are changed
				 */
				afterP13nModelDataChange: {
					parameters: {
						/**
						 * Reason for change
						 */
						changeReason: {
							type: "sap.ui.comp.personalization.Controller.ChangeReason"
						},
						/**
						 * Fragment of model data in JSON format which is relevant for persistence.
						 */
						persistentData: {
							type: "object"
						},
						/**
						 * Fragment of model data in JSON format which has been changed since last 'afterP13nModelDataChange' event was raised.
						 * Consumer of personalization dialog has to react on it in order to 'sort' or 'filter' the table.
						 */
						changeData: {
							type: "object"
						},
						/**
						 * Information about what has been changed since last 'afterP13nModelDataChange' event was raised. Consumer of personalization
						 * dialog has to react on it in order to 'sort' or 'filter' the table.
						 */
						changeType: {
							type: "sap.ui.comp.personalization.Controller.ChangeType"
						},
						/**
						 * Information about what has been changed since last variant was set. Consumer of personalization dialog has to react on it
						 * in order to show dirty flag.
						 */
						changeTypeVariant: {
							type: "sap.ui.comp.personalization.Controller.ChangeType"
						}
					}
				}
			},
			library: "sap.ui.comp"
		}

	});

	/**
	 * Setter for 'setting' property. With 'setting' for each panel can be defined whether a panel should be considered. If no setting for a panel is
	 * defined the default panel will be taking over. Once controller setting is set, the personalization dialog will show defined number of panels
	 * according to the settingObject.
	 * 
	 * @overwrite
	 * @function
	 * @sap.ui.comp.personalization.Controller.prototype.setSetting
	 * @param {object} oSetting contains panel settings, like: visibility
	 * @returns {object} actual controller instance: this
	 */
	Controller.prototype.setSetting = function(oSetting) {
		oSetting = this.validateProperty("setting", oSetting);
		this.setProperty("setting", oSetting, true); // no rerendering
		if (!oSetting) {
			return this;
		}

		this._checkIfGroupingAllowed();

		this._oSettingCurrent = Util.copy(this._oSettingOriginal);

		for ( var type in oSetting) {
			if (oSetting[type].visible === false) {
				delete this._oSettingCurrent[type];
				continue;
			}
			if (oSetting[type].visible && this._oSettingCurrent[type] && this._oSettingCurrent[type].visible) {
				this._oSettingCurrent[type].controller = oSetting[type].controller ? oSetting[type].controller : this._oSettingCurrent[type].controller;
				if (oSetting[type].payload) {
					this._oSettingCurrent[type].payload = oSetting[type].payload;
				}
			}
		}

		this._masterSync(Controller.SyncReason.NewSetting, null);
		return this;
	};

	/**
	 * @overwrite
	 * @function
	 * @sap.ui.comp.personalization.Controller.prototype.setTable
	 * @param {object} oTable contains the table instance for that personalization is done
	 * @returns {object} actual controller instance: this
	 */
	Controller.prototype.setTable = function(oTable) {
		this.setAssociation("table", oTable);
		if (!oTable) {
			return this;
		}

		this._checkIfGroupingAllowed();

		var aColumns = this.getTable().getColumns();

		if (!Util.isConsistent(aColumns)) {
			throw "The table instance provided contain some columns for which a columnKey is provided, some for which a columnKey is not provided. This is not allowed ! ";
		}

		this._masterSync(Controller.SyncReason.NewTable, null);
		return this;
	};

	Controller.prototype.getTable = function() {
		var oTable = this.getAssociation("table");
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}
		return oTable;
	};

	Controller.prototype.getModel = function() {
		return this._oModel;
	};

	/**
	 * Initializes the personalization Controller instance after creation.
	 * 
	 * @protected
	 */
	Controller.prototype.init = function() {
		var that = this;
		this._oDialog = null;
		this._oPayload = null;
		this._oPersistentDataRestore = null;
		this._oPersistentDataCurrentVariant = null;
		this._oPersistentDataAlreadyKnown = null;
		this._oPersistentDataBeforeOpen = null;
		this._oModel = null;

		// default: all panels are set to visible

		// NOTE: instantiating the sub-Controllers only when opening the dialog is
		// too late since personalization data could be set before this and we expect
		// sub-Controllers to handle these data
		this._oSettingOriginal = {
			columns: {
				controller: new ColumnsController({
					afterColumnsModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			sort: {
				controller: new SortController({
					afterSortModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			filter: {
				controller: new FilterController({
					afterFilterModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			group: {
				controller: new GroupController({
					afterGroupModelDataChange: function(oEvent) {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function(oEvent) {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function(oEvent) {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			}
		};

		this._oSettingCurrent = Util.copy(this._oSettingOriginal);
		this._oInitialVisiblePanelType = this._getInitialVisiblePanelType();
	};

	/**
	 * Special case for tables of type sap.ui.table.Table (with exception of AnalyticalTable) Currently sap.ui.table.Table does not support grouping
	 * feature as expected!
	 */
	Controller.prototype._checkIfGroupingAllowed = function() {
		var oTable = this.getTable();
		if (oTable && oTable instanceof sap.ui.table.Table && !(oTable instanceof sap.ui.table.AnalyticalTable)) {
			delete this._oSettingCurrent.group;
		}
	};

	/**
	 * Opens the personalization dialog
	 * 
	 * @param {object} oSettingsForOpen contains additional settings information for opening the dialog with its panels
	 */
	Controller.prototype.openDialog = function(oSettingsForOpen) {

		this._oDialog = new sap.m.P13nDialog({
			stretch: sap.ui.Device.system.phone,
			showReset: true,
			initialVisiblePanelType: this._oInitialVisiblePanelType
		});

		// Set compact style class if the table is compact too
		this._oDialog.toggleStyleClass("sapUiSizeCompact", !!jQuery(this.getTable().getDomRef()).closest(".sapUiSizeCompact").length);

		var oSettingForOpen = this._mixSetting(this._oSettingCurrent, oSettingsForOpen);

		var oPanels = this._callControllers(oSettingForOpen, "getPanel");
		for ( var type in oSettingForOpen) {
			if (oPanels[type]) {
				this._oDialog.addPanel(oPanels[type]);
			}
		}

		this._oPersistentDataBeforeOpen = this._getPersistentDataCopy();

		this._oDialog.attachOk(this._handleDialogOk, this);
		this._oDialog.attachCancel(this._handleDialogCancel, this);
		this._oDialog.attachReset(this._handleDialogReset, this);
		this._oDialog.attachAfterClose(this._handleDialogAfterClose, this);

		this._oDialog.open();
	};

	Controller.prototype._mixSetting = function(oSettingGlobal, oSetting) {
		if (!oSetting) {
			return oSettingGlobal;
		}
		for ( var type in oSetting) {
			if (oSetting[type].visible && oSettingGlobal[type] && oSettingGlobal[type].visible) {
				oSetting[type].controller = oSettingGlobal[type].controller;
				// Payload on oSetting has higher priority then payload on oSettingGlobal
				if (!oSetting[type].payload) {
					oSetting[type].payload = oSettingGlobal[type].payload;
				}
			}
		}
		return oSetting;
	};

	sap.ui.comp.personalization.Controller.prototype._getSettingOfVisiblePanels = function() {
		if (!this._oDialog) {
			return;
		}
		var oSetting = {};
		this._oDialog.getPanels().forEach(function(oPanel) {
			var sType = oPanel.getType();
			oSetting[sType] = {
				controller: this._oSettingCurrent[sType].controller,
				visible: oPanel.getVisible()
			};
		}, this);
		return oSetting;
	};

	Controller.prototype._getPersistentDataCopy = function() {
		var oPersistentData = {};
		if (this.getModel() && this.getModel().getData().persistentData) {
			oPersistentData = Util.copy(this.getModel().getData().persistentData);
		}
		return oPersistentData;
	};

	/**
	 * Setter for personalization model
	 * 
	 * @param{object} oNewPersistentData contains personalization data that is taken over into the model
	 */
	Controller.prototype.setPersonalizationData = function(oNewPersistentData) {
		if (!this._sanityCheck(oNewPersistentData)) {
			return;
		}

		var oCurrentPersistentData = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oNewPersistentData));

		this._masterSync(Controller.SyncReason.NewModelData, oCurrentPersistentData);

		if (this.getTable() && this.getTable().setFixedColumnCount) {
			this.getTable().setFixedColumnCount(0);
		}

		this._fireChangeEvent();

		// Note: this._oPersistentDataAlreadyKnown is already set up to date in _fireChangeEvent()
	};

	/**
	 * Handle the dialog "reset" event
	 * 
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogReset = function(oEvent) {
		if (this.getResetToInitialTableState()) {
			this._masterSync(Controller.SyncReason.ResetModelData, null);
		} else {
			this._masterSync(Controller.SyncReason.ResetModelDataVariant, null);
		}

		this._callControllers(this._getSettingOfVisiblePanels(), "onAfterReset", oEvent.getParameter("payload"));

		// Note: do not fire event since triggering reset does not mean that this reset will be actually submitted. Could even consider to hold back
		// _masterSync (?)

	};

	/**
	 * Handle the dialog "close" event
	 * 
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogCancel = function(oEvent) {

		this._oDialog.detachCancel(this._handleDialogCancel, this);

		this._oInitialVisiblePanelType = this._oDialog.getVisiblePanel() ? this._oDialog.getVisiblePanel().getType() : this._getInitialVisiblePanelType();

		this._oDialog.close();
	};

	/**
	 * Handle the dialog "ok" event
	 * 
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogOk = function(oEvent) {

		this._oDialog.detachOk(this._handleDialogOk, this);

		// TODO: consider to improve this ! Perhaps better to transport payload as custom data on dialog though then we must potentially take more
		// care about life cycle of the dialog
		this._oPayload = {
			trigger: "ok",
			payload: oEvent.getParameter("payload")
		};

		// Store the latest open panel
		this._oInitialVisiblePanelType = this._oDialog.getVisiblePanel() ? this._oDialog.getVisiblePanel().getType() : this._getInitialVisiblePanelType();

		this._oDialog.close();
	};

	/**
	 * Get first property of current setting object
	 * 
	 * @returns {string} that represents the panel type
	 */
	Controller.prototype._getInitialVisiblePanelType = function() {
		for ( var type in this._oSettingCurrent) {
			return type;
		}
	};

	Controller.prototype._handleDialogAfterClose = function() {
		var that = this;
		var _oPayload = this._oPayload;

		if (_oPayload && _oPayload.trigger === "ok") {
			setTimeout(function() {
				var oSettingOfVisiblePanels = that._getSettingOfVisiblePanels();
				if (that._oDialog) {
					that._oDialog.destroy();
					that._oDialog = null;
				}

				that._callControllers(oSettingOfVisiblePanels, "onAfterSubmit", that._oPayload.payload);
				that._oPayload = null;
				that._fireChangeEvent();
				that._oPersistentDataBeforeOpen = null;
			}, 0);

		} else {
			setTimeout(function() {
				if (that._oDialog) {
					that._oDialog.destroy();
					that._oDialog = null;
				}
				// call _masterSync only after dialog has been closed and destroyed, otherwise changing the model will update the
				// dialog's bindings which causes performance issues
				that._masterSync(Controller.SyncReason.NewModelData, that._oPersistentDataBeforeOpen);
				that._oPersistentDataBeforeOpen = null;
			}, 0);

		}

	};

	/**
	 * setSetting might be called after setTable() is called. So we should avoid to communicate with MiniControllers before the MiniControllers are
	 * not finally defined!
	 * 
	 * @param {string} sUseCase for execution of masterSync
	 * @param {object} oNewPersistentData
	 */
	Controller.prototype._masterSync = function(sUseCase, oNewPersistentData) {
		var type = null, oJson = null;
		
		switch (sUseCase) {
			case Controller.SyncReason.NewTable:

				this.initializeModel();
				// e.g. set up event handlers based on table instance
				this._callControllers(this._oSettingCurrent, "setTable", this.getTable());

				// take snapshot of table so that we can restore this state later
				this._callControllers(this._oSettingCurrent, "createTableRestoreJson");

				// Set model binding size dependent of column length in model data.
				// This is necessary as otherwise the table does show maximum 100 items.
				// We assume that filter with more than 1000 conditions is unrealistic
				this.getModel().setSizeLimit(this.getTable().getColumns().length + 1000);

				// no new persistent data was provided from outside - in this case the table instance represent the correct
				// state of persistent data which is why we update the persistent data from the table. There are limitations though,
				// since we cannot ask the table for filter and sort info e.g.
				this._callControllers(this._oSettingCurrent, "syncTable2PersistentModel");

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				// Copy the current table state in order to put back in case that it is needed (aka standard variant).
				oJson = this._callControllers(this._oSettingCurrent, "getTableRestoreJson");
				this._oPersistentDataRestore = Util.copy(oJson);

				this._oPersistentDataCurrentVariant = this._getPersistentDataCopy();
				// ??ER this._oPersistentDataCurrentVariant = Util.copy(this._oPersistentDataRestore); <---- couldn't this be wrong if we have a
				// different variant already active ???

				// Notice that _getPersistentDataCopy() is equal to <subController>._getTable2Json
				this._oPersistentDataAlreadyKnown = Util.copy(this._oPersistentDataRestore);
				break;

			case Controller.SyncReason.NewSetting:

				this.initializeModel();
				// e.g. set up event handlers based on table instance
				if (this.getTable()) {
					this._callControllers(this._oSettingCurrent, "setTable", this.getTable());
					this.getModel().setSizeLimit(this.getTable().getColumns().length + 1000);
				}

				// take snapshot of table so that we can restore this state later
				this._callControllers(this._oSettingCurrent, "createTableRestoreJson");

				// no new persistent data was provided from outside - in this case the table instance represent the correct
				// state of persistent data which is why we update the persistent data from the table. There are limitations though,
				// since we cannot ask the table for filter and sort info e.g.
				this._callControllers(this._oSettingCurrent, "syncTable2PersistentModel");

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				// Copy the current table state in order to put back in case that it is needed (aka standard variant).
				oJson = this._callControllers(this._oSettingCurrent, "getTableRestoreJson");
				this._oPersistentDataRestore = Util.copy(oJson);

				this._oPersistentDataCurrentVariant = this._getPersistentDataCopy();
				// ??ER this._oPersistentDataCurrentVariant = Util.copy(this._oPersistentDataRestore); <---- couldn't this be wrong if we have a
				// different variant already active ???

				// Notice that _getPersistentDataCopy() is equal to <subController>._getTable2Json
				this._oPersistentDataAlreadyKnown = Util.copy(this._oPersistentDataRestore);

				// Reduce data to current setting in case that setSetting() is called after setTable()
				for ( type in this._oPersistentDataRestore) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataRestore[type];
					}
				}
				// Reduce data to current setting in case that setSetting() is called after setTable()
				for ( type in this._oPersistentDataAlreadyKnown) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataAlreadyKnown[type];
					}
				}
				// Reduce data to current setting in case that setSetting() is called after setTable()
				for ( type in this._oPersistentDataCurrentVariant) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataCurrentVariant[type];
					}
				}
				break;

			case Controller.SyncReason.NewModelData:

				this.initializeModel(oNewPersistentData);

				// Note: when calling syncJsonModel2Table we need to ensure that we enrich oNewPersistentData with the
				// _oPersistentDataRestore (think of the example in which oNewPersistentData is empty then the table wouldn't be changed)
				var oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oNewPersistentData));
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataTotal);
				// old: this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", this.getModel().getData().persistentData);

				this._callControllers(this._oSettingCurrent, "reducePersistentModel");

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				this._oPersistentDataCurrentVariant = this._getPersistentDataCopy();
				// ??ER this._oPersistentDataCurrentVariant = Util.copy(oNewPersistentData); <---- should be the same as above ...

				// Note: since the consumer in this case also wants the change events, we do *not* update the
				// _oPersistentDataAlreadyKnown here
				// this._oPersistentDataAlreadyKnown = this._getPersistentDataCopy();
				break;

			case Controller.SyncReason.ResetModelData:

				this.initializeModel(this._oPersistentDataRestore);

				// Note: persistentData to table is not enough since we must first revert table back to restore version - remember
				// oNewPersistentData is restore!
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", Util.copy(this._oPersistentDataRestore));

				this._callControllers(this._oSettingCurrent, "reducePersistentModel");

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				this._oPersistentDataCurrentVariant = this._getPersistentDataCopy(); // ($)
				// ??ER this._oPersistentDataCurrentVariant = Util.copy(this._oPersistentDataRestore); <---- would not be correct if we have already
				// called setPersonalizationData and also set resetToInitialTableState to true (could not happen with SmartTable) because then our
				// variant info would get lost - also the coding ($) might not be OK (?)

				// Note: since the consumer in this case also want the change events, we do *not* update the
				// _oPersistentDataAlreadyKnown here
				// this._oPersistentDataAlreadyKnown = this._getPersistentDataCopy();
				break;

			case Controller.SyncReason.ResetModelDataVariant:

				this.initializeModel(this._oPersistentDataCurrentVariant);

				// Note: when calling syncJsonModel2Table we need to ensure that we enrich _oPersistentDataCurrentVariant with the
				// _oPersistentDataRestore (think of the example in which _oPersistentDataCurrentVariant is empty then the table wouldn't be
				// changed). This comment is similar to the one for "case Controller.SyncReason.ResetModelData:".
				var oPersistentDataCurrentVariantTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(this._oPersistentDataCurrentVariant));
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataCurrentVariantTotal);
				// this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", Util.copy(this._oPersistentDataCurrentVariant));

				this._callControllers(this._oSettingCurrent, "reducePersistentModel");

				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				// Note: since the consumer in this case also want the change events, we do *not* update the
				// _oPersistentDataAlreadyKnown here
				// this._oPersistentDataAlreadyKnown = this._getPersistentDataCopy();

				break;
		}
		this.getModel().refresh();
	};

	/**
	 * @param {object} oNewPersistentData for initializing the model
	 */
	Controller.prototype.initializeModel = function(oNewPersistentData) {
		if (!this.getModel()) {
			this._oModel = new sap.ui.model.json.JSONModel();
			this._oModel.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		}

		var oNewPersistentDataCopy = null;
		if (oNewPersistentData) {
			oNewPersistentDataCopy = Util.copy(oNewPersistentData);
		}

		var oCurrentPersistentData = oNewPersistentDataCopy || ((this.getModel().getData() && this.getModel().getData().persistentData) ? this.getModel().getData().persistentData : {});

		// Reduce persistent data to current setting
		for ( var type in oCurrentPersistentData) {
			if (!this._oSettingCurrent[type]) {
				delete oCurrentPersistentData[type];
			}
		}

		this.getModel().setData({
			transientData: {},
			persistentData: oCurrentPersistentData
		});

		this._callControllers(this._oSettingCurrent, "initializeModel", this.getModel());
	};

	/**
	 * Fire 'afterP13nModelDataChange' event with model data and change information.
	 * 
	 * @param {object} oChangeReason contains the reason why/what was changed, see: sap.ui.comp.personalization.Controller.ChangeReason
	 */
	Controller.prototype._fireChangeEvent = function(oChangeReason) {
		var oChangeInformation = {};
		// relevant change for consumer, delta : (restore + persistent) - oPersistentDataAlreadyKnown

		// oPersistentDataTotal : = restore + persistent, i.e. delta = oPersistentDataTotal - oPersistentDataAlreadyKnown
		var oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), this._getPersistentDataCopy());

		var oChangeType = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, Util.copy(this._oPersistentDataAlreadyKnown));
		if (!Util.hasChangedType(oChangeType)) {
			return;
		}

		if (oChangeReason === Controller.ChangeReason.ResetFull || oChangeReason === Controller.ChangeReason.ResetPartial) { // ||
			// oChangeReason
			// ===
			// sap.ui.comp.personalization.Controller.ChangeReason.SetPersonalizationDataCalled)
			// {
			oChangeInformation.changeReason = oChangeReason;
		}

		var oPersistentDataAlreadyKnownCopy = Util.copy(this._oPersistentDataAlreadyKnown);
		oChangeInformation.changeType = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, oPersistentDataAlreadyKnownCopy);
		oChangeInformation.changeData = this._callControllers(this._oSettingCurrent, "getChangeData", oPersistentDataTotal, oPersistentDataAlreadyKnownCopy);

		var oPersistentDataCurrentVariantTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(this._oPersistentDataCurrentVariant));

		oChangeInformation.changeTypeVariant = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, oPersistentDataCurrentVariantTotal);

		var oPersistentDataRestoreCopy = Util.copy(this._oPersistentDataRestore);
		oChangeInformation.persistentData = this._callControllers(this._oSettingCurrent, "getChangeData", oPersistentDataTotal, oPersistentDataRestoreCopy);

		this.fireAfterP13nModelDataChange(oChangeInformation);

		// calculate new version of 'AlreadyKnown' by adding above calculated 'small' delta to 'AlreadyKnown'
		this._oPersistentDataAlreadyKnown = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataAlreadyKnown), Util.copy(oChangeInformation.changeData));
	};

	/**
	 * In case of 'null' or undefined the state of the table is put back to the state at the time of the last setTable() call.
	 */
	Controller.prototype.resetPersonalization = function() {

		// TODO: compare with _handleDialogReset: make common method and parameter 'silent' 'isOpen'

		if (this.getResetToInitialTableState()) {
			this._masterSync(Controller.SyncReason.ResetModelData, null);
			this._fireChangeEvent(sap.ui.comp.personalization.Controller.ChangeReason.ResetFull);
		} else {
			this._masterSync(Controller.SyncReason.ResetModelDataVariant, null);
			this._fireChangeEvent(sap.ui.comp.personalization.Controller.ChangeReason.ResetPartial);
		}

/*
 * original coding: this._masterSync(Controller.SyncReason.ResetModelData, null); this._fireChangeEvent(Controller.ChangeReason.ResetFull); //
 * this._oPersistentDataAlreadyKnown is already set up to date in _fireChangeEvent()
 */

	};

	/**
	 * Get arguments of corresponding type
	 * 
	 * @param {array} aArgs contains all arguments wherein the search for type shall happen
	 * @param {string} sType is the type for that in arguments shall be searched
	 * @returns {array} aResult contains the identified arguments
	 */
	Controller.prototype._getArgumentsByType = function(aArgs, sType) {
		var aResult = [], oObject = null;

		if (aArgs && aArgs.length && sType) {
			aArgs.forEach(function(oArg) {
				if (oArg && oArg[sType] && typeof oArg[sType] !== "function") {
					oObject = {};
					oObject[sType] = oArg[sType];
					aResult.push(oObject);
				} else {
					aResult.push(oArg);
				}
			});
		}

		return aResult;
	};

	/**
	 * Call a method "sMethodName" of all controllers in generic way
	 * 
	 * @param {string} oSettings contains additional setting for execution of mini-controller methods
	 * @param {string} sMethodName that shall be executed in the mini-controller
	 * @returns {object} oResult contains the result of the called mini-controller method
	 */
	Controller.prototype._callControllers = function(oSettings, sMethodName) {
		var type = null, oSetting = null, oController = null, aArgsPartially = null;
		var oResults = {}, aArgs = Array.prototype.slice.call(arguments, 2);

		for (type in oSettings) {
			oSetting = oController = aArgsPartially = null;

			oSetting = oSettings[type];
			oController = oSetting.controller;
			if (!oController || !oSetting.visible || !oController[sMethodName]) {
				continue;
			}
			aArgsPartially = this._getArgumentsByType(aArgs, type);
			if (sMethodName === "getPanel") {
				aArgsPartially.push(oSetting.payload);
			}
			var oResult = oController[sMethodName].apply(oController, aArgsPartially);
			if (oResult !== null && oResult !== undefined) {
				if (oResult[type] !== undefined) {
					oResults[type] = oResult[type];
				} else {
					oResults[type] = oResult;
				}
			}
		}
		return oResults;
	};

	Controller.prototype._sanityCheck = function(oNewPersistentData) {
		// TODO: sanity check
		// Only allow the right format e.g. "sort.sortItems" but not "sort"
		if (!oNewPersistentData) {
			return false;
		}
		return true;
	};

	/**
	 * Cleans up before destruction.
	 */
	Controller.prototype.exit = function() {
		var type;

		// destroy dialog
		if (this._oDialog) {
			this._oDialog.destroy();
			this._oDialog = null;
		}

		// destroy controller
		this._callControllers(this._oSettingCurrent, "destroy");
		for (type in this._oSettingCurrent) {
			this._oSettingCurrent[type] = null;
		}
		this._oSettingCurrent = null;
		for (type in this._oSettingOriginal) {
			this._oSettingOriginal[type] = null;
		}
		this._oSettingOriginal = null;

		// destroy model and its data
		if (this.getModel()) {
			this.getModel().destroy();
			this._oModel = null;
		}
		this._oPersistentDataRestore = null;
		this._oPersistentDataCurrentVariant = null;
		this._oPersistentDataAlreadyKnown = null;
		this._oPersistentDataBeforeOpen = null;
		this._oPayload = null;
	};

	Controller.ChangeType = {
		// Not changed
		Unchanged: 0,
		// Change is applied to model but not applied to table
		ModelChanged: 1,
		// Change is applied to model and to table
		TableChanged: 2
	};

	Controller.SyncReason = {
		//
		NewTable: 0,
		// 
		NewSetting: 1,
		// 
		NewModelData: 2,
		//
		ResetModelData: 3,
		//
		ResetModelDataVariant: 4
	};

// Controller.ResetType = {
// // a reset back to Restore (i.e. the version of the table with which the controller was instantiated or via setter
// // updated) was triggered (either via API or via reset button)
// ResetFull: 0,
// // a reset back to the CurrentVariant was triggered (yet to be defined how this is triggered)
// ResetPartial: 1
// };

	Controller.ChangeReason = {
		// a reset back to Restore (i.e. the version of the table with which the controller was instantiated or via setter
		// updated) was triggered (either via API or via reset button)
		ResetFull: 0,
		// a reset back to the CurrentVariant was triggered (yet to be defined how this is triggered)
		ResetPartial: 1
	// // a new "variant" was set from outside, i.e. a call to setPersonalizationData was done
	// SetPersonalizationDataCalled: 2
	};

	/* eslint-enable strict */

	return Controller;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/Controller.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataControlFactory') ) {

/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Factory class to create controls that are hosted by <code>sap.ui.comp.SmartField</code>.
 * 
 * @public
 * @name sap.ui.comp.smartfield.ODataControlFactory
 * @author SAP SE
 * @version 1.28.1
 * @since 1.28.0
 * @param {jquery.sap.global} jQuery a reference to the jQuery implementation.
 * @param {sap.m.CheckBox} CheckBox a reference to the check box implementation.
 * @param {sap.m.ComboBox} ComboBox a reference to the combo box implementation.
 * @param {sap.m.DatePicker} DatePicker a reference to the DatePicker implementation.
 * @param {sap.m.FlexItemData} FlexItemData a reference to the FlexItemData implementation.
 * @param {sap.m.HBox} HBox a reference to the HBox implementation.
 * @param {sap.m.Input} Input a reference to the Input implementation.
 * @param {sap.m.Text} Text a reference to the Text implementation.
 * @param {sap.ui.comp.navpopover.SmartLink} SmartLink a reference to the smart link implementation.
 * @param {sap.ui.comp.smartfield.ControlFactoryBase} ControlFactoryBase a reference to the control factory base class implementation.
 * @param {sap.ui.comp.smartfield.FieldControl} FieldControl a reference to the field control implementation.
 * @param {sap.ui.comp.smartfield.ODataHelper} ODataHelper a reference to the OData helper implementation.
 * @param {sap.ui.comp.smartfield.ODataTypes} ODataTypes a reference to the OData types implementation.
 * @returns {sap.ui.comp.smartfield.ODataControlFactory} new control factory instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataControlFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataControlFactory",[	"jquery.sap.global", "sap/m/CheckBox", "sap/m/ComboBox", "sap/m/DatePicker", "sap/m/FlexItemData", "sap/m/HBox", "sap/m/Input", "sap/m/Text", "sap/ui/comp/navpopover/SmartLink", "sap/ui/comp/smartfield/ControlFactoryBase", "sap/ui/comp/smartfield/FieldControl", "sap/ui/comp/smartfield/ODataHelper", "sap/ui/comp/smartfield/ODataTypes" ], function(jQuery, CheckBox, ComboBox, DatePicker, FlexItemData, HBox, Input, Text, SmartLink, ControlFactoryBase, FieldControl, ODataHelper, ODataTypes) { // EXC_JSHINT_002 // EXC_JSHINT_037 // EXC_JSHINT_034
	"use strict";

	/**
	 * @public
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used.
	 * @param {sap.ui.core.Control} oParent the parent control.
	 * @param {object} oMetaData the meta data used to initialize the factory.
	 * @param {object} oMetaData.entitySet the name of the OData entity set.
	 * @param {object} oMetaData.model the name of the model.
	 * @param {object} oMetaData.path the path identifying the OData property.
	 */
	var ODataControlFactory = ControlFactoryBase.extend("sap.ui.comp.smartfield.ODataControlFactory", {
		constructor: function(oModel, oParent, oMetaData) {
			ControlFactoryBase.apply(this, [
				oModel, oParent
			]);
			this.sName = "ODataControlFactory";
			this._oMetaData = {
				annotations: {}
			};

			if (oModel) {
				this._oHelper = new ODataHelper(oModel);
			}

			this._oFieldControl = new FieldControl(oParent);
			this._oTypes = new ODataTypes(oParent);
			this._init(oMetaData);
			this._bInitialized = false;
			this._bMetaData = !oModel;
		}
	});

	/**
	 * Initializes the factory.
	 * 
	 * @param {object} oMetaData the meta data used to initialize the factory.
	 * @param {object} oMetaData.entitySet the name of the OData entity set.
	 * @param {object} oMetaData.entityType the name of the OData entity type.
	 * @param {object} oMetaData.property the name of the OData property.
	 * @param {object} oMetaData.model the name of the model.
	 * @param {object} oMetaData.path the path identifying the OData property.
	 * @private
	 */
	ODataControlFactory.prototype._init = function(oMetaData) {
		var oType, sPath, that = this;

		// set the name of the model used, binding path of the property (complex or simple) and entity set.
		this._oMetaData.model = oMetaData.model;
		this._oMetaData.path = oMetaData.path;
		this._oMetaData.namespace = oMetaData.namespace || this._oHelper.getNameSpace();
		this._oMetaData.entitySet = oMetaData.entitySetObject || this._oHelper.getEntitySet(oMetaData.entitySet.replace(this._oMetaData.namespace + ".", ""));

		// entity type.
		oType = oMetaData.entityType || this._oHelper.getEntityType(this._oMetaData.entitySet.entityType.replace(this._oMetaData.namespace + ".", ""));
		this._oMetaData.entityType = oType.type;
		this._oMetaData.typecount = oType.count;

		if (this._oHelper) {
			// get the property, considering navigation properties and complex types.
			if (!this._oHelper.checkNavigationProperty(this._oMetaData)) {
				this._oMetaData.property = this._oHelper.getProperty(oMetaData.path, this._oMetaData.namespace, oType.count);
			}

			// now get the remaining annotations, text, unit of measure and value list using the right path.
			if (this._oMetaData.navigationPath) {
				sPath = this._oMetaData.path.replace(this._oMetaData.navigationPath, "");
			} else {
				sPath = that._oMetaData.path;
			}

			this._oMetaData.annotations.text = this._oHelper.getTextProperty(this._oMetaData.property, sPath, this._oMetaData.namespace, this._oMetaData.typecount); // EXC_JSHINT_037
			this._oMetaData.annotations.uom = this._oHelper.getUnitOfMeasure(this._oMetaData.property, sPath, this._oMetaData.namespace, oType.count); // EXC_JSHINT_037
			this._oMetaData.annotations.valuelist = this._oHelper.getValueListAnnotation(this._oMetaData.namespace, this._oMetaData.entityType, this._oMetaData.property, this._oMetaData.property.typePath); // EXC_JSHINT_037
			this._oMetaData.annotations.lineitem = this._oHelper.oAnalyzer.getLineItemAnnotation(this._oMetaData.entitySet.entityType);
			this._oMetaData.annotations.semantic = this._oHelper.oAnalyzer.getSemanticObjectAnnotation(this._oMetaData.namespace + "." + this._oMetaData.entityType.name + "/" + this._oMetaData.property.property.name); // EXC_JSHINT_037
			this._oHelper.getUOMValueListAnnotation(this._oMetaData); // EXC_JSHINT_037
			this._oHelper.geValueListEntitySet(this._oMetaData);
		} else {
			this._oMetaData.modelObject = oMetaData.modelObject;
			this._oMetaData.property = oMetaData.property;
			this._oMetaData.annotations.text = oMetaData.annotations.text;
			this._oMetaData.annotations.uom = oMetaData.annotations.uom;
			this._oMetaData.annotations.valuelist = oMetaData.annotations.valuelist;
			this._oMetaData.annotations.lineitem = oMetaData.annotations.lineitem;
			this._oMetaData.annotations.semantic = oMetaData.annotations.semantic;
			this._oMetaData.annotations.valuelistuom = oMetaData.annotations.valuelistuom;
			this._oMetaData.annotations.valuelistentityset = oMetaData.annotations.valuelistentityset;
		}
	};

	/**
	 * Creates a control instance based on OData meta data for display-only use cases.
	 * 
	 * @returns {sap.m.Text} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDisplay = function() {
		var mAttributes, mOptions, mNames = {
			width: true,
			textAlign: true
		};

		// check for check box.
		if (this._checkCheckBox()) {
			return this._createCheckBox();
		}
		
		// prepare the attributes.
		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames);

		// check for date and format correctly.
		if (this._checkDatePicker()) {
			mOptions = this.getFormatSettings("dateFormatSettings");
			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property, mOptions, {
					displayFormat: "Date"
				})
			};
		} else {
			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._getEdmDisplayPath(),
				type: this._oTypes.getType(this._oMetaData.property)
			};
		}

		// create a text box.
		return {
			control: new Text(mAttributes),
			onCreate: "_onCreate",
			params: {
				noValidations: true
			}
		};
	};

	/**
	 * Calculates the binding path for the <code>text</code> property for the display use case. If a text annotation exists, it is considered,
	 * otherwise the binding path addresses the property.
	 * 
	 * @returns {string} the binding path.
	 * @private
	 */
	ODataControlFactory.prototype._getEdmDisplayPath = function() {
		if (this._oMetaData.annotations.text) {
			return this._oMetaData.path.replace(this._oMetaData.property.property.name, this._oMetaData.annotations.text.property.name);
		}

		return this._oMetaData.path;
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.String</code>. Either
	 * <code>sap.m.Input</code> is returned or <code>sap.m.Combobox</code> depending on configuration.
	 * 
	 * @returns {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmString = function() {
		var bNoValueHelp, bNoTypeAhead, mAttributes, oCheck, oControl, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		// check for combo box.
		oCheck = this._checkComboBox("input");

		if (oCheck.combobox) {
			return this._createComboBox({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			});
		}

		// check for check box.
		if (this._checkCheckBox()) {
			return this._createCheckBox();
		}
		
		// get the configuration properties.
		bNoValueHelp = !this._oParent.getShowValueHelp();
		bNoTypeAhead = !this._oParent.getShowSuggestion();

		// create the default control, sap.m.Input, respect constraints.
		mAttributes = this.createAttributes("value", this._oMetaData.property, mNames);

		// add optional upper case conversion.
		oControl = new Input(mAttributes);
		this._handleEventingForEdmString(oControl);

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: {
				valuehelp: {
					annotation: oCheck.annotation,
					noDialog: bNoValueHelp,
					noTypeAhead: bNoTypeAhead,
					aggregation: "suggestionRows"
				},
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Checks whether a configuration exists for the given SmartField. If this is the case the controlType property is a validated.
	 * 
	 * @param {string} sType the value of the type property to be checked against.
	 * @returns {boolean} <code>true</code>, if a configuration exists and the controlType property has the given value, <code>false</code>
	 *          otherwise.
	 * @private
	 */
	ODataControlFactory.prototype._checkConfig = function(sType) {
		var oConfig = this._oParent.getConfiguration();

		if (oConfig && oConfig.getControlType() === sType) {
			return true;
		}

		return false;
	};

	/**
	 * Event handler for live changes/changes on the input control. The live-change event handler ensures the value is always in upper case
	 * 
	 * @param {object} oControl attached either to liveChange or change event
	 * @private
	 */
	ODataControlFactory.prototype._handleEventingForEdmString = function(oControl) {
		var bUpperCase, that = this, bChangeNotFromFocusLost = false, bValueUpperChanged = false, bChangeOnEnter;

		var bKeyDown = false;

		if (oControl) {
			bUpperCase = this._oTypes.isDisplayFormatUpperCase(this._oMetaData.property);

			bChangeOnEnter = bUpperCase ? false : true;

			// handle focus lost
			oControl.attachBrowserEvent("focusout", function() {
				if (bValueUpperChanged) {
					oControl._lastValue = "";
					bChangeNotFromFocusLost = true;
				} else {
					/* eslint-disable no-lonely-if */
					if (bUpperCase) {
						bChangeNotFromFocusLost = false;
					} else {
						bChangeNotFromFocusLost = (bKeyDown) ? false : true;
					}
					/* eslint-enable no-lonely-if */
					//bChangeNotFromFocusLost = bUpperCase ? false : ((bKeyDown) ? false : true);
				}

			}).attachBrowserEvent("keydown", function(e) {
				if (e.which === 13) {
					bChangeOnEnter = true;
					bKeyDown = true;
				}
			}).attachBrowserEvent("keyup", function(e) {
				var sValue = oControl.getValue();

				bKeyDown = false;
				if (e.which === 13) {
					bValueUpperChanged = false;
					if (bChangeOnEnter) {
						try {
							that._oParent.fireChange({
								value: sValue,
								newValue: sValue
							});
						} catch (ex) {
							jQuery.sap.log.warning(ex);
						}
					}
				} else if (bUpperCase) {
					oControl.setValue(sValue.toUpperCase());
					bValueUpperChanged = true;
				}
				bChangeOnEnter = false;
			}).attachChange(function(oEvent) {
				try {
					if (oEvent.mParameters.validated || bChangeNotFromFocusLost) {

						bChangeOnEnter = false;
						bChangeNotFromFocusLost = false;
						bValueUpperChanged = false;

						that._oParent.fireChange({
							value: oEvent.mParameters.value,
							newValue: oEvent.mParameters.value,
							validated: oEvent.mParameters.validated
						});
					} else {
						bChangeOnEnter = true;
					}

				} catch (ex) {
					jQuery.sap.log.warning(ex);
				}
			});
		}
	};

	/**
	 * Creates an instance of <code>sap.m.Combobox</code> based on OData meta data.
	 * 
	 * @param {object} oValueHelp the value help configuration.
	 * @param {object} oValueHelp.annotation the value help annotation.
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted.
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted.
	 * @returns {sap.m.Combobox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createComboBox = function(oValueHelp) {
		var mAttributes, that = this, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames);
		mAttributes.selectionChange = function(oParam) {
			var oKey, oItem;

			try {
				oItem = oParam.getParameter("selectedItem");

				if (oItem && oItem.getKey) {
					oKey = oItem.getKey();
				}

				that._oParent.fireChange({
					value: oKey,
					newValue: oKey
				});
			} catch (ex) {
				jQuery.sap.log.warning(ex);
			}
		};
		mAttributes.selectedKey = {
			model: this._oMetaData.model,
			path: this._oMetaData.path,
			type: this._oTypes.getType(this._oMetaData.property)
		};
		
		// ensure that combo box always takes maximum width.
		if (mAttributes.width === "") {
			mAttributes.width = "100%";
		}

		return {
			control: new ComboBox(mAttributes),
			onCreate: "_onCreate",
			params: {
				valuehelp: {
					annotation: oValueHelp.annotation,
					aggregation: "items",
					noDialog: oValueHelp.noDialog,
					noTypeAhead: oValueHelp.noTypeAhead
				},
				getValue: "getSelectedKey",
				type: {
					type: mAttributes.selectedKey.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates an instance of <code>sap.m.CheckBox</code> based on OData meta data. The Edm.Type of the property is <code>Edm.String</code> with
	 * <code>maxLength</code> <code>1</code>.
	 * 
	 * @returns {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createCheckBox = function() {
		var mAttributes = this.createAttributes("selected", null, {}, {
			event: "select",
			parameter: "selected"
		});
		mAttributes.enabled = (this._oParent.getEditable() && this._oParent.getEnabled());
		mAttributes.selected.type = this._oTypes.getAbapBoolean();
		
		return {
			control: new CheckBox(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getSelected"
			}
		};
	};
	
	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.DateTime</code>. Either an instance of
	 * <code>sap.m.Input</code> is returned or <code>sap.m.DatePicker</code>, if the attribute <code>display-format</code> of the OData
	 * property the control is bound to has the value <code>Date</code> or the control configuration is accordingly.
	 * 
	 * @returns {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDateTime = function() {
		var mAttributes, mOptions, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames, {
			event: "change",
			parameter: "value"
		});
		mOptions = this.getFormatSettings("dateFormatSettings");

		// check whether a date picker has been configured.
		if (this._checkDatePicker()) {
			mAttributes.value = {
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property, mOptions, {
					displayFormat: "Date"
				}),
				model: this._oMetaData.model
			};

			// set display format to keep data type and date picker control "in sync".
			if (mOptions && mOptions.style) {
				mAttributes.displayFormat = mOptions.style;
			}

			return {
				control: new DatePicker(mAttributes),
				onCreate: "_onCreate",
				params: {
					getValue: "getValue",
					type: {
						type: mAttributes.value.type,
						property: this._oMetaData.property
					}
				}
			};
		}

		// create the default control.
		mAttributes.value = {
			path: this._oMetaData.path,
			model: this._oMetaData.model,
			type: this._oTypes.getType(this._oMetaData.property, mOptions)
		};

		return {
			control: new Input(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Checks whether a <code>sap.m.DatePicker</code> has to be created. The <code>display-format</code> is evaluated and the control
	 * configuration.
	 * 
	 * @returns {boolean} <code>true</code>, if a <code>sap.m.DatePicker</code> has to be created, <code>false</code> otherwise.
	 * @private
	 */
	ODataControlFactory.prototype._checkDatePicker = function() {
		// check the display-format annotation.
		if (this._oMetaData.property.extensions["sap:display-format"] === "Date") {
			return true;
		}

		// check the control configuration.
		return this._checkConfig("datePicker");
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.DateTimeOffset</code>.
	 * 
	 * @returns {sap.m.DatePicker} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDateTimeOffset = function() {
		var mOptions, mAttributes, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		mOptions = this.getFormatSettings("dateFormatSettings");
		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames, {
			event: "change",
			parameter: "value"
		});
		mAttributes.value = {
			model: this._oMetaData.model,
			path: this._oMetaData.path,
			type: this._oTypes.getType(this._oMetaData.property, mOptions)
		};

		return {
			control: new Input(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that is of a numeric <code>Edm type</code>.
	 * 
	 * @returns {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmNumeric = function() {
		var mAttributes, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames, {
			event: "change",
			parameter: "value"
		});
		mAttributes.value = {
			model: this._oMetaData.model,
			path: this._oMetaData.path,
			type: this._oTypes.getType(this._oMetaData.property)
		};
		return {
			control: new Input(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that represents a unit of measure.
	 * 
	 * @returns {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOM = function() {
		var sNoUnit, oInput, oText, mAttributes, oObject, mParams, that = this, fChange = function(oParam) {
			try {
				that._oParent.fireChange({
					value: oParam.mParameters.value,
					newValue: oParam.mParameters.value
				});
			} catch (ex) {
				jQuery.sap.log.warning(ex);
			}
		};

		// create the input for the amount.
		mAttributes = this._createEdmUOMAttributes(fChange);
		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);
		oInput = new Input(mAttributes);

		// if the unit is not to be displayed, just return the input for the amount.
		sNoUnit = this._oParent.data("suppressUnit");

		if (sNoUnit && sNoUnit === "true") {
			mParams = {
				getValue: "getValue"
			};

			// if not currency-code, the type has to be completed.
			if (!this._oMetaData.annotations.uom || this._oMetaData.annotations.uom.semantics !== "currency-code") {
				mParams.type = {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				};
			}

			return {
				control: oInput,
				onCreate: "_onCreate",
				params: mParams
			};
		}

		// create the attributes for the unit, including object binding, and the control for the unit.
		mAttributes = {
			value: {
				model: this._oMetaData.model,
				path: this._getUOMPath(this._oMetaData.path, this._oMetaData.property.property.name, this._oMetaData.annotations.uom),
				type: this._oTypes.getType(this._oMetaData.annotations.uom.property)
			},
			change: fChange,
			width: "5rem",
			textAlign: sap.ui.core.TextAlign.End
		};

		this.addObjectBinding(mAttributes, oObject);
		oText = new Input(mAttributes);
		this._handleEventingForEdmString(oText);

		// layout both controls.
		oInput.addStyleClass("smartFieldPaddingRight");
		oInput.setLayoutData(new FlexItemData({
			growFactor: 10
		}));
		oText.setLayoutData(new FlexItemData({
			shrinkFactor: 0
		}));

		// return amount and unit in a horizontal box.
		return {
			control: new HBox({
				justifyContent: sap.m.FlexJustifyContent.End,
				items: [
					oInput, oText
				],
				fitContainer: true,
				width: this._oParent.getWidth()
			}),
			onCreate: "_onCreateUOM",
			params: {
				getValue: true,
				valuehelp: true,
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.annotations.uom
				}
			}
		};
	};

	/**
	 * Creates the arguments for construction call for the unit of measure.
	 * 
	 * @param {function} fChange event handler for change event.
	 * @returns {map} the arguments for construction call for the unit of measure.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMAttributes = function(fChange) {
		var mAttributes = {
			textAlign: sap.ui.core.TextAlign.End,
			placeholder: this.getAttribute("placeholder"),
			name: this.getAttribute("name"),
			change: fChange
		};

		if (this._oMetaData.annotations.uom && this._oMetaData.annotations.uom.semantics === "currency-code") {
			mAttributes.value = {
				parts: [
					{
						path: this._oMetaData.path
					}, {
						path: this._getUOMPath(this._oMetaData.path, this._oMetaData.property.property.name, this._oMetaData.annotations.uom)
					}
				],
				model: this._oMetaData.model,
				type: this._oTypes.getCurrencyType(this._oMetaData.property)
			};
		} else {
			mAttributes.value = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property)
			};
		}

		return mAttributes;
	};

	/**
	 * Creates a control instance based on OData meta data to display a model property that represents a unit of measure.
	 * 
	 * @returns {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMDisplay = function() {
		var sNoUnit, oValue, oCurrency, sPath, oObject, mAttributes;

		// if the unit is not to be displayed, just return the text field for the amount.
		sNoUnit = this._oParent.data("suppressUnit");

		if (sNoUnit && sNoUnit === "true") {
			return this._createEdmDisplay();
		}

		// create the text field for the amount.
		sPath = this._getUOMPath(this._oMetaData.path, this._oMetaData.property.property.name, this._oMetaData.annotations.uom);
		mAttributes = {
			text: {
				parts: [
					{
						path: this._oMetaData.path,
						type: this._oTypes.getType(this._oMetaData.property)
					}, {
						path: sPath
					}
				],
				model: this._oMetaData.model,
				formatter: this._oTypes.getCurrencyDisplayFormatter(),
				useRawValues: true
			},
			textAlign: sap.ui.core.TextAlign.End
		};
		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);
		oValue = new Text(mAttributes);

		// create the text field for the unit.
		mAttributes = {
			text: {
				path: sPath
			},
			textAlign: sap.ui.core.TextAlign.End
		};
		this.addObjectBinding(mAttributes, oObject);
		oCurrency = new Text(mAttributes);

		// return amount and unit in a horizontal box.
		return {
			control: new HBox({
				justifyContent: sap.m.FlexJustifyContent.Left,
				items: [
					oValue, oCurrency
				],
				width: this._oParent.getWidth()
			})
		};
	};

	/**
	 * Calculates the binding path for the Unit of Measure text.
	 * 
	 * @param {string} sPropertyPath the path identifying the Unit of Measure property.
	 * @param {string} sPropertyName the name of the Unit of Measure property.
	 * @param {object} oUOM the Unit of Measure annotation.
	 * @returns {string} the binding path for the Unit of Measure text, which can be <code>null</code>.
	 * @private
	 */
	ODataControlFactory.prototype._getUOMPath = function(sPropertyPath, sPropertyName, oUOM) {
		var sPath = (oUOM.text && oUOM.text.name) ? oUOM.text.name : oUOM.unit;

		if (sPath) {
			return sPropertyPath.replace(sPropertyName, sPath);
		}

		return null;
	};

	/**
	 * Creates a control instance based on OData meta data.
	 * 
	 * @returns {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmSemantic = function() {
		var sPath, oInfo = this._oParent.getBindingInfo("value");
		sPath = oInfo.parts[0].path;

		var sLabel = this._oMetaData.property.property.fieldLabel;
		if (this._oMetaData.annotations.lineitem && this._oMetaData.annotations.lineitem.labels && this._oMetaData.annotations.lineitem.labels[sPath]) {
			sLabel = this._oMetaData.annotations.lineitem.labels[sPath];
		}

		return {
			control: new SmartLink({
				semanticObject: this._oMetaData.annotations.semantic.semanticObject,
				semanticObjectLabel: sLabel,
				fieldName: sPath,
				text: {
					path: sPath,
					model: this._oMetaData.model
				},
				width: this.getAttribute("width"),
				createControlCallback: jQuery.proxy(function() {
					var oControl = this.createControl(true);
					if (oControl) {
						return oControl.control;
					}
					return null;
				}, this)
			}),
			onCreate: "_onCreate",
			params: {
				getValue: "getInnerControlValue"
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that is of type <code>Edm.Boolean</code>
	 * 
	 * @returns {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmBoolean = function() {
		var mAttributes, oCheck;
		
		oCheck = this._checkComboBox();

		if (oCheck.combobox) {
			return this._createComboBox({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			});
		}

		mAttributes = this.createAttributes("selected", this._oMetaData.property, {}, {
			event: "select",
			parameter: "selected"
		});
		mAttributes.enabled = (this._oParent.getEditable() && this._oParent.getEnabled());
		
		return {
			control: new CheckBox(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getSelected"
			}
		};
	};

	/**
	 * Checks whether a combo-box should be displayed.
	 * 
	 * @param {string} sType optional control type to overwrite value list annotation
	 * @returns {object} a flag indicating whether a combo-box should be displayed and the value list annotation to use the control to be created
	 *          regardless of whether a combo-box has to be created or not.
	 * @private
	 */
	ODataControlFactory.prototype._checkComboBox = function(sType) {
		var mAttributes, oResult = {};

		// no annotation means no combo box in any case.
		if (this._oMetaData.annotations.valuelist && this._oMetaData.annotations.valuelist.primaryValueListAnnotation) {
			oResult.annotation = this._oMetaData.annotations.valuelist;
		}

		if (!oResult.annotation) {
			return oResult;
		}

		// overwrite the behavior optionally.
		if (sType && this._checkConfig(sType)) {
			return oResult;
		}

		//check semantics attribute on entity set.
		if (this._oHelper && this._oMetaData.annotations.valuelistentityset) {
			mAttributes = this._oHelper.getAttributes(this._oMetaData.annotations.valuelistentityset, "extensions", {
				"semantics": "http://www.sap.com/Protocols/SAPData"
			});
		}

		if (mAttributes && mAttributes.semantics === "fixed-values") {
			oResult.combobox = true;
		}

		// check configuration to find out whether a combo box should be created.
		if (!oResult.combobox) {
			oResult.annotation = this._oMetaData.annotations.valuelist;
			oResult.combobox = this._checkConfig("dropDownList");
		}

		return oResult;
	};

	/**
	 * Returns <code>true</code>, if a check box has to be rendered. The prerequisite is a property of Edm.type string with a maximum length of 1.
	 * Additionally the control has to be configured as a check box. 
	 * 
	 * @returns {boolean} <code>true</code>, if a check box has to be rendered <code>false</code> otherwise, 
	 * @private
	 */
	ODataControlFactory.prototype._checkCheckBox = function() {
		var oBind, iMaxLength;
		
		if (this._oMetaData.property.property.type === "Edm.String") {
			oBind = this._oParent.getBindingInfo("value");
			iMaxLength = this._oTypes.getMaxLength(this._oMetaData.property, oBind);
			
			if (iMaxLength === 1) {
				if (this._checkConfig("checkBox")) {
					return true;
				}				
			}
		}
	
		return false;
	};
	
	/**
	 * Returns the name of a method to create a control.
	 * 
	 * @param {boolean} bBlockSmartLinkCreation if true, SmartLink will not be created
	 * @returns {string} the name of the factory method to create the control.
	 * @private
	 */
	ODataControlFactory.prototype._getCreator = function(bBlockSmartLinkCreation) {
		var mMethods = {
			"Edm.Decimal": "_createEdmNumeric",
			"Edm.Double": "_createEdmNumeric",
			"Edm.Float": "_createEdmNumeric",
			"Edm.Single": "_createEdmNumeric",
			"Edm.Int16": "_createEdmNumeric",
			"Edm.Int32": "_createEdmNumeric",
			"Edm.Int64": "_createEdmNumeric",
			"Edm.Byte": "_createEdmNumeric",
			"Edm.DateTimeOffset": "_createEdmDateTimeOffset",
			"Edm.DateTime": "_createEdmDateTime",
			"Edm.Boolean": "_createEdmBoolean",
			"Edm.String": "_createEdmString"
		};

		// check for semantic annotation.
		if (this._oMetaData.annotations && this._oMetaData.annotations.semantic && !bBlockSmartLinkCreation) {
			return "_createEdmSemantic";
		}

		// check for display mode.
		if (!this._oParent.getEditable() || !this._oParent.getEnabled()) {
			if (this._oMetaData.annotations && this._oMetaData.annotations.uom) {
				return "_createEdmUOMDisplay";
			}

			return (this._oMetaData.property.property.type === "Edm.Boolean") ? "_createEdmBoolean" : "_createEdmDisplay";
		}

		// check for unit of measure.
		if (this._oMetaData.annotations && this._oMetaData.annotations.uom) {
			return "_createEdmUOM";
		}

		// check by EdmType.
		return mMethods[this._oMetaData.property.property.type] || "_createEdmString";
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 * 
	 * @param {sap.ui.core.Control} oControl the new control.
	 * @param {map} mParams parameters to further define the behavior of the event handler.
	 * @param {function} mParams.getValue optional call-back to get the current value from the current control.
	 * @param {boolean} mParams.valuehelp if set to <code>true</code> a possibly existing value help is attached to the new control.
	 * @private
	 */
	ODataControlFactory.prototype._onCreate = function(oControl, mParams) {
		var sGetValue, fControl, bValidations = true;

		if (mParams) {
			// check for validation.
			if (mParams.noValidation) {
				bValidations = false;
			}

			// add optional value help.
			if (mParams.valuehelp) {
				this._getValueHelpDialogTitle(mParams.valuehelp);
				this.addValueHelp(oControl, this._oMetaData.property.property, mParams.valuehelp, this._oModel || this._oMetaData.modelObject);
			}

			// add optional getValue call-back.
			if (mParams.getValue) {
				sGetValue = mParams.getValue;
				mParams.getValue = function() {
					return oControl[sGetValue]();
				};
			}

			//complete the data: add field-control.
			if (mParams.type) {
				fControl = this._oFieldControl.getMandatoryCheck(mParams.type.property);

				if (fControl) {
					mParams.type.type.oFieldControl = fControl;
				}
			}
		}

		// add optional validations.
		if (bValidations) {
			this.addValidations(oControl, "setSimpleClientError");
		}
	};

	/**
	 * Calculates the title for the value help dialog.
	 * 
	 * @param {object} oValueHelp the value help configuration.
	 * @param {object} oValueHelp.annotation the value help annotation.
	 * @param {string} oValueHelp.aggregation the aggregation to attach the value list to.
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted.
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted.
	 * @param {string} oValueHelp.dialogtitle title for the value help dialog.
	 * @private
	 */
	ODataControlFactory.prototype._getValueHelpDialogTitle = function(oValueHelp) {
		var mAttributes, sLabel;

		sLabel = this._oParent.getTextLabel();

		if (sLabel) {
			oValueHelp.dialogtitle = sLabel;
		} else {
			if (this._oHelper) {
				mAttributes = this._oHelper.getAttributes(this._oMetaData.property.property, "extensions", {
					"label": "http://www.sap.com/Protocols/SAPData"
				});
			}

			if (mAttributes && mAttributes.label) {
				oValueHelp.dialogtitle = mAttributes.label;
			} else {
				oValueHelp.dialogtitle = this._oMetaData.property.property.name;
			}
		}
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 * 
	 * @param {sap.ui.core.Control} oControl the new control.
	 * @param {map} mParams parameters to further define the behavior of the event handler.
	 * @param {function} mParams.getValue optional call-back to get the current value from the current control.
	 * @param {boolean} mParams.valuehelp if set to <code>true</code> a possibly existing value help is attached to the new control.
	 * @private
	 */
	ODataControlFactory.prototype._onCreateUOM = function(oControl, mParams) {
		var aItems, oValueHelp, fControl, sMethod, len;

		// add validations to both nested controls.
		aItems = oControl.getItems();
		len = aItems.length;

		while (len--) {
			if (len === 0) {
				sMethod = "setComplexClientErrorFirstOperand";
			} else {
				sMethod = "setComplexClientErrorSecondOperand";
			}

			this.addValidations(aItems[len], sMethod);
		}

		// add optional value help.
		if (mParams.valuehelp) {
			oValueHelp = {
				annotation: this._oMetaData.annotations.valuelistuom,
				aggregation: "suggestionRows"
			};
			this._getValueHelpDialogTitle(oValueHelp);
			this.addValueHelp(aItems[1], this._oMetaData.annotations.uom.property.property, oValueHelp, this._oModel || this._oMetaData.modelObject);
		}

		// add optional value call-back.
		if (mParams && mParams.getValue) {
			mParams.getValue = function() {
				return aItems[0].getValue();
			};
		}

		// add optional unit of measure call-back.
		mParams.uom = function() {
			return aItems[1].getValue();
		};

		mParams.uomset = function(sValue) {
			aItems[1].setValue(sValue);
		};

		//complete the data: add field-control.
		if (mParams.type) {
			fControl = this._oFieldControl.getMandatoryCheck(mParams.type.property.property);

			if (fControl) {
				mParams.type.type.oFieldControl = fControl;
			}
		}
	};

	/**
	 * Binds the properties of the control to formatter functions.
	 * 
	 * @public
	 */
	ODataControlFactory.prototype.bind = function() {
		var that = this, mNames;

		// in case of table there is no need to bind visible and mandatory properties.
		if (this._oParent.data("configdata")) {
			mNames = {
				enabled: true
			};
		} else {
			mNames = {
				enabled: true,
				visible: true,
				mandatory: true
			};
		}

		if (!this._bInitialized) {
			this._bInitialized = true;

			if (this._bMetaData || this._oModel.oMetadata.bLoaded) {
				this._bind(mNames);
			} else {
				this._oModel.getMetaModel().loaded().then(function() {
					that._bind(mNames);
				});
			}
		}
	};

	/**
	 * Replaces the given bindings by formatter functions.
	 * 
	 * @param {map} mBindings current bindings on <code>SmartField</code>.
	 * @private
	 */
	ODataControlFactory.prototype._bind = function(mBindings) {
		var n, oFormatter, mFormatters, aParts;

		mFormatters = this._oFieldControl.getControlProperties(this._oMetaData, mBindings);

		for (n in mFormatters) { // EXC_JSHINT_041
			oFormatter = mFormatters[n];

			if (oFormatter) {
				aParts = oFormatter.path();

				if (aParts.length > 0) {
					this._oParent.bindProperty(n, {
						parts: aParts,
						model: this._oMetaData.model,
						formatter: oFormatter.formatter
					});
				} else {
					this._oParent.bindProperty(n, {
						path: "",
						model: this._oMetaData.model,
						formatter: oFormatter.formatter
					});
				}
			}
		}

		// notify that the meta data are available
		this._oParent.fireInitialise();
	};

	/**
	 * Returns the property of the oData
	 * 
	 * @returns {object} the oData property
	 * @public
	 */
	ODataControlFactory.prototype.getDataProperty = function() {
		return this._oMetaData.property;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ODataControlFactory.prototype.destroy = function() {
		this._oFieldControl.destroy();
		this._oTypes.destroy();

		if (!this._bMetaData) {
			this._oHelper.destroy();
		}

		this._oHelper = null;
		this._oFieldControl = null;
		this._oTypes = null;
		this._oMetaData = null;

		ControlFactoryBase.prototype.destroy.apply(this, []);
	};

	return ODataControlFactory;
}, true);

}; // end of sap/ui/comp/smartfield/ODataControlFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.SmartField.
jQuery.sap.declare('sap.ui.comp.smartfield.SmartField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ValidateException'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartField",[ "jquery.sap.global", "sap/ui/comp/library", "./JSONControlFactory", "./ODataControlFactory", "sap/ui/core/Control", "sap/ui/model/ParseException", "sap/ui/model/ValidateException" ], function(jQuery, library, JSONControlFactory, ODataControlFactory, Control, ParseException, ValidateException) { //EXC_JSHINT_034  //EXC_JSHINT_037
	"use strict";
	

	/**
	 * Constructor for a new smartfield/SmartField.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartField Control is a wrapper for other controls. It interprets OData meta data to determine the control that has to be
	 *        instantiated. The OData entity is deduced from the control's binding context. The OData entity's property that is changed or
	 *        displayed with the control is deduced from the control's value property. The control's value property can also be bound to a
	 *        property of a JSON model. In this case the SmartField uses its jsontype property to determine the control to be created.
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.SmartField
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartField = Control.extend("sap.ui.comp.smartfield.SmartField", /** @lends sap.ui.comp.smartfield.SmartField.prototype */ { metadata : {
		library : "sap.ui.comp",
		properties : {
			/**
			 * The Value Property holds the current value of the control. If a binding expression is configured, this is used to determine the property of an OData entity.
			 */
			value : {type : "any", group : "Misc", defaultValue : null},
	
			/**
			 * Enabled Property
			 */
			enabled : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * The name of entity set for which the control manages values. This is an optional property.
			 */
			entitySet : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Sets the control into an editable mode or a display mode.
			 */
			editable : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * The width can be set to an absolute value.
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
	
			/**
			 * Horizontal alignment of the text.
			 */
			textAlign : {type : "sap.ui.core.TextAlign", group : "Misc", defaultValue : null},
	
			/**
			 * Text shown when no value available.
			 */
			placeholder : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * To be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
			 */
			name : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Visualizes warnings or errors.
			 */
			valueState : {type : "sap.ui.core.ValueState", group : "Appearance", defaultValue : sap.ui.core.ValueState.None},
	
			/**
			 * The text which is shown in the value state message popup.
			 */
			valueStateText : {type : "string", group : "Appearance", defaultValue : null},
	
			/**
			 * The text which is shown in the value state message popup.
			 */
			showValueStateMessage : {type : "boolean", group : "Appearance", defaultValue : true},
	
			/**
			 * Data types to be used, if the SmartField is working with a JSON model. ; so if the value property of the control is
			 * bound to a property of an OData entity set, this property is not considered.
			 */
			jsontype : {type : "sap.ui.comp.smartfield.JSONType", group : "Misc", defaultValue : null},
	
			/**
			 * Mandatory property.
			 */
			mandatory : {type : "boolean", group : "Misc", defaultValue : false},
	
			/**
			 * Maximum number of characters. Value '0' means the feature is switched off.
			 */
			maxLength : {type : "int", group : "Misc", defaultValue : 0},
	
			/**
			 * If this is set to true, the suggestion feature for a hosted control is enabled, if the hosted control supports it.
			 */
			showSuggestion : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * If set to true, a value help indicator will be displayed inside the hosted control, if the hosted control supports this.
			 */
			showValueHelp : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * If set to false the label is not displayed.
			 */
			showLabel : {type : "boolean", group : "Appearance", defaultValue : true},
	
			/**
			 * This property allows to handle the text of an associated smart label.
			 */
			textLabel : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * This property allows to handle the tool tip of the associated smart label.
			 */
			tooltipLabel : {type : "string", group : "Misc", defaultValue : null}
		},
		aggregations : {
			/**
			 * Content Aggregation.
			 */
			_content : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
	
			/**
			 * Optional configuration for SmartField.
			 */
			configuration : {type : "sap.ui.comp.smartfield.Configuration", multiple : false}
		},
		events : {
			/**
			 * The OData entity set is either deduced from the control's binding context or from control's entity set property, if a
			 * value for it is specified. In both cases this event is raised.
			 */
			entitySetFound : {}, 
	
			/**
			 * Event is fired when the text in the field has changed and the focus leaves the TextField or the Enter key is pressed.
			 */
			change : {}, 
	
			/**
			 * Event fired when the smart field is initialized and the metadata obtained
			 */
			initialise : {},
			
			/**
			 * The event is fired, if the visibility of the control has changed.
			 */
			visibleChanged: {}
		}
	}});
	
	/**
	 * Returns the Edm data type of either the OData property to which the value property of the control is bound or the data 
	 * type of the attribute in the JSON model used. If no model is available null is returned.
	 *
	 * @name sap.ui.comp.smartfield.SmartField#getDataType
	 * @function
	 * @type string
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	/**
	 * If the OData property the control's value property is bound to semantically represents a unit of measure the value of the current unit of measure is returned. Otherwise null is returned.
	 *
	 * @name sap.ui.comp.smartfield.SmartField#getUnitOfMeasure
	 * @function
	 * @type string
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	/**
	 * If the OData property the control's value property is bound to semantically represents a unit of measure the value of the current unit of measure can be changed.
	 *
	 * @name sap.ui.comp.smartfield.SmartField#setUnitOfMeasure
	 * @function
	 * @param {string} sSUnit
	 *         The new unit of measure to be set.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	SmartField.prototype.init = function() {
		this._oFactory = null;
		this._oControl = {
			display: null,
			edit: null,
			current: null
		};
		this._oValue = {
			display: null,
			edit: null,
			uom: null,
			uomset: null
		};
		this._oError = {
			bComplex: false,
			bFirst: false,
			bSecond: false
		};
		this._oValueBind = null;
	};
	
	/**
	 * Setter for property <code>visible</code>. Default value is <code>true</code>.
	 * 
	 * @param {boolean} bValue new value for property <code>editable</code>.
	 * @param {boolean} bSuppressInvalidate if <code>true</code>, the managed object is not marked as changed
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartField.prototype.setVisible = function(bValue, bSuppressInvalidate) {  //EXC_JSHINT_002
		Control.prototype.setVisible.apply(this, arguments);
		this.fireVisibleChanged({
			visible: bValue
		});
		return this;
	};
	
	/**
	 * Setter for property <code>editable</code>. Default value is <code>false</code>.
	 * 
	 * @param {boolean} bValue new value for property <code>editable</code>.
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartField.prototype.setEditable = function(bValue) {
		this.setProperty("editable", bValue, true);
		this._toggleControl();
		return this;
	};
	
	/**
	 * Setter for property <code>entitySet</code>. Default value is <code>undefined</code>.
	 * 
	 * @param {string} sValue new value for property <code>entitySet</code>.
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartField.prototype.setEntitySet = function(sValue) {
		this.setProperty("entitySet", sValue, true);
		this.fireEntitySetFound({
			entitySet: sValue
		});
		return this;
	};
	
	/**
	 * Setter for property <code>enabled</code>. Default value is <code>true</code>.
	 * 
	 * @param {boolean} bValue new value for property <code>enabled</code>.
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartField.prototype.setEnabled = function(bValue) {
		this.setProperty("enabled", bValue, true);
		this._toggleControl();
		return this;
	};
	
	/**
	 * Returns the value for the <code>value</code> property .
	 * 
	 * @return {any} the value of the property
	 * @public
	 */
	SmartField.prototype.getValue = function() {
		var sProp, fProp;
	
		// as two-way-binding cannot be assumed to be a prerequisite,
		// check for a call-back and return the current value.
		sProp = this._getMode();
		fProp = this._oValue[sProp];
	
		if (fProp) {
			return fProp();
		}
	
		// as fall-back return the property value.
		return this.getProperty("value");
	};
	
	/**
	 * Updates the binding context of this object and all aggregated children.
	 * 
	 * @param {boolean} bSkipLocal if set to <code>true</code>, the binding context of this object is not updated, possible aggregated children are
	 *        considered.
	 * @param {boolean} bSkipChildren if set to <code>true</code>, the binding context of aggregated children is not updated.
	 * @param {string} sModelName the optional name of a specific model to update.
	 * @param {boolean} bUpdateAll if set to <code>true</code>, all known models are used for the update.
	 * @private
	 */
	SmartField.prototype.updateBindingContext = function(bSkipLocal, bSkipChildren, sModelName, bUpdateAll) {
		this._init(sModelName);
	
		if (this._oFactory) {
			if (this._oFactory.bind) {
				this._oFactory.bind();
			} else {
				this._toggleControl();
			}
		}
	
		Control.prototype.updateBindingContext.apply(this, [
			bSkipLocal, bSkipChildren, sModelName, bUpdateAll
		]);
	};
	
	/**
	 * Returns the current SmartField's edit mode
	 * 
	 * @returns {string} returns "edit" or "display"
	 * @private
	 */
	SmartField.prototype._getMode = function() {
		return this.getEditable() && this.getEnabled() ? "edit" : "display";
	};
	
	/**
	 * Sets the current control, depending on <code>displayMode</code> and the binding of the <code>value</code> property of the current control. If
	 * necessary a control is created.
	 * 
	 * @private
	 */
	SmartField.prototype._toggleControl = function() {
		var sMode, oValue, bCreate = true;

		sMode = this._getMode();
	
		if (sMode === "edit") { // always create control if in edit mode
			// _createControl sets the current mode.
			this._createControl(sMode);
		} else {
			oValue = this.getValue();
			
			// optimization for table use cases only.
			// if it is not a table, no configuration data set.
			if (this.data("configdata")) {
				if (oValue === null || oValue === "") {
					bCreate = false;
				}
			}
			
			if (bCreate) { // in display mode, only create control if value is not empty
				// _createControl sets the current mode.
				this._createControl(sMode);
			} else {
				this.setAggregation("_content", null); // if value is empty, our content has to be null
				// better set the current mode, otherwise toggling gets out-of-sync.
				this._oControl.current = "display";
			}
		}
	};
	
	/**
	 * Setter for property <code>value</code>. Default value is <code>true</code>.
	 * 
	 * @param {object} oValue new value for property <code>value</code>.
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartField.prototype.setValue = function(oValue) {
		var oReturnValue = this.setProperty("value", oValue);
		this._toggleControl();
	
		return oReturnValue;
	};
	
	/**
	 * Creates the actual control depending on the current edit mode and sets it to the SmartField's content
	 * 
	 * @param {string} sMode the current edit mode, either "edit" or "display"
	 * @private
	 */
	SmartField.prototype._createControl = function(sMode) {
		var oControl;
	
		if (this._oFactory) {
			if (sMode !== this._oControl.current || !this._oControl[sMode]) {
				if (!this._oControl[sMode]) {				
					// create the control and set it.
					oControl = this._oFactory.createControl();
					this._oControl[sMode] = oControl.control;
	
					// set the value call-back.
					if (oControl.params && oControl.params.getValue) {
						this._oValue[sMode] = oControl.params.getValue;
					}
	
					// set the unit-of-measure-get call-back.
					if (oControl.params && oControl.params.uom) {
						this._oValue.uom = oControl.params.uom;
					}
	
					// set the unit-of-measure-set call-back.
					if (oControl.params && oControl.params.uomset) {
						this._oValue.uomset = oControl.params.uomset;
					}
				}
	
				// set the content.
				this._oControl.current = sMode;
				this.setAggregation("_content", this._oControl[sMode]);
			}
		}
	};
	
	/**
	 * Initializes the control, if it has not already been initialized.
	 * 
	 * @param {string} sModelName the name of the model currently used.
	 * @private
	 */
	SmartField.prototype._init = function(sModelName) {
		var oModel, oBindingInfo, oConfig;
	
		if (!this._oFactory) {
			oBindingInfo = this._getBindingInfo(sModelName, "value");
	
			if (oBindingInfo) {
				oConfig = this.data("configdata");
	
				if (!oConfig) {
					oModel = this.getModel(sModelName);
				}
	
				if (oConfig || oModel) {
					this._oFactory = this._createFactory(sModelName, oModel, oBindingInfo, oConfig);
				}
			}
		}
	};
	
	/**
	 * Creates the control factory and returns it. If the variable <code>oModel</code> is <code>null</code> or <code>undefined</code>,
	 * <code>null</code> is returned.
	 * 
	 * @param {string} sModelName the name of the model currently used.
	 * @param {sap.ui.model.Model} oModel the model currently used.
	 * @param {object} oBindingInfo the binding information from the control for the <code>value</code> property.
	 * @param {object} oConfig optional control configuration.
	 * @returns {sap.ui.comp.smartfield.ControlFactoryBase} the new control factory instance.
	 * @private
	 */
	SmartField.prototype._createFactory = function(sModelName, oModel, oBindingInfo, oConfig) {
		var sEntitySet, oParam;
	
		// check whether JSONControlFactoryl can be created.
		if (oModel && oModel instanceof sap.ui.model.json.JSONModel) {
			return new JSONControlFactory(oModel, this, {
				model: sModelName,
				path: oBindingInfo.path
			});
		}
	
		// check whether ODataControlFactory can be created.
		if (!oConfig) {
			sEntitySet = this._getEntitySet(sModelName);
		}
	
		if (sEntitySet || oConfig) {
			if (oConfig) {
				oParam = oConfig.configdata;
			} else {
				oParam = {
					entitySet: sEntitySet,
					model: sModelName,
					path: oBindingInfo.path
				};
			}
	
			return new ODataControlFactory(oModel, this, oParam);
		}
	
		return null;
	};
	
	/**
	 * Calculates the <code>entitySet</code> that is interpreted by this control. The calculation uses either the <code>bindingContext</code> of this
	 * control or alternatively the property <code>entitySet</code>.
	 * 
	 * @param {string} sModelName the name of the model currently used.
	 * @returns {string} the <code>entitySet</code> that is interpreted by this control.
	 * @private
	 */
	SmartField.prototype._getEntitySet = function(sModelName) {
		var oBindingContext, sEntitySet;
	
		// check the entity set property.
		sEntitySet = this.getEntitySet();
	
		if (sEntitySet && !sModelName) {			
			return sEntitySet;
		}
	
		// take the entity set from the binding context.
		oBindingContext = this.getBindingContext(sModelName);
	
		if (oBindingContext) {			
			// check for a defective binding.
			if (!oBindingContext.sPath || (oBindingContext.sPath && oBindingContext.sPath === "/undefined")) {				
				return null;
			}
			
			sEntitySet = this._parseEntity(oBindingContext);
			this.fireEntitySetFound({
				entitySet: sEntitySet
			});
			
			return sEntitySet;
		}
	
		return null;
	};
	
	/**
	 * Calculates the name of the OData entity or entity set a binding context points to.
	 * 
	 * @param {object} oContext the binding context of a control.
	 * @returns {string} name of the OData entity or entity set a binding context points to.
	 * @private
	 */
	SmartField.prototype._parseEntity = function(oContext) {
		var oRegExp, aMatches, sEntity;
	
		oRegExp = /\((.+)\)/;
		aMatches = oRegExp.exec(oContext.sPath);
	
		if (aMatches) {
			sEntity = oContext.sPath.replace(aMatches[0], "");
		} else {
			sEntity = oContext.sPath;
		}
	
		return sEntity.replace("/", "");
	};
	
	/**
	 * Returns the binding information for the given property or aggregation. The binding information contains information about path, binding object,
	 * format options, sorter, filter etc. for the property or aggregation.
	 * 
	 * @param {string} sModel the optional name of a specific model to update.
	 * @param {string} sName the name of the property or aggregation
	 * @returns {object} binding information of the value binding of this control, if the model is the appropriate one, <code>null</code> otherwise.
	 * @private
	 */
	SmartField.prototype._getBindingInfo = function(sModel, sName) {
		if (!this._oValueBind) {
			this._oValueBind = this.getBindingInfo(sName);
	
			try {
				this._oValueBind = this._oValueBind.parts[0];
			} catch (ex) {
			}
		}
	
		if (this._oValueBind) {
			if (!this._oValueBind.model && !sModel) {
				return this._oValueBind;
			}
	
			if (this._oValueBind.model === sModel) {
				return this._oValueBind;
			}
		}
	
		return null;
	};
	
	/**
	 * Message handling.
	 * @param {string} sName The Property Name.
	 * @param {array} aMessages Array of Messages.
	 */	
	SmartField.prototype.updateMessages = function(sName, aMessages) {
		if (aMessages && aMessages.length > 0) {
			this.setValueState(aMessages[0].type);
			this.setValueStateText(aMessages[0].message);
		} else {
			this.setValueState(sap.ui.core.ValueState.None);
			this.setValueStateText("");
		}
	};
	
	/**
	 * Returns the EDM data type of either the OData property to which the value property of the control is bound or the data type of the attribute in the
	 * JSON model used. If no model is available null is returned.
	 * 
	 * @returns {string} the data type to which the value property is bound.
	 * @public
	 */
	SmartField.prototype.getDataType = function() {
		var oProp;
	
		if (this._oFactory) {
			// only ODataControlFactory has the method getDataType.
			if (this._oFactory.getDataProperty) {
				oProp = this._oFactory.getDataProperty();
	
				if (oProp) {
					return oProp.property.type;
				}
			}
	
			return this.getJsonType();
		}
	
		return null;
	};
	
	/**
	 * Returns the property of the oData.
	 * 
	 * @returns {object} the oData property.
	 * @public
	 */
	SmartField.prototype.getDataProperty = function() {
		if (this._oFactory) {
			// only ODataControlFactory has the method getDataProperty.
			if (this._oFactory.getDataProperty) {
				return this._oFactory.getDataProperty();
			}
	
			return null;
		}
	
		return null;
	};
	
	/**
	 * If the OData property the control's value property is bound to semantically represents a unit of measure, the value of the current unit of measure
	 * is returned; otherwise <code>null</code> is returned.
	 * 
	 * @returns {any} the current unit of measure is returned, which can be <code>null</code.
	 * @public
	 */
	SmartField.prototype.getUnitOfMeasure = function() {
		if (this._oValue.uom) {
			return this._oValue.uom();
		}
	
		return null;
	};
	
	/**
	 * If the OData property the control's value property is bound to semantically represents a unit of measure the value of the current unit of measure
	 * can be changed.
	 * 
	 * @param {string} sUnit the new unit of measure to be set.
	 * @public
	 */
	SmartField.prototype.setUnitOfMeasure = function(sUnit) {
		if (sUnit && this._oValue.uomset) {
			this._oValue.uomset(sUnit);
		}
	};

	/**
	 * Setter method to mark the smart field as having a client error.
	 * 
	 * @param {boolean} bError if set to <code>true</code> the field is marked as having an error.
	 * @public
	 */
	SmartField.prototype.setSimpleClientError = function(bError) {
		this._oError.bFirst = bError;
	};
	
	/**
	 * Setter method to mark the smart field as having a client error.
	 * 
	 * @param {boolean} bError if set to <code>true</code> the field is marked as having an error.
	 * @public
	 */
	SmartField.prototype.setComplexClientErrorFirstOperand = function(bError) {
		this._oError.bComplex = true;
		this._oError.bFirst = bError;
	};
	
	/**
	 * Setter method to mark the smart field as having a client error.
	 * 
	 * @param {boolean} bError if set to <code>true</code> the field is marked as having an error.
	 * @public
	 */
	SmartField.prototype.setComplexClientErrorSecondOperand = function(bError) {
		this._oError.bComplex = true;
		this._oError.bSecond = bError;
	};
	
	/**
	 * Returns <code>true</code>, if a client error has been detected, <code>false</code> otherwise.
	 * 
	 * @returns {boolean} <code>true</code>, if a client error has been detected, <code>false</code> otherwise.
	 * @private
	 */
	SmartField.prototype._hasClientError = function() {
		if (this._oError.bComplex) {
			return this._oError.bFirst || this._oError.bSecond;
		}

		return this._oError.bFirst;
	};
	
	/**
	 * Returns <code>true</code>, if a client error is detected, <code>false</code> otherwise. Additionally the error message is shown, if
	 * this is not the case already.
	 * 
	 * @returns {boolean} <code>true</code>, if a client error has been detected, <code>false</code> otherwise.
	 * @public
	 */
	SmartField.prototype.checkClientError = function() {
		var aChildren, len;
		
		// in display mode: no error.
		if (this._getMode() === "display") {
			return false;
		}
		
		// a client error has already been detected.
		if (this._hasClientError()) {
			return true;
		}
		
		// check again.
		aChildren = this.getInnerControls();
		len = aChildren.length;
			
		while (len--) {
			this._checkClientError(aChildren[len]);
		}
			
		// return a possibly detected error.
		return this._hasClientError();
	};
	
	/**
	 * Checks for a client error on the given control. Additionally the error message is shown, if this is not the case already.
	 * 
	 * @param {sap.ui.core.Control} oControl the control to be checked.
	 * @private
	 */
	SmartField.prototype._checkClientError = function(oControl) {
		var oBind, sMethod, sParam, mParameters = {
			"sap.m.Input": "value",
			"sap.m.DatePicker": "value",
			"sap.m.ComboBox": "selectedKey"
		};
		
		sParam = mParameters[oControl.getMetadata()._sClassName];
		
		if (sParam) {
			oBind = oControl.getBinding(sParam);
		}
		
		if (oBind) {
			try {
				sMethod = "get" + sParam.substring(0, 1).toUpperCase() + sParam.substring(1);
				oBind.setExternalValue(oControl[sMethod]());
			} catch (ex) {
				if (ex instanceof ParseException) {
					oControl.fireParseError({
						exception: ex 
					});
				}
				
				if (ex instanceof ValidateException) {
					oControl.fireValidationError({
						exception: ex 
					});
				}
			}
		}
	};
	
	/**
	 * Resolves the controls hosted currently by this <code>Smart Field</code>.
	 * 
	 * @returns {array} the controls hosted currently by this <code>Smart Field</code>.
	 * @public
	 */
	SmartField.prototype.getInnerControls = function() {
		var oContent, fContent, mComplex = {
			"sap.m.HBox": function(oControl) {
				return oControl.getItems();
			},
			"sap.ui.comp.navpopover.SmartLink": function(oControl) {
				var aItems = oControl.getAggregation("innerControl");
				
				if (!aItems) {
					return [];
				}
				
				return aItems;
			}
		};

		oContent = this.getAggregation("_content");
		fContent = mComplex[oContent.getMetadata()._sClassName];

		if (fContent) {
			return fContent(oContent);
		}

		return [ oContent ];
	};
	
	/**
	 * Cleans up the resources associated with this element and all its children.
	 * 
	 * @public
	 */
	SmartField.prototype.exit = function() {
		var oInactiveInnerControl = null;
	
		if (this._oFactory) {
			this._oFactory.destroy();
		}
	
		if (this._getMode() === "edit") {
			oInactiveInnerControl = this._oControl["display"]; // EXC_JSHINT_018
		} else {
			oInactiveInnerControl = this._oControl["edit"]; // EXC_JSHINT_018
		}
	
		if (oInactiveInnerControl && oInactiveInnerControl.destroy) {
			oInactiveInnerControl.destroy();
		}
	
		this._oError = null;
		this._oValue = null;
		this._oFactory = null;
		this._oControl = null;
		this._oValueBind = null;
	};

	return SmartField;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfield/SmartField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.SmartFilterBar') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.SmartFilterBar.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/SmartFilterBar",[
	'jquery.sap.global', 'sap/m/MessageBox', 'sap/ui/comp/filterbar/FilterBar', 'sap/ui/comp/filterbar/FilterGroupItem', 'sap/ui/comp/filterbar/FilterItem', 'sap/ui/comp/library', './AdditionalConfigurationHelper', './ControlConfiguration', './FilterProvider', './GroupConfiguration', 'sap/ui/comp/smartvariants/PersonalizableInfo', 'sap/ui/comp/smartvariants/SmartVariantManagement'
], function(jQuery, MessageBox, FilterBar, FilterGroupItem, FilterItem, library, AdditionalConfigurationHelper, ControlConfiguration, FilterProvider, GroupConfiguration, PersonalizableInfo, SmartVariantManagement) {
	"use strict";

	/**
	 * Constructor for a new smartfilterbar/SmartFilterBar.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartFilterBar uses the OData metadata of an entity type in order to create a FilterBar. It is automatically determined which fields
	 *        will be used for the filter bar, if the fields support TypeAhead etc. Using control configurations and group configurations it is
	 *        possible to configure the filter bar and adapt it according to your needs.
	 * @extends sap.ui.comp.filterbar.FilterBar
	 * @author Pavan Nayak, Thomas Biesemann
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.SmartFilterBar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartFilterBar = FilterBar.extend("sap.ui.comp.smartfilterbar.SmartFilterBar", /** @lends sap.ui.comp.smartfilterbar.SmartFilterBar.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The OData entity type whose metadata shall be used to create the SmartFilterBar. Note: Changing this value after the SmartFilter is
				 * initialised (initialise event was fired) shall have no effect.
				 */
				entityType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Optional. The OData service URL. If it is not specified, the service URL from the OData model (this.getModel()) will be used. Note:
				 * Changing this value after the SmartFilter is initialised (initialise event was fired) shall have no effect.
				 */
				resourceUri: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Name of the field used for the basic search. The OData value list annotation should contain sap:searchable="true" to enable basic
				 * search.
				 */
				basicSearchFieldName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			aggregations: {

				/**
				 * Using control configurations you can add additional configuration to filter fields, for example set custom labels, change the order
				 * of fields, or change the filter field control type. Note: Changing the values here after the SmartFilter is initialised (initialise
				 * event was fired) shall have no effect.
				 */
				controlConfiguration: {
					type: "sap.ui.comp.smartfilterbar.ControlConfiguration",
					multiple: true,
					singularName: "controlConfiguration"
				},

				/**
				 * Provides the possibility to add additional configuration to groups. Groups are used to show fields in the advanced area of the
				 * SmartFilterBar. With additional configuration, you can for example set custom labels or change the order of groups. Note: Changing
				 * the values here after the SmartFilter is initialised (initialise event was fired) shall have no effect.
				 */
				groupConfiguration: {
					type: "sap.ui.comp.smartfilterbar.GroupConfiguration",
					multiple: true,
					singularName: "groupConfiguration"
				}
			}
		}
	});

	/**
	 * Retrieves the currently visible filters and the values for storing them as variants. The result will be passed on as a JSON object to the
	 * callee smart variant control.
	 * 
	 * @name sap.ui.comp.smartfilterbar.SmartFilterBar#fetchVariant
	 * @function
	 * @type object
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Applies the current variant as opposed to fetchVariant. The variant is retrieved via the flex layer.
	 * 
	 * @name sap.ui.comp.smartfilterbar.SmartFilterBar#applyVariant
	 * @function
	 * @param {object} oOVariant The variant that must be applied. oVariant must contain a valid JSON object.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Init
	 * 
	 * @private
	 */
	SmartFilterBar.prototype.init = function() {
		this._aFilterBarViewMetadata = null;
		this.isRunningInValueHelpDialog = false;
		FilterBar.prototype.init.apply(this); // Call base class
	};

	/**
	 * Initialises the OData metadata necessary to create the filter bar
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._initializeMetadata = function() {
		if (!this.isInitialised) {
			this._createFilterProvider();
			if (this._oFilterProvider) {
				this._aFilterBarViewMetadata = this._oFilterProvider.getFilterBarViewMetadata();
				if (this._aFilterBarViewMetadata) {
					// Set the Smart filter to use simplified mode if it is not on the F4 dialog
					// if (!this.isRunningInValueHelpDialog) {
					// this.setSimplifiedMode(true);
					// }
					this._attachAdditionalConfigurationChanged();
					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this.isInitialised = true;
					this.setModel(this._oFilterProvider.oModel, this._oFilterProvider.sFilterModelName);
					this._createFilterBar();

					// required for the new UI-Design
					this.registerGetFiltersWithValues(jQuery.proxy(this.getFiltersWithValues, this));

					// Variant Handling - Registrations
					this.registerFetchData(jQuery.proxy(this.getFilterDataAsString, this, true));
					this.registerApplyData(jQuery.proxy(function(sJson) {
						this.setFilterDataAsString(sJson, true);
					}, this));

					this._initializeVariantManagement();
				}
			}
		}
	};

	/**
	 * Get the filterable fields
	 * 
	 * @returns {Array}
	 * @public
	 */
	SmartFilterBar.prototype.getFilterBarViewMetadata = function() {
		return this._aFilterBarViewMetadata;
	};

	/**
	 * Creates an instance of the filter provider
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._createFilterProvider = function() {
		var sResourceUri, oModel, sEntityTypeName, sBasicSearchFieldName, oAdditionalConfiguration;

		sBasicSearchFieldName = this.getBasicSearchFieldName();
		sResourceUri = this.getResourceUri();
		sEntityTypeName = this.getEntityType();
		oAdditionalConfiguration = this.getAdditionalConfiguration();
		oModel = this.getModel();
		// Check if metadata has to be loaded asynchronously on the ODataModel
		// If so, delay the creation of FilterProvider until metadata is loaded!
		if (oModel && oModel.bLoadMetadataAsync && !oModel.oMetadata.isLoaded()) {
			// Attach to metadataLoaded if no event was already attached
			if (!this._bMetadataLoadAttached) {
				oModel.attachMetadataLoaded(jQuery.proxy(this._initializeMetadata, this));
				this._bMetadataLoadAttached = true;
			}
			return;
		}
		if ((oModel || sResourceUri) && sEntityTypeName) {
			this._oFilterProvider = new sap.ui.comp.smartfilterbar.FilterProvider({ // FIXME workaround for failing tests after AMD migration
				basicSearchFieldName: sBasicSearchFieldName,
				entityType: sEntityTypeName,
				serviceUrl: sResourceUri,
				isRunningInValueHelpDialog: this.isRunningInValueHelpDialog,
				model: oModel,
				additionalConfiguration: oAdditionalConfiguration,
				defaultDropDownDisplayBehaviour: this.data("defaultDropDownDisplayBehaviour"),
				defaultTokenDisplayBehaviour: this.data("defaultTokenDisplayBehaviour"),
				dateFormatSettings: this.data("dateFormatSettings"),
				smartFilter: this
			});
		}
	};

	/**
	 * Attaches to events from the control configuration. For example the visiblity of a filter field can be changed dynamically
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._attachAdditionalConfigurationChanged = function() {
		var aControlConfiguration, aGroupConfiguration, i, length;

		// Group Configuration
		aGroupConfiguration = this.getGroupConfiguration();
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			aGroupConfiguration[i].attachChange(this._handleGroupConfigurationChanged.bind(this));
		}

		// Control Configuration
		aControlConfiguration = this.getControlConfiguration();
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			aControlConfiguration[i].attachChange(this._handleControlConfigurationChanged.bind(this));
		}
	};

	/**
	 * Event Handler for changed events from control configuration
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._handleControlConfigurationChanged = function(oEvent) {
		var sPropertyName, oControlConfiguration, oFilterItem, sKey, sValue;

		sPropertyName = oEvent.getParameter("propertyName");
		oControlConfiguration = oEvent.oSource;

		if (!oControlConfiguration) {
			return;
		}

		sKey = oControlConfiguration.getKey();
		oFilterItem = this._getFilterItemByName(sKey);
		if (!oFilterItem) {
			return;
		}

		if (sPropertyName === "visible") {
			sValue = oControlConfiguration.getVisible();
			oFilterItem.setVisible(sValue);
		} else if (sPropertyName === "label") {
			sValue = oControlConfiguration.getLabel();
			oFilterItem.setLabel(sValue);
		} else if (sPropertyName === "visibleInAdvancedArea") {
			sValue = oControlConfiguration.getVisibleInAdvancedArea();
			if (oFilterItem.setVisibleInAdvancedArea) {
				oFilterItem.setVisibleInAdvancedArea(sValue);
			}
		}
	};

	/**
	 * Event Handler for changed events from control configuration
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._handleGroupConfigurationChanged = function(oEvent) {
		var sPropertyName, oGroupConfiguration;

		sPropertyName = oEvent.getParameter("propertyName");
		oGroupConfiguration = oEvent.oSource;
		if (sPropertyName === "label") {
			this._handleGroupConfigurationLabelChanged(oGroupConfiguration);
		}
	};

	/**
	 * Handle the event of a changed label of a group configuration. Find the corresponding FilterGroupItem and sets its label accordingly.
	 * 
	 * @private
	 * @param {object} oGroupConfiguration - GroupConfiguration where the label as changed
	 */
	SmartFilterBar.prototype._handleGroupConfigurationLabelChanged = function(oGroupConfiguration) {
		var oFilterGroupItem, sKey, sLabel;

		if (!oGroupConfiguration) {
			return;
		}

		sLabel = oGroupConfiguration.getLabel();
		sKey = oGroupConfiguration.getKey();
		oFilterGroupItem = this._getFilterGroupItemByGroupName(sKey);
		if (oFilterGroupItem) {
			oFilterGroupItem.setGroupTitle(sLabel);
		}
	};

	/**
	 * Returns a filter item or filter group item having the specified name. Returns undefined if there are no filter items or filter group items
	 * having the specified name.
	 * 
	 * @private
	 * @param {string} sName
	 * @returns {object}
	 */
	SmartFilterBar.prototype._getFilterItemByName = function(sName) {
		var aFilterItem, length, i;
		aFilterItem = this.getFilterItems();
		aFilterItem.push.apply(aFilterItem, this.getFilterGroupItems());

		length = aFilterItem.length;
		for (i = 0; i < length; i++) {
			if (aFilterItem[i].getName() === sName) {
				return aFilterItem[i];
			}
		}
	};

	/**
	 * Returns a filter group item having the specified group name. Returns undefined if there is no filter group items having the specified name.
	 * 
	 * @private
	 * @param {string} sName
	 * @returns {object}
	 */
	SmartFilterBar.prototype._getFilterGroupItemByGroupName = function(sName) {
		var aFilterItem, length, i;
		aFilterItem = this.getFilterGroupItems();

		length = aFilterItem.length;
		for (i = 0; i < length; i++) {
			if (aFilterItem[i].getGroupName() === sName) {
				return aFilterItem[i];
			}
		}
	};

	/**
	 * returns an JS Object containing all information from the additional configuration (controlConfiguration, groupConfiguration)
	 * 
	 * @returns {object}
	 * @public
	 */
	SmartFilterBar.prototype.getAdditionalConfiguration = function() {
		return new AdditionalConfigurationHelper(this.getControlConfiguration(), this.getGroupConfiguration());
	};

	/**
	 * The entity type name from OData metadata, for which the filter bar shall be created
	 * 
	 * @param {string} sEntityTypeName
	 * @public
	 */
	SmartFilterBar.prototype.setEntityType = function(sEntityTypeName) {
		this.setProperty("entityType", sEntityTypeName);
		this._initializeMetadata();
	};

	/**
	 * Uses the provided resource URI to fetch the OData metadata instead of using the default ODataModel (getModel()). You should only set this if
	 * you intend to get the metadata for the filter bar from elsewhere!
	 * 
	 * @param {string} sResourceUri - The URI of the oData service from which the metadata would be read
	 * @public
	 */
	SmartFilterBar.prototype.setResourceUri = function(sResourceUri) {
		this.setProperty("resourceUri", sResourceUri);
		this._initializeMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the filter controls.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype.updateBindingContext = function() {
		FilterBar.prototype.updateBindingContext.apply(this, arguments);
		this._initializeMetadata();
	};

	/**
	 * Creates a filter bar based only on the metadata
	 * 
	 * @returns {Object} The smart filter bar instance
	 * @private
	 */
	SmartFilterBar.prototype._createFilterBar = function() {
		var oFilterGroup, i, j, iLen = 0, iFieldLen = 0, aFilterFields, oField;
		if (!this._aFilterBarViewMetadata) {
			return this;
		}

		iLen = this._aFilterBarViewMetadata.length;
		for (i = 0; i < iLen; i++) {
			oFilterGroup = this._aFilterBarViewMetadata[i];
			aFilterFields = oFilterGroup.fields;
			iFieldLen = aFilterFields.length;
			for (j = 0; j < iFieldLen; j++) {
				oField = aFilterFields[j];
				if (oFilterGroup.groupName === FilterProvider.BASIC_FILTER_AREA_ID) {
					this._createFieldInBasicArea(oField);
				} else {
					this._createFieldInAdvancedArea(oFilterGroup.groupName, oFilterGroup.groupLabel, oField);
				}
				if (oField.name !== FilterProvider.BASIC_SEARCH_FIELD_ID) {
					this._handleEnter(oField.control);
					this._handleChange(oField.control);
					this._handleError(oField.control);
				} else {
					this._attachToBasicSearch(oField.control);
				}
			}
		}
		return this;
	};

	/**
	 * Listen to the change event to set the search button state and raise an event
	 * 
	 * @param {object} oControl - the control on which change would be triggered
	 * @private
	 */
	SmartFilterBar.prototype._handleError = function(oControl) {
		if (oControl) {
			var fOnError = jQuery.proxy(function() {
				this._bInError = false;
				if (oControl && oControl.getValueState && oControl.getValueState() === sap.ui.core.ValueState.Error) {
					this._bInError = true;
				}
				this.setSearchEnabled(!this._bInError);
			}, this);
			oControl.attachParseError(fOnError);
			oControl.attachFormatError(fOnError);
			oControl.attachValidationError(fOnError);
			oControl.attachValidationSuccess(jQuery.proxy(function() {
				this._bInError = false;
				this.setSearchEnabled(true);
			}, this));
		}
	};

	/**
	 * Handling of change and search for Basic Search field (used in value helps)
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._attachToBasicSearch = function(oBasicSearchControl) {
		if (oBasicSearchControl) {
			oBasicSearchControl.attachSearch(jQuery.proxy(function() {
				this.search();
			}, this));
			// Basic search doesn't have a change event, so we attach to live change instead!
			oBasicSearchControl.attachLiveChange(jQuery.proxy(this._onChange, this));
		}
	};

	/**
	 * Called when change need to be triggered on the Smart Filter
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._onChange = function(oEvent) {
		var oControl = oEvent.getSource();
		// If the token is being validated do not trigger the change event!
		if (!this._bInError && (!oControl || (oControl && !oControl.__bValidatingToken))) {
			this.setSearchEnabled(true);
			this.fireFilterChange(oEvent);
		}
	};

	/**
	 * Listen to the change event to set the search button state and raise an event
	 * 
	 * @param {object} oControl - the control on which change would be triggered
	 * @private
	 */
	SmartFilterBar.prototype._handleChange = function(oControl) {
		if (oControl) {
			if (oControl.attachChange) {
				oControl.attachChange(jQuery.proxy(this._onChange, this));
			}
		}
	};

	/**
	 * Handles the enter event on the control to trigger Search
	 * 
	 * @param {object} oControl - the control on which enter has to be handled
	 * @private
	 */
	SmartFilterBar.prototype._handleEnter = function(oControl) {
		/*
		 * @Hack: Search should not be triggered while a suggest is in progress (i.e. user presses enter key on the SuggestionList popup). Since the
		 * SuggestionPopup is always closed before the keyup event is raised and we cannot use the keydown event alone, we now listen to both key up
		 * and keydown events and set flags on the control to overcome the issue. Perhaps if sapUI5 provides a new event/does not propagate the keyUp
		 * event/sets a flag we can remove this hack TODO: Clarify this with sapUI5 colleagues.
		 */
		oControl.attachBrowserEvent("keydown", function(e) {
			if (e.which === 13) {
				oControl.__bSuggestInProgress = (oControl._oSuggestionPopup && oControl._oSuggestionPopup.isOpen());
			}
		});
		oControl.attachBrowserEvent("keyup", jQuery.proxy(function(e) {
			if (!this._bInError && (e.which === 13 && !oControl.__bSuggestInProgress && !oControl.__bValidatingToken)) {
				this.search();
			}
		}, this));
	};

	/**
	 * Creates a new field and adds it to the filter bar Basic Area, based on the metadata provided by the FilterProvider
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._createFieldInBasicArea = function(oField) {
		var oFilterItem;
		oFilterItem = new FilterItem({
			labelTooltip: oField.quickInfo,
			label: oField.label,
			name: oField.fieldName,
			control: oField.control,
			mandatory: oField.isMandatory,
			visible: oField.isVisible
		});
		if (oField.isCustomFilterField) {
			oFilterItem.data("isCustomField", true);
		}
		this.addFilterItem(oFilterItem);
	};

	/**
	 * Creates a new field and adds it to the filter bar into the AdvancedSearchArea, based on the metadata provided by the FilterProvider
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._createFieldInAdvancedArea = function(sGroupName, sGroupLabel, oField) {
		var oFilterGroupItem;
		oFilterGroupItem = new FilterGroupItem({
			labelTooltip: oField.quickInfo,
			label: oField.label,
			name: oField.fieldName,
			groupName: sGroupName,
			groupTitle: sGroupLabel,
			mandatory: oField.isMandatory,
			visible: oField.isVisible,
			visibleInAdvancedArea: oField.visibleInAdvancedArea,
			control: oField.control
		});
		if (oField.isCustomFilterField) {
			oFilterGroupItem.data("isCustomField", true);
		}
		this.addFilterGroupItem(oFilterGroupItem);
	};

	/**
	 * Returns an array of filters that can be used to restrict the query result from OData - Returns the results for visible fields only
	 * 
	 * @returns {Array} array of filters
	 * @public
	 */
	SmartFilterBar.prototype.getFilters = function() {
		var aFieldNames = this._getVisibleFieldNames();
		return this._oFilterProvider ? this._oFilterProvider.getFilters(aFieldNames) : [];
	};

	/**
	 * Returns a parameter object that can be used to restrict the query result from OData in case of basic search
	 * 
	 * @returns {object} parameter object containing OData query parameters
	 * @public
	 */
	SmartFilterBar.prototype.getParameters = function() {
		return this._oFilterProvider ? this._oFilterProvider.getParameters() : {};
	};

	/**
	 * Returns the control (if any) with the specified key. (Property name in OData entity)
	 * 
	 * @param {string} sKey - the key as present in the OData property name/control configuration. Use just the property name as the key when getting
	 *        a control from the basic area. Ex: "CompanyCode" & Use "EntityName/GroupName.FieldName" format to get controls from groups.
	 *        Ex:"Account.CompanyCode"
	 * @returns {object|sap.ui.Control} the control in the filter bar, if any
	 * @public
	 */
	SmartFilterBar.prototype.getControlByKey = function(sKey) {
		var oFilterItem;
		oFilterItem = this._getFilterItemByName(sKey);
		if (oFilterItem) {
			return this.determineControlByFilterItem(oFilterItem);
		}
	};

	/**
	 * Returns an array of visible field names
	 * 
	 * @private
	 * @returns {Array} aFieldNames - array of field names
	 */
	SmartFilterBar.prototype._getVisibleFieldNames = function() {
		var aFieldNames = [], aVisibleFilterItems = this.getAllFilterItems(true), iLen = aVisibleFilterItems.length, oItem;
		iLen = aVisibleFilterItems.length;
		// loop through all the visible filter items and get their names
		while (iLen--) {
			oItem = aVisibleFilterItems[iLen];
			if (oItem) {
				aFieldNames.push(oItem.getName());
			}
		}
		return aFieldNames;
	};

	/**
	 * Returns the data currently set in the filter data model
	 * 
	 * @param {boolean} bAllFilterData - Also include empty/invisible fields filter data
	 * @returns {object} the json data in the filter bar
	 * @public
	 */
	SmartFilterBar.prototype.getFilterData = function(bAllFilterData) {
		var oData = null;
		if (this._oFilterProvider) {
			if (bAllFilterData) {
				oData = this._oFilterProvider.getFilterData();
			} else {
				oData = this._oFilterProvider.getFilledFilterData(this._getVisibleFieldNames());
			}
		}
		return oData;
	};

	/**
	 * checks the value of the custom data
	 * 
	 * @private
	 * @param {Object} oCustomData custom data
	 * @returns {boolean} has value/or not
	 */
	SmartFilterBar.prototype._checkHasValueData = function(oCustomData) {
		if (oCustomData) {
			if (typeof oCustomData === "boolean") {
				return oCustomData;
			} else if (typeof oCustomData === "string") {
				if (oCustomData.toLowerCase() === "true") {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * checks if the current filter has a value
	 * 
	 * @param {Object} oData data as returned by the oData-service
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem representing the filter
	 * @param {sap.ui.core.Control} oControl the control as described by the oFilterItem
	 * @returns {boolean} true if the filter item has a value
	 * @private
	 */
	SmartFilterBar.prototype._checkForValues = function(oData, oFilterItem, oControl) {
		var sValue = null;
		if (oData && oFilterItem && oControl) {
			if (!oFilterItem.data("isCustomField")) {
				// Check if Data exists in the filter model for internal fields
				sValue = oData[oFilterItem.getName()];
			} else {

				var oCustomData = oControl.data("hasValue");
				if ((oCustomData !== undefined) && (oCustomData != null)) {
					return this._checkHasValueData(oCustomData);
				} else {
					if (oControl.getValue) {
						// Check if getValue is present and filled
						sValue = oControl.getValue();
					} else if (oControl.getSelectedKey) { // new mechanism with 1.25. Has to be provided by the custom field
						// Check if getSelectedKey is set
						sValue = oControl.getSelectedKey();
					}
				}
			}
		}

		return sValue ? true : false;
	};

	/**
	 * Returns all filter items containing a value
	 * 
	 * @returns {array} filter items containing a value
	 * @private
	 */
	SmartFilterBar.prototype.getFiltersWithValues = function() {
		var aFilterItemsWithValue = [];

		// logic from check _validateMandatoryFields
		var aFilterItems = this.getAllFilterItems(), oFilterItem, oData = this.getFilterData(), iLen = 0, oControl;
		if (aFilterItems && oData) {
			iLen = aFilterItems.length;
			// Loop through the mandatory field names
			while (iLen--) {
				oFilterItem = aFilterItems[iLen];
				// Get the control from filter item name
				oControl = this.determineControlByFilterItem(oFilterItem);
				if (this._checkForValues(oData, oFilterItem, oControl)) {
					aFilterItemsWithValue.push(oFilterItem);
				}
			}
		}

		return aFilterItemsWithValue;
	};

	/**
	 * Returns the data currently set in the filter data model as string
	 * 
	 * @param {boolean} bAllFilterData - Also include empty/invisible fields filter data
	 * @returns {string} the string json data in the filter bar
	 * @public
	 */
	SmartFilterBar.prototype.getFilterDataAsString = function(bAllFilterData) {
		var oData = null;
		if (this._oFilterProvider) {
			if (bAllFilterData) {
				oData = this._oFilterProvider.getFilterDataAsString();
			} else {
				oData = this._oFilterProvider.getFilledFilterDataAsString(this._getVisibleFieldNames());
			}
		}
		return oData;
	};

	/**
	 * Sets the data in the filter data model
	 * 
	 * @param {object} oJson - the json data in the filter bar *
	 * @param {boolean} bReplace - Replace existing filter data
	 * @public
	 */
	SmartFilterBar.prototype.setFilterData = function(oJson, bReplace) {
		if (this._oFilterProvider) {
			this._oFilterProvider.setFilterData(oJson, bReplace);
		}
	};

	/**
	 * Sets the data in the filter data model as string
	 * 
	 * @param {string} sJson - the json data in the filter bar *
	 * @param {boolean} bReplace - Replace existing filter data
	 * @public
	 */
	SmartFilterBar.prototype.setFilterDataAsString = function(sJson, bReplace) {
		if (this._oFilterProvider) {
			this._oFilterProvider.setFilterDataAsString(sJson, bReplace);
		}
	};

	/**
	 * Overwrites method from base class. Called when user clicks the reset button of the FilterBar. Clears all filter fields and fires reset event.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype.fireClear = function() {
		this._clearFilterFields();
		this.fireEvent("clear", arguments);
	};

	/**
	 * Clears the values of all filter fields. Applies default values if applicable.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._clearFilterFields = function() {
		if (this._oFilterProvider) {
			this._oFilterProvider.clear();
		}
	};

	/**
	 * Overwrites method from base class. Called when user clicks the reset button of the FilterBar. Clears all filter fields and fires reset event.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype.fireReset = function() {
		this._resetFilterFields();
		this.fireEvent("reset", arguments);
	};

	/**
	 * Clears the values of all filter fields. Applies default values if applicable.
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._resetFilterFields = function() {
		if (this._oFilterProvider) {
			this._oFilterProvider.reset();
		}
	};

	/**
	 * Overwrites method from base class. Called when user clicks the search button of the FilterBar. Does a mandatory check before triggering Search
	 * 
	 * @private
	 * @returns {boolean} true indicated, that there are no validation problems
	 */
	SmartFilterBar.prototype.search = function() {

		var parameter = [];
		var oObj = {};
		oObj.selectionSet = this._retrieveCurrentSelectionSet();
		parameter.push(oObj);

		var bContinue = this._validateMandatoryFields();
		if (bContinue) {
			oObj.selectionSet = this._retrieveCurrentSelectionSet();
			parameter.push(oObj);
			this.fireSearch(parameter);
		} else {
			if (!this._oResourceBundle) {
				this._oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
			}
			if (!this._sMandatoryErrorMessage) {
				this._sMandatoryErrorMessage = this._oResourceBundle.getText("EMPTY_MANDATORY_MESSAGE");
				this._sMandatoryTitle = this._oResourceBundle.getText("EMPTY_MANDATORY_CHECK_TITLE");
			}
			MessageBox.show(this._sMandatoryErrorMessage, {
				icon: MessageBox.Icon.ERROR,
				title: this._sMandatoryTitle,
				styleClass: !!(this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
			});
			// Opens the more area if error message is shown and if empty mandatory fields are present in the advanced filter area!
			if (this._bExpandAdvancedFilterArea && this.rerenderFilters) {
				this.rerenderFilters(true);
			}
		}

		return bContinue;
	};

	/**
	 * Checks if the values of all mandatory filter fields are filled and returns true if they are; else returns false. If no fields and data exist
	 * true is returned! ErrorMessage/ErrorState is set on the fields accordingly.
	 * 
	 * @private
	 * @returns {boolean}
	 */
	SmartFilterBar.prototype._validateMandatoryFields = function() {
		var bFilled = true, aFilterItems = this.determineMandatoryFilterItems(), oFilterItem, oData = this.getFilterData(), iLen = 0, oControl;
		this._bExpandAdvancedFilterArea = false;
		if (aFilterItems && oData) {
			iLen = aFilterItems.length;
			// Loop through the mandatory field names
			while (iLen--) {
				oFilterItem = aFilterItems[iLen];

				// sField = oFilterItem.getName();
				// Get the control from filter item name
				oControl = this.determineControlByFilterItem(oFilterItem);
				if (oControl && oControl.setValueState) {

					if (this._checkForValues(oData, oFilterItem, oControl)) {
						// Clear error state
						oControl.setValueState(sap.ui.core.ValueState.None);
					} else {
						bFilled = false;
						// If field has a value property and it is empty --> show error
						oControl.setValueState(sap.ui.core.ValueState.Error);
						// GroupName method exists only on FilterGroupItem --> part of advanced filter area
						if (oFilterItem.getGroupName) {
							this._bExpandAdvancedFilterArea = true; // !!!! TODO: expand the filter area
						}
					}
				}
			}
		}
		return bFilled;
	};

	/**
	 * creates the smart variant-management control
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._createVariantManagement = function() {

		this._oSmartVariantManagement = null;

		if (this.getAdvancedMode()) {
			return FilterBar.prototype._createVariantManagement.apply(this);
		}

		this._oSmartVariantManagement = new SmartVariantManagement({
			showExecuteOnSelection: true,
			showShare: false
		});

		return this._oSmartVariantManagement;
	};

	/**
	 * initializes the variant management, when the prerequisites are full filled. In this case the initialise-event will be triggered lated, after
	 * the variant management initialization. Triggers the initialise-event immediately, in case the pre-requisits are not full filled
	 * 
	 * @private
	 */
	SmartFilterBar.prototype._initializeVariantManagement = function() {
		// initialise SmartVariant stuff only if it is necessary! (Ex: has a persistencyKey)
		if (!this.isRunningInValueHelpDialog && this._oSmartVariantManagement && this.getPersistencyKey()) {
			var oPersInfo = new PersonalizableInfo({
				type: "filterBar",
				keyName: "persistencyKey",
				dataSource: this.getEntityType()
			});
			oPersInfo.setControl(this);

			this._oSmartVariantManagement.addPersonalizableControl(oPersInfo);

			var bValue = this._checkHasValueData(this.data("executeStandardVariantOnSelect"));
			if (bValue) {
				this._oSmartVariantManagement._executeOnSelectForStandardVariant(bValue);
			}

			FilterBar.prototype._initializeVariantManagement.apply(this, arguments);

		} else {

			this.fireInitialise();
		}
	};

	/**
	 * Returns an instance of the control for the basic search.
	 * 
	 * @returns {object} basic search control
	 * @public
	 */
	SmartFilterBar.prototype.getBasicSearchControl = function() {
		return this.getControlByKey(FilterProvider.BASIC_SEARCH_FIELD_ID);
	};

	/**
	 * Search for the filter field having the specified OData key and adds this filter field to the advanced area. If there is no corresponding field
	 * in the OData metadata, this method has no effect.
	 * 
	 * @param {string} sKey - the key like specified in the OData metadata
	 * @public
	 */
	SmartFilterBar.prototype.addFieldToAdvancedArea = function(sKey) {
		var oFilterItem;
		oFilterItem = this._getFilterItemByName(sKey);
		if (oFilterItem && oFilterItem.setVisibleInAdvancedArea) {
			oFilterItem.setVisibleInAdvancedArea(true);
		}
	};

	/**
	 * Destroys the control
	 * 
	 * @public
	 */
	SmartFilterBar.prototype.destroy = function() {

		FilterBar.prototype.destroy.apply(this, arguments);
		if (this._oFilterProvider && this._oFilterProvider.destroy) {
			this._oFilterProvider.destroy();
		}
		this._oFilterProvider = null;
		this._aFilterBarViewMetadata = null;
		this._bExpandAdvancedFilterArea = null;
		this._oResourceBundle = null;
		this._sMandatoryErrorMessage = null;
		this._sMandatoryTitle = null;

		this._oSmartVariantManagement = null;
	};

	return SmartFilterBar;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/SmartFilterBar.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.odata.FieldSelector.
jQuery.sap.declare('sap.ui.comp.odata.FieldSelector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelector",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control', './FieldSelectorController'],
	function(jQuery, library, Control, FieldController) {
	"use strict";


	
/**
 * Constructor for a new odata/FieldSelector.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Reuse control which displays the properties of OData entity sets.
 * @extends sap.ui.core.Control
 *
 * @constructor
 * @public
	 * @alias sap.ui.comp.odata.FieldSelector
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
	var FieldSelector = Control.extend("sap.ui.comp.odata.FieldSelector", /** @lends sap.ui.comp.odata.FieldSelector.prototype */ { metadata : {

	library : "sap.ui.comp",
	properties : {

		/**
		 * Indicates to show a search bar for property names inside a selected entity set.
		 */
		showSearchBar : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {

		/**
		 * Content of the control itself
		 */
		content : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {

		/**
		 * User selected a different field.
		 */
		fieldSelectionChanged : {}
	}
}});


/**
 * Returns a map with the name of the entity set and the key of the selected field.
 *
 * @name sap.ui.comp.odata.FieldSelector#getSelectedField
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

	FieldSelector.prototype.init = function() {

	
	// do something for initialization...
	jQuery.sap.require("sap.m.HBox");
	jQuery.sap.require("sap.m.VBox");
	jQuery.sap.require("sap.m.FlexItemData");
	jQuery.sap.require("sap.m.FlexDirection");
	jQuery.sap.require("sap.m.FlexAlignSelf");
	jQuery.sap.require("sap.m.FlexAlignItems");
	jQuery.sap.require("sap.ui.core.ResizeHandler");
	jQuery.sap.require("sap.ui.comp.odata.FieldSelectorModelConverter");
	jQuery.sap.require("sap.m.Label");
	jQuery.sap.require("sap.ui.fl.fieldExt.Access");

	this._fieldNameText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_NAME");
	this._fieldTypeText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_TYPE");
	this._fieldLabelText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_LABEL");
	this._entityTypeText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_HEADER");
	this._createNewFieldText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_CREATE_NEW_FIELD");

	this._oFieldController = new FieldController();	
	this._sSelectedKey = undefined;
	this._oTable = undefined;
	this._oSearchField = undefined;
	this._oConverter = undefined;
	this._oCreateButton = undefined;
	this._bDisplayFieldExtButton = undefined;
	this._oCurrentFieldExtInfo = undefined;
	this._oScrollView = new sap.m.ScrollContainer();
	this._oTable = new sap.m.Table();
	this._oHeaderLayout = undefined;	

	var smartFormDialog = sap.ui.getCore().byId("smartFormPersDialog");
	if (smartFormDialog) {
		this._oResizeDialogHandlerId = sap.ui.core.ResizeHandler.register(smartFormDialog, jQuery.proxy(this._handleResizeDialog, this));
	}
	if (this._oScrollView) {
		this._oResizeScrollViewHandlerId = sap.ui.core.ResizeHandler.register(this._oScrollView, jQuery.proxy(this._handleResizeTable, this));
	}

};

	FieldSelector.prototype._handleResizeDialog = function() {
	if (this._oScrollView) {
		var height = jQuery("#smartFormPersDialog-cont").height();
		var headerHeight = jQuery("#smartFormPersDialogFieldSelectorHeader").height();
		this._oScrollView.setHeight(height - headerHeight + "px");
	}
};

	FieldSelector.prototype._handleResizeTable = function() {
	if (this._oScrollView) {
		var scrollViewId = this._oScrollView.getId();
		var width = jQuery("#" + scrollViewId + "-scroll").innerWidth();
		this._oTable.setWidth(width + "px");
	}
};

/**
 * Set the model for the entity and fields of an odata service
 * 
 * @param {sap.ui.model.odata.ODataModel} oModel - odata model
 * @param {string} sEntityTypes - entity type name(s) separated by comma character or array
 * @param {boolean} bShowExtFieldButton - indicates if the create new field button will be displayed or not
 * @param {Array} aIgnoredFields - List of fields which should be ignored.
 * @public
 */
	FieldSelector.prototype.setModel = function(oModel, sEntityTypes, bShowExtFieldButton, aIgnoredFields) {

	this._bDisplayFieldExtButton = bShowExtFieldButton;	
	
	if (!oModel) {
		jQuery.sap.log.error("oModel has to be set otherwise nothing will be displayed");
	}
	if (!sEntityTypes) {
		jQuery.sap.log.error("sEntityTypes has to be set otherwise nothing will be displayed");
	}
	this._oFieldController.init(oModel, sEntityTypes, aIgnoredFields);	
	this._constructLayout();
	this._updateCreateButtonState();
};

/**
 * Returns a map with the name of the entity set and the key of the selected field.
 * 
 * @public
 * @returns {object} map of the name of the entity set having the selected field as kex
 */
	FieldSelector.prototype.getSelectedField = function() {

	var oResult = {
		entityType: this._sSelectedKey
	};
	var oSelectedRow = this._oTable.getSelectedItem();
	if (oSelectedRow) {
		oResult.field = oSelectedRow.getCells()[0].getText();
		oResult.name = oSelectedRow.getCells()[1].getText();
		// oResult.type = oSelectedRow.getCells()[2].getText();
		oResult.entitySet = this._oFieldController.getMetaDataAnalyzer().getEntitySetNameFromEntityTypeName(oResult.entityType);
	}

	return oResult;
};

/**
 * @private
 */
	FieldSelector.prototype._constructLayout = function() {
	var that = this;
	var oLayout = new sap.m.VBox({
		direction: sap.m.FlexDirection.Column
	});

	this._oHeaderLayout = new sap.m.HBox("smartFormPersDialogFieldSelectorHeader", {
		direction: sap.m.FlexDirection.Row
	});
	this._oHeaderLayout.addStyleClass("sapUiCompFieldSelectorHeader");

	this._oHeaderLayoutSearch = new sap.m.HBox({
		direction:sap.m.FlexDirection.Row
	});
	this._oHeaderLayoutSearch.addStyleClass("sapUiCompFieldSelectorHeaderSearch");

	this._oResizeHeaderHandlerId = sap.ui.core.ResizeHandler.register(this._oHeaderLayout, jQuery.proxy(this._handleResizeDialog, this));

	var oEntitySelectionLayout = new sap.m.HBox({
		direction: sap.m.FlexDirection.Row,
		alignItems: sap.m.FlexAlignItems.Start,
		layoutData: new sap.m.FlexItemData({
			growFactor: 2
		})
	});
	oEntitySelectionLayout.addStyleClass("sapUiCompFieldSelectorHeaderEntitySelection");

	var oHeader = new sap.m.Label({
		text: this._entityTypeText,
		layoutData: new sap.m.FlexItemData({
			order: 1,
			growFactor: 1
		})
	});
	// oHeader.addStyleClass("sapUiCompFieldSelectorHeaderText");

	var oDropDown = this._getEntityTypesRow();
	oDropDown.setLayoutData(new sap.m.FlexItemData({
		order: 2,
		growFactor: 1
	}));
	oDropDown.addStyleClass("sapUiCompFieldSelectorComboBox");
	
	oHeader.setLabelFor(oDropDown);
	oHeader.setVisible(oDropDown.getVisible());
	oEntitySelectionLayout.addItem(oHeader);
	oEntitySelectionLayout.addItem(oDropDown);
	this._oHeaderLayout.addItem(oEntitySelectionLayout);

	// Search field
	var oSearchField = this._getSearchRow();
	oSearchField.setLayoutData(new sap.m.FlexItemData({
		growFactor: 1
	}));
	oSearchField.addStyleClass("sapUiCompFieldSelectorHeader");
	this._oHeaderLayoutSearch.addItem(oSearchField);

	// New field button
	this._oCreateButton = new sap.m.Button({
		text: this._createNewFieldText,
		press: function(oEvent) {
			if (that._oCurrentFieldExtInfo) {
				// open field ext ui
				var oCrossAppNav = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
				var sHrefForFieldExtensionUi = (oCrossAppNav && oCrossAppNav.hrefForExternal({
					target: {
						semanticObject: "CustomField",
						action: "develop"
					},
					params: {
						businessContexts: that._oCurrentFieldExtInfo.BusinessContexts,
						serviceName: that._oCurrentFieldExtInfo.ServiceName,
						serviceVersion: that._oCurrentFieldExtInfo.ServiceVersion
					}
				}));

				window.open(sHrefForFieldExtensionUi, "_blank");
			}
		}
	});
	this._oCreateButton.addStyleClass("sapUiCompFieldSelectorCreateButton");
	this._oHeaderLayout.addItem(this._oCreateButton);

	oLayout.addItem(this._oHeaderLayout);
	oLayout.addItem(this._oHeaderLayoutSearch);
	oLayout.addItem(this._getFieldsRow());

	this.setContent(oLayout);
};

/**
 * @private
 * @returns {sap.m.ComboBox} combobox instance
 */
	FieldSelector.prototype._getEntityTypesRow = function() {

	var that = this;
	var oDropDown = new sap.m.ComboBox({
		// placeholder: this._entitySetPlaceHolderText,
		selectionChange: function(oEvent) {
			that._oSearchField.setValue("");
			that._sSelectedKey = oEvent.mParameters.selectedItem.getKey();
			that._updateTableData();
			that._updateCreateButtonState();
		},
		layoutData: new sap.m.FlexItemData({
			growFactor: 1
		})
	});

	var aEntityTypes = this._oFieldController.getEntityTypes();
	for (var i = 0; i < aEntityTypes.length; i++) {
		oDropDown.addItem(new sap.ui.core.Item({
			text: aEntityTypes[i].label,
			key: aEntityTypes[i].key
		}));
	}

	if (aEntityTypes.length > 0) {
		this._sSelectedKey = aEntityTypes[0].key;
		oDropDown.setSelectedKey(this._sSelectedKey);
	}

	if (aEntityTypes.length === 1) {
		oDropDown.setVisible(false);
	}

	return oDropDown;
};

/**
 * @returns {sap.m.SearchField} search field instance
 */
	FieldSelector.prototype._getSearchRow = function() {

	var iLiveChangeTimer = 0;
	var that = this;
	var sValue;
	this._oSearchField = new sap.m.SearchField({
		visible: this.getShowSearchBar(),
		liveChange: function(oEvent) {
			sValue = oEvent.getSource().getValue();
			var iDelay = (sValue ? 300 : 0); // no delay if value is empty

			// execute search after user stops typing for 300ms
			clearTimeout(iLiveChangeTimer);
			if (iDelay) {
				iLiveChangeTimer = setTimeout(function() {
					that._executeSearch(sValue);
				}, iDelay);
			} else {
				that._executeSearch(sValue);
			}
		},
		// execute the standard search
		search: function(oEvent) {
			sValue = oEvent.getSource().getValue();
			that._executeSearch(sValue);
		},
		layoutData: new sap.m.FlexItemData({
			growFactor: 2
		})

	});

	return this._oSearchField;
};

/**
 * @param {string} sValue : value to be search
 * @private
 */
	FieldSelector.prototype._executeSearch = function(sValue) {

	var aFilters = [];
	// search for label, search for quick info
	var oFieldLabel = new sap.ui.model.Filter("fieldLabel", sap.ui.model.FilterOperator.Contains, sValue);
	var oQuickInfoFilter = new sap.ui.model.Filter("quickInfo", sap.ui.model.FilterOperator.Contains, sValue);
	var oFilter = new sap.ui.model.Filter([
		oFieldLabel, oQuickInfoFilter
	], false);

	aFilters.push(oFilter);
	var itemsBinding = this._oTable.getBinding("items");
	itemsBinding.filter(aFilters, "Application");
};

/**
 * @private
 * @returns {sap.m.Table} table instance
 */
	FieldSelector.prototype._getFieldsRow = function() {
	// this._oScrollView.setWidth("100%");
	this._oScrollView.setVertical(true);
	this._oScrollView.addStyleClass("sapUiCompFieldSelectorScrollContainer");


	var aColumns = [
		new sap.m.Column({
			header: new sap.m.Label({
				text: this._fieldLabelText
			})
		}), new sap.m.Column({
			header: new sap.m.Label({
				text: this._fieldNameText
			})
		})
	];

	this._oTable = new sap.m.Table({
		mode: "SingleSelectMaster",
		columns: aColumns,
		selectionChange: jQuery.proxy(function(e) {
			var oSelection = this.getSelectedField();
			this.fireFieldSelectionChanged(oSelection);
		}, this)
	});
	this._oTable.setFixedLayout(false);

	this._updateTableData();

	this._oScrollView.addContent(this._oTable);
	this._handleResizeDialog();

	return this._oScrollView;
};

/**
 * @private
 */
	FieldSelector.prototype._updateTableData = function() {

	var oModel = new sap.ui.model.json.JSONModel();	
	oModel.setData({
		modelData: this._oFieldController.getFields()
	});

	var oTemplate = new sap.m.ColumnListItem({
		cells: [
			new sap.m.Text({
				text: "{fieldLabel}",
				tooltip: "{quickInfo}",
				wrapping: false
			}), new sap.m.Text({
				text: "{name}",
				tooltip: "{name}",
				wrapping: false
			})
// , new sap.m.Text({
// text: "{type}",
// tooltip: "{type}",
// wrapping: false
// })
		]
	});

	this._oTable.setModel(oModel);
	this._oTable.getModel().setSizeLimit(this._oFieldController.getMaxEntitySetSize() + 5);
	this._oTable.bindItems("/modelData/" + this._sSelectedKey, oTemplate);
};


/**
 * Checks the support for ext fields and sets the enabled state for the create new field button
 * 
 * @private
 */
	FieldSelector.prototype._updateCreateButtonState = function() {

	if (!this._bDisplayFieldExtButton) {
		this._oCreateButton.setVisible(false);
	} else {
		var that = this;
		var oMDA = this._oFieldController.getMetaDataAnalyzer();
		that._oCreateButton.setEnabled(false);
		try {
			var oPromise = sap.ui.fl.fieldExt.Access.getBusinessContexts(oMDA.oModel.sServiceUrl, this._sSelectedKey);
			oPromise.done(function(oResult) {
				if (oResult) {
					if (oResult.BusinessContexts) {
						if (oResult.BusinessContexts.length > 0) {
							that._oCurrentFieldExtInfo = oResult;
							that._oCreateButton.setEnabled(true);
						}
					}
				}

			});
			oPromise.fail(function(oError) {
				that._oCreateButton.setEnabled(false);
				if (oError) {
					if (jQuery.isArray(oError.errorMessages)) {
						for (var i = 0; i < oError.errorMessages.length; i++) {
							jQuery.sap.log.error(oError.errorMessages[i].text);
						}
					}
				}
			});
		} catch (oError) {
			that._oCreateButton.setEnabled(false);
			jQuery.sap.log.error("exception occured in sap.ui.fl.fieldExt.Access.getBusinessContexts");
		}
	}

};

/**
 * Cleans up the control
 * 
 * @public
 */
	FieldSelector.prototype.exit = function() {

	if (this._oResizeDialogHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeDialogHandlerId);
	}
	if (this._oResizeHeaderHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeHeaderHandlerId);
	}
	if (this._oResizeScrollViewHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeScrollViewHandlerId);
	}
	this.destroyAggregation("content");
	this._oFieldController.destroy();
	this._sSelectedKey = null;
	this._oTable = null;
	this._oScrollView = null;
	this._oSearchField = null;
	this._oHeaderLayout = null;
	if (this._oConverter && this._oConverter.destroy) {
		this._oConverter.destroy();
	}
	this._oConverter = null;
	if (this._oCreateButton) {
		if (this._oCreateButton.destroy) {
			this._oCreateButton.destroy();
		}
	}
	this._oCreateButton = null;
	this._oCurrentFieldExtInfo = null;
};
	

	return FieldSelector;

}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelector.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ControlProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the view metadata required for a field using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ControlProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.DateTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ControlProvider",[
	'jquery.sap.global', 'sap/m/CheckBox', 'sap/m/ComboBox', 'sap/m/DatePicker', 'sap/m/HBox', 'sap/m/Input', 'sap/m/Text', 'sap/ui/comp/navpopover/SmartLink', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/smartfield/ODataHelper', 'sap/ui/comp/smartfield/SmartField', 'sap/ui/model/type/Date', 'sap/ui/model/type/DateTime', 'sap/ui/model/type/Float'
], function(jQuery, CheckBox, ComboBox, DatePicker, HBox, Input, Text, SmartLink, MetadataAnalyser, ODataHelper, SmartField, Date, DateTime, Float) {
	"use strict";

	// TODO: CleanUp!

	/**
	 * Constructs a class to generate the view/data model metadata for the controls - that can be used in table/forms etc.
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, entitySet
	 * @author Pavan Nayak
	 */
	var ControlProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this._oMetadataAnalyser = mPropertyBag.metadataAnalyser;
			this._aODataFieldMetadata = mPropertyBag.fieldsMetadata;
			this._oDateFormatSettings = mPropertyBag.dateFormatSettings;
			this._oCurrencyFormatSettings = mPropertyBag.currencyFormatSettings;			
			this._oDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			this.useSmartField = mPropertyBag.useSmartField === "true";
			this._sEntitySet = mPropertyBag.entitySet;
		}

		if (!this._oMetadataAnalyser && this._oParentODataModel) {
			this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel);
			this._intialiseMetadata();
		}

		this._mSmartField = {};
		this._oHelper = new ODataHelper(this._oMetadataAnalyser.oModel);

		this._aValueListProvider = [];
		this._aValueHelpProvider = [];
	};

	/**
	 * Initialises the necessary metadata
	 * 
	 * @private
	 */
	ControlProvider.prototype._intialiseMetadata = function() {
		if (!this._aODataFieldMetadata) {
			this._aODataFieldMetadata = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sEntity);
		}
	};

	// TODO: Provide easy to use methods for other consumers

	/**
	 * Get the field metadata
	 * 
	 * @param {object} oFieldODataMetadata - OData metadata for the field
	 * @param {boolean} isEditable - specifies if the control shall be editable
	 * @returns {Array}
	 * @public
	 */
	ControlProvider.prototype.getFieldViewMetadata = function(oFieldODataMetadata, isEditable) {
		var oFieldViewMetadata = this._createFieldMetadata(oFieldODataMetadata);
		// Create and set the template
		this._createFieldTemplate(oFieldViewMetadata, isEditable);
		return oFieldViewMetadata;
	};

	/**
	 * Creates and extends the field view with a template for the UI content
	 * 
	 * @param {object} oViewField - the view field metadata
	 * @param {boolean} isEditable - specifies if the control shall be editable
	 * @private
	 */
	ControlProvider.prototype._createFieldTemplate = function(oViewField, isEditable) {
		if (this.useSmartField) {
			oViewField.template = new SmartField({
				value: {
					path: oViewField.name
				},
				entitySet: this._sEntitySet,
				editable: {
					path: "sm4rtM0d3l>/editable",
					mode: "OneWay"
				}
			});
			this._completeSmartField(oViewField);
		} else {
			if (isEditable) {
				oViewField.template = this._createEditableTemplate(oViewField);
			} else {
				oViewField.template = this._createDisplayOnlyTemplate(oViewField);
			}
		}
	};

	/**
	 * Completes the Smart Field template, adds especially meta data.
	 * 
	 * @param {object} oViewField the current meta data.
	 * @private
	 */
	ControlProvider.prototype._completeSmartField = function(oViewField) {
		var oData = {
			annotations: {},
			path: oViewField.name,
			namespace: this._oMetadataAnalyser.getNamespace()
		};

		if (!this._mSmartField.entitySetObject) {
			this._mSmartField.entitySetObject = this._oHelper.getEntitySet(this._sEntitySet);
			this._mSmartField.entityType = this._oHelper.getEntityType(this._mSmartField.entitySetObject.entityType.replace(oData.namespace + ".", ""));
		}

		oData.modelObject = this._oParentODataModel;
		oData.entitySetObject = this._mSmartField.entitySetObject;
		oData.entityType = this._mSmartField.entityType;
		oData.property = this._oHelper.getProperty(oData.path, oData.namespace, oData.entityType.count);

		oData.annotations.uom = this._oHelper.getUnitOfMeasure(oData.property, oData.path, oData.namespace, oData.entityType.count);
		oData.annotations.text = this._oHelper.getTextProperty(oData.property, oData.path, oData.namespace, oData.entityType.count);
		oData.annotations.lineitem = this._oMetadataAnalyser.getLineItemAnnotation(oData.entitySetObject.entityType);
		oData.annotations.semantic = this._oMetadataAnalyser.getSemanticObjectAnnotation(oData.namespace + "." + oData.entityType.type.name + "/" + oData.property.property.name); // EXC_JSHINT_037
		oData.annotations.valuelist = this._oHelper.getValueListAnnotation(oData.namespace, oData.entityType.type, oData.property, oData.property.typePath);
		this._oHelper.getUOMValueListAnnotation(oData);
		this._oHelper.geValueListEntitySet(oData);
		
		oViewField.template.data("configdata", {
			"configdata": oData
		});

		oViewField.template.data("dateFormatSettings", this._oDateFormatSettings);
		oViewField.template.data("currencyFormatSettings", this._oCurrencyFormatSettings);
		oViewField.template.data("defaultDropDownDisplayBehaviour", this._oDefaultDropDownDisplayBehaviour);
	};

	/**
	 * Creates and extends the field view with a template for editable UI content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {boolean} bBlockSmartLinkCreation - if true, no SmartLink is created independent of the semanitcObject notation
	 * @returns {sap.ui.core.Control} the template control
	 * @private
	 */
	ControlProvider.prototype._createEditableTemplate = function(oViewField, bBlockSmartLinkCreation) {
		var oTemplate = null, oType;
		if (oViewField.type === "Edm.DateTime" || oViewField.type === "Edm.DateTimeOffset") {
			// Create DatePicker for Date display fields
			if (oViewField.displayFormat === "Date") {
				oTemplate = new DatePicker({
					dateValue: {
						path: oViewField.name
					}
				});
			} else {
				oType = new DateTime();
			}
		} else if (oViewField.type === "Edm.Decimal") {
			oType = new Float();
		} else if (oViewField.type === "Edm.Boolean") {
			oTemplate = new CheckBox({
				selected: {
					path: oViewField.name
				}
			});
		}

		// semantic link
		if (oViewField.semanticObject && (!bBlockSmartLinkCreation)) {
			oTemplate = this._createSmartLinkFieldTemplate(oViewField, oType, jQuery.proxy(function() {
				return this._createEditableTemplate(oViewField, true);
			}, this));
		}

		// TODO: ComboBox handling!

		// Default ==> sap.m.Input
		if (!oTemplate) {

			oTemplate = new Input({
				value: {
					path: oViewField.name,
					type: oType
				}
			});

			if (oViewField.isCurrencyField) {
				oTemplate.bindProperty("description", {
					path: oViewField.unit
				});
				oTemplate.setTextAlign("End");
				oTemplate.setFieldWidth("80%");
			}

			if (oViewField.oValueListAnnotation) {
				this._associateValueHelpAndSuggest(oTemplate, oViewField);
			}

		}

		return oTemplate;
	};

	/**
	 * Associates the control with a ValueHelp Dialog and suggest using the details retrieved from the metadata (annotation)
	 * 
	 * @param {object} oControl - The control
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @private
	 */
	ControlProvider.prototype._associateValueHelpAndSuggest = function(oControl, oFieldViewMetadata) {
		oControl.setShowValueHelp(true);
		this._aValueHelpProvider.push(new sap.ui.comp.providers.ValueHelpProvider({
			annotation: oFieldViewMetadata.oValueListAnnotation,
			additionalAnnotations: oFieldViewMetadata.additionalAnnotations,
			control: oControl,
			model: this._oParentODataModel,
			preventInitialDataFetchInValueHelpDialog: true,
			takeOverInputValue: false,
			fieldName: oFieldViewMetadata.fieldName,
			type: oFieldViewMetadata.type,
			maxLength: oFieldViewMetadata.maxLength,
			displayFormat: oFieldViewMetadata.displayFormat,
			displayBehaviour: oFieldViewMetadata.displayBehaviour,
			title: oFieldViewMetadata.label
		}));

		oControl.setShowSuggestion(true);
		oControl.setFilterSuggests(false);
		this._aValueListProvider.push(new sap.ui.comp.providers.ValueListProvider({
			annotation: oFieldViewMetadata.oValueListAnnotation,
			control: oControl,
			model: this._oParentODataModel,
			typeAheadEnabled: true,
			aggregation: "suggestionRows",
			displayFormat: oFieldViewMetadata.displayFormat
		}));
	};

	/**
	 * Creates and extends the field view with a template for display only UI content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {boolean} bBlockSmartLinkCreation - if true, no SmartLink is created independent of the semanitcObject notation
	 * @returns {sap.ui.core.Control} the template control
	 * @private
	 */
	ControlProvider.prototype._createDisplayOnlyTemplate = function(oViewField, bBlockSmartLinkCreation) {
		var oTemplate = null, oType = null, sAlign;
		if (oViewField.type === "Edm.DateTime" || oViewField.type === "Edm.DateTimeOffset") {
			// Create Date type for Date display fields
			if (oViewField.displayFormat === "Date") {
				oType = new Date(this._oDateFormatSettings);
			} else {
				oType = new DateTime();
			}
		} else if (oViewField.type === "Edm.Decimal") {
			oType = new Float();
			sAlign = "End";
		}

		if (oViewField.isCurrencyField) {
			oTemplate = this._createCurrencyFieldTemplate(oViewField);
		} else if (oViewField.semanticObject && (!bBlockSmartLinkCreation)) {
			oTemplate = this._createSmartLinkFieldTemplate(oViewField, oType, jQuery.proxy(function() {
				return this._createDisplayOnlyTemplate(oViewField, true);
			}, this));
		} else {
			oTemplate = new Text({
				wrapping: false,
				textAlign: sAlign,
				text: {
					path: oViewField.name,
					type: oType
				}
			});
		}

		oViewField.align = sAlign;

		return oTemplate;
	};

	/**
	 * Creates and extends the field view with a template for currency (display only) content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the binding data type
	 * @param {function} fCreateControl - callback function which creates the control which would have been created instead of the SmartLink
	 * @private
	 */
	ControlProvider.prototype._createSmartLinkFieldTemplate = function(oViewField, oType, fCreateControl) {
		// semantic link
		var oTemplate = new SmartLink({
			semanticObject: oViewField.semanticObject,
			semanticObjectLabel: oViewField.label,
			fieldName: oViewField.name,
			text: {
				path: oViewField.name,
				type: oType
			}
		});

		oTemplate.setCreateControlCallback(fCreateControl);

		return oTemplate;
	};

	/**
	 * Creates and extends the field view with a template for currency (display only) content
	 * 
	 * @param {object} oViewField - the view field
	 * @private
	 */
	ControlProvider.prototype._createCurrencyFieldTemplate = function(oViewField) {
		var oTemplate, oValueText, oCurrencyText;

		if (!this._oCurrencyFormatter) {
			jQuery.sap.require("sap.ui.core.format.NumberFormat");
			this._oCurrencyFormatter = sap.ui.core.format.NumberFormat.getCurrencyInstance({
				showMeasure: false
			});
			// Whitespace characters to align values
			this._FIGURE_SPACE = '\u2007';
			this._PUNCTUATION_SPACE = '\u2008';
			// Default currency precision
			this._iMaxCurrencyDigits = 3;

			// Formatter function for amount part
			this._fCurrencyFormatter = jQuery.proxy(function(oAmount, sCurrency) {
				// Adapted logic from sap.ui.unified.Currency to implement basic padding for some currencies (Ex: JPY)
				var sValue, iCurrencyDigits, iPadding;
				if (oAmount === undefined || oAmount === null || !sCurrency || sCurrency === "*") {
					return "";
				}
				// Get the currency digits
				iCurrencyDigits = this._oCurrencyFormatter.oLocaleData.getCurrencyDigits(sCurrency);

				// Get the formatted numeric value
				sValue = this._oCurrencyFormatter.format(oAmount, sCurrency);

				// Add padding for decimal "."
				if (iCurrencyDigits === 0) {
					sValue += this._PUNCTUATION_SPACE;
				}
				// Calculate and set padding for missing currency digits
				iPadding = this._iMaxCurrencyDigits - iCurrencyDigits;
				if (iPadding) {
					sValue = jQuery.sap.padRight(sValue, this._FIGURE_SPACE, sValue.length + iPadding);
				}

				return sValue;
			}, this);

			// Enable Currency symbol handling via configuration
			if (this._oCurrencyFormatSettings && this._oCurrencyFormatSettings.showCurrencySymbol) {
				// Formatter function for currency symbol conversion
				this._fCurrencySymbolFormatter = jQuery.proxy(function(sCurrency) {
					if (!sCurrency || sCurrency === "*") {
						return "";
					}
					return this._oCurrencyFormatter.oLocaleData.getCurrencySymbol(sCurrency);
				}, this);
			}
		}

		oValueText = new Text({
			wrapping: false,
			textAlign: "End",
			text: {
				parts: [
					{
						path: oViewField.name,
						type: new Float()
					}, {
						path: oViewField.unit
					}
				],
				formatter: this._fCurrencyFormatter,
				useRawValues: true
			}
		});

		oCurrencyText = new Text({
			wrapping: false,
			textAlign: "Begin",
			width: "2.5em",
			text: {
				path: oViewField.unit,
				formatter: this._fCurrencySymbolFormatter
			}
		});
		// Create currency format using HBox --> we need to 2 controls to properly align the numeric and currency part
		oTemplate = new HBox({
			justifyContent: "End",
			items: [
				oValueText, oCurrencyText
			]
		});

		return oTemplate;
	};

	/**
	 * Calculates and sets additional flags and attributes for a field
	 * 
	 * @param {object} oFieldODataMetadata - OData metadata for the field
	 * @returns {object} the field view metadata
	 * @private
	 */
	ControlProvider.prototype._createFieldMetadata = function(oFieldODataMetadata) {
		var oFieldViewMetadata = {};

		oFieldViewMetadata.fullName = oFieldODataMetadata.fullName;
		oFieldViewMetadata.type = oFieldODataMetadata.type;
		oFieldViewMetadata.name = oFieldODataMetadata.name;
		oFieldViewMetadata.displayFormat = oFieldODataMetadata.displayFormat;
		oFieldViewMetadata.maxLength = oFieldODataMetadata.maxLength;
		oFieldViewMetadata.precision = oFieldODataMetadata.precision;
		oFieldViewMetadata.scale = oFieldODataMetadata.scale;
		oFieldViewMetadata.sortable = oFieldODataMetadata.sortable;
		oFieldViewMetadata.filterable = oFieldODataMetadata.filterable;
		oFieldViewMetadata.label = oFieldODataMetadata.fieldLabel || oFieldODataMetadata.name;
		oFieldViewMetadata.quickInfo = oFieldODataMetadata.quickInfo || oFieldViewMetadata.label;
		oFieldViewMetadata.aggregationRole = oFieldODataMetadata.aggregationRole;
		oFieldViewMetadata.unit = oFieldODataMetadata.unit;
		oFieldViewMetadata.isCurrencyField = this._isCurrencyField(oFieldODataMetadata);
		oFieldViewMetadata.filterType = this._getFilterType(oFieldODataMetadata);
		oFieldViewMetadata.entityName = oFieldODataMetadata.entityName;
		this._setAnnotationMetadata(oFieldViewMetadata);

		return oFieldViewMetadata;
	};

	/**
	 * Set any annotation(s) metadata on the control
	 * 
	 * @private
	 */
	ControlProvider.prototype._setAnnotationMetadata = function(oFieldViewMetadata) {
		var mAnnotation = null;
		if (!this.useSmartField && oFieldViewMetadata && oFieldViewMetadata.fullName) {
			// Update with ValueList annotation data
			mAnnotation = this._oMetadataAnalyser.getValueListAnnotation(oFieldViewMetadata.fullName);
			if (mAnnotation) {
				oFieldViewMetadata.oValueListAnnotation = mAnnotation.primaryValueListAnnotation;
				oFieldViewMetadata.additionalAnnotations = mAnnotation.additionalAnnotations;
			}
			// Update with SemanticObject annotation data
			mAnnotation = this._oMetadataAnalyser.getSemanticObjectAnnotation(oFieldViewMetadata.fullName);
			if (mAnnotation) {
				oFieldViewMetadata.semanticObject = mAnnotation.semanticObject;
			}
		}
	};

	/**
	 * Returns a flag indicating whether the field is a CurrencyField (determined from unit)
	 * 
	 * @param {object} oField - OData metadata for the field
	 * @returns {boolean}
	 * @private
	 */
	ControlProvider.prototype._isCurrencyField = function(oField) {
		var bIsCurrencyField = false, oODataField, iLen, oUnitField;

		if (!this.useSmartField && this._aODataFieldMetadata) {
			iLen = this._aODataFieldMetadata.length;
			// Get the currency field
			while (iLen--) {
				oODataField = this._aODataFieldMetadata[iLen];
				if (oODataField.name === oField.unit) {
					oUnitField = oODataField;
					break;
				}
			}
			// Check if the field has semantics="currency-code"
			if (oUnitField && oUnitField.semantics === "currency-code") {
				bIsCurrencyField = true;
			}
		}
		return bIsCurrencyField;
	};

	/**
	 * Returns the filterType of the field based on metadata, else undefined
	 * 
	 * @param {object} oField - OData metadata for the field
	 * @returns {string}
	 * @private
	 */
	ControlProvider.prototype._getFilterType = function(oField) {
		if (oField.type === "Edm.Decimal") {
			return "numeric";
		} else if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
			return "date";
		}
		return undefined;
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	ControlProvider.prototype.destroy = function() {
		var i;
		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		if (this._aValueHelpProvider) {
			i = this._aValueHelpProvider.length;
			while (i--) {
				this._aValueHelpProvider[i].destroy();
			}
		}
		this._aValueHelpProvider = null;

		if (this._aValueListProvider) {
			i = this._aValueListProvider.length;
			while (i--) {
				this._aValueListProvider[i].destroy();
			}
		}

		if (this._oHelper) {
			this._oHelper.destroy();
		}

		this._oHelper = null;
		this._mSmartField = null;
		this._aValueListProvider = null;
		this._aODataFieldMetadata = null;
		this._oCurrencyFormatter = null;
		this.bIsDestroyed = true;
	};

	return ControlProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ControlProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.TableProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the view metadata required for SmartTable using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.TableProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/TableProvider",['jquery.sap.global', 'sap/ui/comp/odata/MetadataAnalyser', './ControlProvider'],
	function(jQuery, MetadataAnalyser, ControlProvider) {
	"use strict";


	/**
	 * Constructs a class to generate the view/data model metadata for the SmartTable from the SAP-Annotations metadata
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object}
	 *            mPropertyBag - PropertyBag having members model, entitySet
	 * @author Pavan Nayak
	 */
	var TableProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this.sEntitySet = mPropertyBag.entitySet;
			this._sIgnoredFields = mPropertyBag.ignoredFields;
			this.isEditableTable = mPropertyBag.isEditableTable;
			this.useSmartField = mPropertyBag.useSmartField;
			try {
				this._oDateFormatSettings = mPropertyBag.dateFormatSettings ? JSON.parse(mPropertyBag.dateFormatSettings) : undefined;
				this._oCurrencyFormatSettings = mPropertyBag.currencyFormatSettings ? JSON.parse(mPropertyBag.currencyFormatSettings) : undefined;				
				this._oDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			} catch (ex) {
				// Invalid dateformat provided!
			}
		}
		this._aODataFieldMetadata = [];
		this._aTableViewMetadata = [];
		this._aIgnoredFields = [];
		this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel);
		this._intialiseMetadata();
	};
	
	/**
	 * Initialises the necessary table metadata
	 * 
	 * @private
	 */
	TableProvider.prototype._intialiseMetadata = function() {
		var aTableViewMetadata = [], i, iLen = 0, oField, oTableViewField, fSorter, sSupportedFormats;
		this._aODataFieldMetadata = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sEntitySet);
		this._oLineItemAnnotation = this._oMetadataAnalyser.getLineItemAnnotation(this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.sEntitySet));
		sSupportedFormats = this._oMetadataAnalyser.getEntityContainerAttribute("supported-formats");
		if (sSupportedFormats) {
			this._bSupportsExcelExport = sSupportedFormats.indexOf("xlsx") > -1;
		}
		this._generateIgnoredFieldsArray();
	
		if (this._aODataFieldMetadata) {
			iLen = this._aODataFieldMetadata.length;
		}
	
		this._oControlProvider = new ControlProvider({
			metadataAnalyser: this._oMetadataAnalyser,
			model: this._oParentODataModel,
			fieldsMetadata: this._aODataFieldMetadata,
			dateFormatSettings: this._oDateFormatSettings,
			currencyFormatSettings: this._oCurrencyFormatSettings,
			defaultDropDownDisplayBehaviour: this._oDefaultDropDownDisplayBehaviour,
			useSmartField: this.useSmartField,
			entitySet : this.sEntitySet
		});
	
		this._oFieldSemanticObjectMap = {};
	
		for (i = 0; i < iLen; i++) {
			oField = this._aODataFieldMetadata[i];
			// Ignore the fields in the ignored list -or- the one marked with visible="false" in annotation
			if (this._aIgnoredFields.indexOf(oField.name) > -1 || !oField.visible) {
				continue;
			}
			oTableViewField = this._oControlProvider.getFieldViewMetadata(oField, this.isEditableTable);
			this._enrichWithTableViewMetadata(oField, oTableViewField);
			aTableViewMetadata.push(oTableViewField);
	
			if (oTableViewField.semanticObject) {
				this._oFieldSemanticObjectMap[oTableViewField.name] = oTableViewField.semanticObject;
			}
		}
	
		// Sorter function for sorting based on index (undefined has lower prio)
		fSorter = function(field1, field2) {
			if (field1.index || field1.index === 0) {
				if (field2.index || field2.index === 0) {
					// both fields have an index --> return the difference
					return field1.index - field2.index;
				}
				// Only field1 has an index --> it should be shown before field2
				return -1;
			}
			if (field2.index || field2.index === 0) {
				// Only field2 has an index --> field1 should be shown after field2
				return 1;
			}
			// both are equal (in our case no index present) --> keep the existing order
			return 0;
		};
		// Sort the array based on LineItem annotation order
		this._aTableViewMetadata = aTableViewMetadata.sort(fSorter);
	};
	
	/**
	 * Get the field semantic object map.
	 * 
	 * @returns {object}
	 * @public
	 */
	TableProvider.prototype.getFieldSemanticObjectMap = function() {
		return this._oFieldSemanticObjectMap;
	};
	
	/**
	 * Get the fields that can be added as Columns
	 * 
	 * @returns {Array}
	 * @public
	 */
	TableProvider.prototype.getTableViewMetadata = function() {
		return this._aTableViewMetadata;
	};
	
	/**
	 * Returns a flag indicating whether excel export is supported by this table (OData service).
	 * 
	 * @returns {boolean}
	 * @public
	 */
	TableProvider.prototype.getSupportsExcelExport = function() {
		return this._bSupportsExcelExport;
	};
	
	/**
	 * Returns a flag indicating whether date handling with UTC is enabled for the table.
	 * 
	 * @returns {boolean}
	 * @public
	 */
	TableProvider.prototype.getIsUTCDateHandlingEnabled = function() {
		return this._oDateFormatSettings ? this._oDateFormatSettings.UTC : false;
	};
	
	/**
	 * Generate an array of fields that need to be ignored in the SmartTable (if any)
	 * 
	 * @private
	 */
	TableProvider.prototype._generateIgnoredFieldsArray = function() {
		if (this._sIgnoredFields) {
			this._aIgnoredFields = this._sIgnoredFields.split(",");
		}
	};
	
	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 * 
	 * @param {object}
	 *            oFieldODataMetadata - OData metadata for the table field
	 * @param {object}
	 *            oFieldViewMetadata - the table view field
	 * @private
	 */
	TableProvider.prototype._enrichWithTableViewMetadata = function(oFieldODataMetadata, oFieldViewMetadata) {
		// Label is already set and can be updated if present in the LineItem annotation
		this._updateLabel(oFieldViewMetadata);
		oFieldViewMetadata.isInitiallyVisible = this._isInitiallyVisible(oFieldODataMetadata);
		oFieldViewMetadata.index = this._getIndex(oFieldODataMetadata);
		oFieldViewMetadata.width = this._getWidth(oFieldODataMetadata);
		// aggregation-role= "measure" --> columns shall be summed on the UI (analytical table)
		oFieldViewMetadata.summed = oFieldODataMetadata.aggregationRole === "measure";
	};
	
	/**
	 * Returns a flag indicating whether the field should be initially visible on the UI *
	 * 
	 * @param {object}
	 *            oField - OData metadata for the table field
	 * @returns {boolean}
	 * @private
	 */
	TableProvider.prototype._isInitiallyVisible = function(oField) {
		var bInitiallyVisible = false;
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields) {
			bInitiallyVisible = this._oLineItemAnnotation.fields.indexOf(oField.name) > -1;
		}
		return bInitiallyVisible;
	};
	
	/**
	 * Returns the index if the field was found, else undefined
	 * 
	 * @param {object}
	 *            oField - OData metadata for the table field
	 * @returns {string}
	 * @private
	 */
	TableProvider.prototype._getIndex = function(oField) {
		var iIndex;
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields) {
			iIndex = this._oLineItemAnnotation.fields.indexOf(oField.name);
		}
		if (iIndex > -1) {
			return iIndex;
		}
		return undefined;
	};
	
	/**
	 * Updated the label from LineItem annotation metadata (if it exists)
	 * 
	 * @param {object}
	 *            oField - OData view metadata of the field
	 * @private
	 */
	TableProvider.prototype._updateLabel = function(oField) {
		var sLabel;
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.labels) {
			sLabel = this._oLineItemAnnotation.labels[oField.name];
		}
		if (sLabel) {
			oField.label = sLabel;
	
			if (oField.template && oField.template.setSemanticObjectLabel){ //SmartLink needs to know the overwritten name, as it is displayed in the navigation popover
				oField.template.setSemanticObjectLabel(oField.label);
			}
		}
	};
	
	/**
	 * Returns the width from the metadata attributes. undefined if there is no width specified
	 * 
	 * @param {object}
	 *            oField - OData metadata for the table field
	 * @returns {string} - width of the filter field
	 * @private
	 */
	TableProvider.prototype._getWidth = function(oField) {
		var sWidth = oField.maxLength || oField.precision, iWidth;
	
		// Force set the width to 9em for date fields
		if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
			sWidth = "9em";
		} else if (sWidth) {
			iWidth = parseInt(sWidth, 10);
			if (!isNaN(iWidth)) {
				// use a max initial width of 50 (+.75) em
				if (iWidth > 50) {
					iWidth = 50;
				}
				// use a min width of 1.5 (+.75) em
				if (iWidth <= 1) {
					iWidth = 1.5;
				}
				// Add additional .75 em (~12px) to avoid showing ellipsis in some cases!
				sWidth = iWidth + 0.75 + "em";
			}
		}
		return sWidth;
	};
	
	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	TableProvider.prototype.destroy = function() {
		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		this._aODataFieldMetadata = null;
		this._aTableViewMetadata = null;
		this._aIgnoredFields = null;
		this.bIsDestroyed = true;
	};
	

	return TableProvider;

}, /* bExport= */ true);

}; // end of sap/ui/comp/providers/TableProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.DialogContent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.flexibility.DialogContent.
jQuery.sap.declare('sap.ui.comp.smartform.flexibility.DialogContent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexAlignItems'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexAlignSelf'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexDirection'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexJustifyContent'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/DialogContent",['jquery.sap.global', 'sap/m/Button', 'sap/m/FlexAlignItems', 'sap/m/FlexAlignSelf', 'sap/m/FlexDirection', 'sap/m/FlexItemData', 'sap/m/FlexJustifyContent', 'sap/m/HBox', 'sap/m/VBox', 'sap/ui/comp/library', 'sap/ui/comp/odata/FieldSelector', './FieldList', 'sap/ui/core/Control', 'sap/ui/core/ResizeHandler', 'sap/ui/fl/registry/Settings', 'sap/ui/layout/Grid'],
	function(jQuery, Button, FlexAlignItems, FlexAlignSelf, FlexDirection, FlexItemData, FlexJustifyContent, HBox, VBox, library, FieldSelector, FieldList, Control, ResizeHandler, Settings, Grid) {
	"use strict";


	
	/**
	 * Constructor for a new smartform/flexibility/DialogContent.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The content of the personalization dialog of the SmartForm
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.flexibility.DialogContent
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var DialogContent = Control.extend("sap.ui.comp.smartform.flexibility.DialogContent", /** @lends sap.ui.comp.smartform.flexibility.DialogContent.prototype */ { metadata : {
	
		library : "sap.ui.comp",
		aggregations : {
	
			/**
			 * Content of the control itself
			 */
			content : {type : "sap.ui.core.Control", multiple : false}
		}
	}});
	
	
	/**
	 * Initialisation
	 * 
	 * @public
	 */
	DialogContent.prototype.init = function() {
		this._oScrollView = new sap.m.ScrollContainer();
		var smartFormDialog = sap.ui.getCore().byId("smartFormPersDialog");
		if (smartFormDialog) {
			this._oResizeDialogHandlerId = ResizeHandler.register(smartFormDialog, jQuery.proxy(this._handleResizeDialog, this));
		}
	
		this._textResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this._constructLayout();
		this._createButtons();
		this._createFieldList();
		this._createFieldSelector();
		this._initiateBinding();
		this.addStyleClass("sapUiSizeCompact");
		this._sFirstIdPart = undefined;
	};
	
	DialogContent.prototype._handleResizeDialog = function() {
		if (this._oScrollView) {
			var height = jQuery("#smartFormPersDialog-cont").height();
			var headerHeight = jQuery("#smartFormPersDialogFieldListHeader").height();
			this._oScrollView.setHeight(height - headerHeight + "px");
		}
	};
	
	/**
	 * Initialises the binding of the subordinate controls like move up/down button, field list, field selector
	 * 
	 * @private
	 */
	DialogContent.prototype._initiateBinding = function() {

		this._oFieldList.bindAggregation("nodes", {
			path: "/children",
			factory: this._createNodeFactoryFunction.bind(this)
		});
	
		this._oFieldList.attachSelectionChanged(this._onSelectionChanged.bind(this));
	
		this._oBtnMoveDown.bindProperty("enabled", {
			path: "/isMoveDownButtonEnabled"
		});
		this._oBtnMoveUp.bindProperty("enabled", {
			path: "/isMoveUpButtonEnabled"
		});
	
		this._oBtnMoveBottom.bindProperty("enabled", {
			path: "/isMoveBottomButtonEnabled"
		});
		this._oBtnMoveTop.bindProperty("enabled", {
			path: "/isMoveTopButtonEnabled"
		});
	
	};
	
	/**
	 * Sets the first part of new control ids for the view context
	 * 
	 * @param {string} sId	Control Id
	 * @public
	 */
	DialogContent.prototype.setViewId = function(sId) {
		this._sViewId = sId;
	};
	
	/**
	 * Returns Ids of the assigned changes of the component (correctly sorted)
	 * 
	 * @param {sap.ui.model.odata.ODataModel} oODataModel The list of fields will be extracetd from the models metadata
	 * @param {string} sEntityType The entity type whose fields could be selected
	 * @param {string} sComponentName The name of the SAPUI5 component
	 * @param {array} aIgnoredFields List of fields which should be ignored.
	 * @public
	 */
	DialogContent.prototype.initialiseODataFieldSelector = function(oODataModel, sEntityType, sComponentName, aIgnoredFields) {

		var oODataFieldSelector;
		var bShowCreateExtFieldButton = false;
		oODataFieldSelector = this._oFieldSelector;
		if (oODataFieldSelector) {
			// get the information of the
			Settings.getInstance(sComponentName).then(function(oSettings) {
				if (oSettings.isModelS) {
					bShowCreateExtFieldButton = oSettings.isModelS();
				}
				oODataFieldSelector.setModel(oODataModel, sEntityType, bShowCreateExtFieldButton, aIgnoredFields);
			});
		}
	};
	
	/**
	 * Factory function used for the recursive binding of the FieldListNode
	 * 
	 * @param {string} sId	id of the to-be-created FieldListNode
	 * @param {object} oContext Binding Context
	 * @returns {FieldListNode} Newly created FieldListNode
	 * @private
	 */
	DialogContent.prototype._createNodeFactoryFunction = function(sId, oContext) {

		var nodeBindingSettings, oNode;
	
		nodeBindingSettings = {
			label: {
				path: "label"
			},
			nodes: {
				path: oContext.getPath() + "/children",
				factory: this._createNodeFactoryFunction.bind(this)
			},
			isSelected: {
				path: "isSelected"
			},
			isVisible: {
				path: "isVisible"
			}
		};
		oNode = new sap.ui.comp.smartform.flexibility.FieldListNode(sId, nodeBindingSettings);
		return oNode;
	};
	
	/**
	 * Event handler called when the selection of a root FieldListNode has changed
	 * 
	 * @param {object} oEvent Event
	 * @private
	 */
	DialogContent.prototype._onSelectionChanged = function(oEvent) {

		var oSelectedFieldListNode, oNode;
		oSelectedFieldListNode = oEvent.getParameter('node');
		oNode = oSelectedFieldListNode.getBindingContext().getObject();
	
		this._changeSelection(oNode);
	
		this.getModel().updateBindings();
	
	};
	
	/**
	 * Changes the selected FieldListNode. Unselects previously selected FieldListNode
	 * 
	 * @param {object} oNodeToBeSelected	JSON object from the model representing the newly selected node
	 * @private
	 */
	DialogContent.prototype._changeSelection = function(oNodeToBeSelected) {

	
		// Deselect previously selected node
		if (this._oSelectedFieldListNodeData) {
			this._oSelectedFieldListNodeData.isSelected = false;
		}
	
		// select newly selected node
		this._oSelectedFieldListNodeData = oNodeToBeSelected;
		this._oSelectedFieldListNodeData.isSelected = true;
	
		this._readDataFromModelAndUpdateMoveButtonEnabledState();
	
		this.getModel().updateBindings();
	};
	
	/**
	 * Reads the data from the model and recalculate the move button enabled state
	 * 
	 * @private
	 */
	DialogContent.prototype._readDataFromModelAndUpdateMoveButtonEnabledState = function() {

		var oData;
		oData = this._getDataFromModel();
		this._updateMoveButtonEnabledState(oData);
	
	};
	
	/**
	 * Recalculates the move button enabled state
	 * 
	 * @param {object} oData The data of the whole JSON model
	 * @private
	 */
	DialogContent.prototype._updateMoveButtonEnabledState = function(oData) {

		var fn, bIsMoveDownEnabled, bIsMoveUpEnabled, bIsMoveBottomEnabled, bIsMoveTopEnabled;
	
		fn = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {
			var nParentIndex;
			nParentIndex = aAdjacenceList[nLevelInAdjacenceList - 1].indexOf(oNode.parent);
	
			bIsMoveDownEnabled = oNode.parent.children.length - 1 > oNode.index;
			bIsMoveDownEnabled = bIsMoveDownEnabled || (aAdjacenceList[nLevelInAdjacenceList - 1].length - 1 > nParentIndex);
			bIsMoveUpEnabled = (oNode.index > 0) || (nParentIndex > 0);
			bIsMoveBottomEnabled = bIsMoveDownEnabled;
			bIsMoveTopEnabled = bIsMoveUpEnabled;
		};
	
		if (this._oSelectedFieldListNodeData) {
			this._findNodeInDataModel(oData, this._oSelectedFieldListNodeData.id, fn);
		} else { // nothing selected
			bIsMoveDownEnabled = false;
			bIsMoveUpEnabled = false;
			bIsMoveBottomEnabled = false;
			bIsMoveTopEnabled = false;
		}
	
		oData.isMoveDownButtonEnabled = bIsMoveDownEnabled;
		oData.isMoveUpButtonEnabled = bIsMoveUpEnabled;
		oData.isMoveBottomButtonEnabled = bIsMoveBottomEnabled;
		oData.isMoveTopButtonEnabled = bIsMoveTopEnabled;
	};
	
	DialogContent.prototype._constructLayout = function() {
		this.oLayout = new HBox({
			direction: FlexDirection.Row
		});
		this.oLayoutLeft = new VBox({
			direction: FlexDirection.Column,
			layoutData: new FlexItemData({
				order: 1,
				growFactor: 2
			})
		});
		this.oLayoutLeft.addStyleClass("sapUiCompDialogContentFieldListContainer");
	
		this.oLayoutMiddle = new VBox({
			direction: FlexDirection.Column,
			layoutData: new FlexItemData({
				order: 2,
				growFactor: 1
			})
		});
		this.oLayoutMiddle.addStyleClass("sapUiCompDialogContentMiddle");
	
		this.oLayoutTopLeft = new Grid("smartFormPersDialogFieldListHeader");
		this.oLayoutTopLeft.addStyleClass("sapUiCompDialogContentFieldListContainerTop");
	
		this.oLayoutLeft.addItem(this.oLayoutTopLeft);
	
		this.oLayoutRight = new VBox({
			direction: FlexDirection.Column,
			layoutData: new FlexItemData({
				order: 3,
				growFactor: 9
			})
		});
	
		this.oLayout.addItem(this.oLayoutLeft);
		this.oLayout.addItem(this.oLayoutMiddle);
		this.oLayout.addItem(this.oLayoutRight);
		this.setContent(this.oLayout);
	};
	
	/**
	 * Creates an instance of the FieldList Control
	 * 
	 * @private
	 */
	DialogContent.prototype._createFieldList = function() {
		this._oScrollView.setWidth("100%");
		this._oScrollView.setVertical(true);
	
		this._oFieldList = new FieldList(this.getId() + '-FieldList');
		this._oScrollView.addContent(this._oFieldList);
		this._handleResizeDialog();
	
		this.oLayoutLeft.addItem(this._oScrollView);
	};
	
	/**
	 * Creates an instance of the FieldSelector Control
	 * 
	 * @private
	 */
	DialogContent.prototype._createFieldSelector = function() {
		this._oFieldSelector = new FieldSelector({
			layoutData: new FlexItemData({
				order: 3,
				growFactor: 9
			})
		});
		this.oLayoutRight.addItem(this._oFieldSelector);
	};
	
	/**
	 * Creates the Move up/down buttons, add group button, add field button
	 * 
	 * @private
	 */
	DialogContent.prototype._createButtons = function() {
		var sText, sTooltip;
	
		this._oBtnMoveBottom = new Button(this.getId() + '-MoveBottomButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M3 S3"
			})
		});
		this._oBtnMoveBottom.setIcon("sap-icon://expand-group");
		this._oBtnMoveBottom.attachPress(this._onMoveBottomClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_MOVE_BOTTOM");
		this._oBtnMoveBottom.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnMoveBottom);
	
		this._oBtnMoveDown = new Button(this.getId() + '-MoveDownButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M3 S3"
			})
		});
		this._oBtnMoveDown.setIcon("sap-icon://slim-arrow-down");
		this._oBtnMoveDown.attachPress(this._onMoveDownClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_MOVE_DOWN");
		this._oBtnMoveDown.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnMoveDown);
	
		this._oBtnMoveUp = new Button(this.getId() + '-MoveUpButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M3 S3"
			})
		});
		this._oBtnMoveUp.setIcon("sap-icon://slim-arrow-up");
		this._oBtnMoveUp.attachPress(this._onMoveUpClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_MOVE_UP");
		this._oBtnMoveUp.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnMoveUp);
	
		this._oBtnMoveTop = new Button(this.getId() + '-MoveTopButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M3 S3"
			})
		});
		this._oBtnMoveTop.setIcon("sap-icon://collapse-group");
		this._oBtnMoveTop.attachPress(this._onMoveTopClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_MOVE_TOP");
		this._oBtnMoveTop.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnMoveTop);
	
		this._oBtnAddGroup = new Button(this.getId() + '-AddGroupButton', {
			layoutData : new sap.ui.layout.GridData({
				span : "L4 M12 S12"
			})
		});
		sText = this._textResources.getText("FORM_PERS_DIALOG_ADD_GROUP");
		this._oBtnAddGroup.setText(sText);
		this._oBtnAddGroup.attachPress(this._onAddGroupClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_ADD_GROUP");
		this._oBtnAddGroup.setTooltip(sTooltip);
		this.oLayoutTopLeft.addContent(this._oBtnAddGroup);
	
		this._oBtnAddField = new Button(this.getId() + '-AddFieldButton');
		this._oBtnAddField.setIcon("sap-icon://slim-arrow-left");
		this._oBtnAddField.attachPress(this._onAddFieldClick.bind(this));
		sTooltip = this._textResources.getText("FORM_PERS_DIALOG_ADD_FIELD");
		this._oBtnAddField.setTooltip(sTooltip);
		this.oLayoutMiddle.addItem(this._oBtnAddField);
	};
	
	/**
	 * Event handler called when the move up button is clicked
	 * 
	 * @private
	 */
	DialogContent.prototype._onMoveUpClick = function() {

		var oModel, oData, sId;
	
		oModel = this.getModel();
		if (oModel) {
			sId = this._getIdOfSelectedFieldListNode();
			oData = this._getDataFromModel();
			this._executeMoveUp(oData, sId);
			this._updateMoveButtonEnabledState(oData);
			oModel.setData(oData);
		}
	};
	
	/**
	 * Event handler called when the move down button is clicked
	 * 
	 * @private
	 */
	DialogContent.prototype._onMoveDownClick = function() {

		var oData, sId, oModel;
	
		oModel = this.getModel();
		if (oModel) {
			sId = this._getIdOfSelectedFieldListNode();
			oData = this._getDataFromModel();
			this._executeMoveDown(oData, sId);
			this._updateMoveButtonEnabledState(oData);
			oModel.setData(oData);
		}
	};
	
	/**
	 * Event handler called when the move top button is clicked
	 * 
	 * @private
	 */
	DialogContent.prototype._onMoveTopClick = function() {

		var oModel, oData, sId;
	
		oModel = this.getModel();
		if (oModel) {
			sId = this._getIdOfSelectedFieldListNode();
			oData = this._getDataFromModel();
			this._executeMoveTop(oData, sId);
			this._updateMoveButtonEnabledState(oData);
			oModel.setData(oData);
		}
	};
	
	/**
	 * Event handler called when the move bottom button is clicked
	 * 
	 * @private
	 */
	DialogContent.prototype._onMoveBottomClick = function() {

		var oData, sId, oModel;
	
		oModel = this.getModel();
		if (oModel) {
			sId = this._getIdOfSelectedFieldListNode();
			oData = this._getDataFromModel();
			this._executeMoveBottom(oData, sId);
			this._updateMoveButtonEnabledState(oData);
			oModel.setData(oData);
		}
	};
	
	/**
	 * Event handler called when the add group button is clicked
	 * 
	 * @private
	 */
	DialogContent.prototype._onAddGroupClick = function() {

		var oData, oModel;
	
		oModel = this.getModel();
		if (oModel) {
			oData = this._getDataFromModel();
			this._executeAddGroup(oData);
			oModel.setData(oData);
		}
	};
	
	/**
	 * Returns the id of the currently selected FieldListNode. Undefined if no FieldListNode is selected
	 * 
	 * @returns {string} Id of selected FieldListNode
	 * @private
	 */
	DialogContent.prototype._getIdOfSelectedFieldListNode = function() {

		var oNode;
		oNode = this._oSelectedFieldListNodeData;
	
		if (oNode) {
			return oNode.id;
		}
	};
	
	/**
	 * Event handler, called when add field button was clicked
	 * 
	 * @param {object} oEvent Event
	 * @private
	 */
	DialogContent.prototype._onAddFieldClick = function(oEvent) {
		var oModel, oData;
	
		oModel = this.getModel();
		if (oModel) {
			oData = this._getDataFromModel();
			this._executeAddField(oData);
			oModel.setData(oData);
		}
	};
	
	/**
	 * Calculates position where a new field would be added to. Basis for this calculation is the currently selected node.
	 * 
	 * @param {object} oData JSON data from model
	 * @returns {object} Map having a member 'parent' (new parent node) and 'index' (Position in parent's children collection)
	 * @private
	 */
	DialogContent.prototype._getParentAndIndexNodeForNewField = function(oData) {
		var sId, nIndex, oParentNode;
	
		// Search for the currently selected field list node and determine new parent
		sId = this._getIdOfSelectedFieldListNode();
		this._findNodeInDataModel(oData, sId, function(oNode) {
			if (oNode.type === 'group') {
				oParentNode = oNode;
				if (oParentNode.children && oParentNode.children.length) {
					nIndex = oParentNode.children.length;
				}
			} else {
				oParentNode = oNode.parent;
				nIndex = oNode.index + 1;
			}
		});
		// if no FieldNode was selected, append to last group
		if (!oParentNode) {
			oParentNode = this._getBottomGroup(oData);
			nIndex = oParentNode.children.length;
		}
	
		return {
			parent: oParentNode,
			index: nIndex
		};
	
	};
	
	/**
	 * Returns the last group
	 * 
	 * @param {object} oData JSON data from model returns {object} The very last group. Undefined if there are no groups.
	 * @returns {object} Parent node instance
	 * @private
	 */
	DialogContent.prototype._getBottomGroup = function(oData) {
		var oParentNode;
	
		if (oData && oData.children && oData.children.length > 0) {
			oParentNode = oData.children[oData.children.length - 1]; // get last element
		}
		return oParentNode;
	};
	
	/**
	 * Gets the data from the model
	 * 
	 * @returns {object} JSON data from model
	 * @private
	 */
	DialogContent.prototype._getDataFromModel = function() {

		var oModel;
	
		oModel = this.getModel();
		if (oModel) {
			return oModel.getData();
		}
	};
	
	/**
	 * Creates an adjacence list from the provided JSON tree. The data has a single root node and multiple children. Each child can have multiple children
	 * too. The tree depth is not limited. The adjacence list is an array of arrays. list[i] contains an ordered list of all nodes of the tree, having the
	 * depth i. This means list[0] equals the root node. As a side effect two additional properties will be added to all nodes of the model: - index:
	 * Contains the position of this node in the parent's children collection - parent: The parent of this node These properties can be removed with
	 * _destroyAdjacenceList
	 * 
	 * @param {object} oData The data from the JSON model
	 * @returns {Array} Adjacence list
	 * @private
	 */
	DialogContent.prototype._createAdjacenceList = function(oData) {

		var aAdjacenceList, fCreateAdjacenceList;
	
		aAdjacenceList = [];
		fCreateAdjacenceList = function(oNode, oParent, nIndex, nDepth) {
			oNode.index = nIndex;
			oNode.parent = oParent;
			aAdjacenceList[nDepth] = aAdjacenceList[nDepth] || [];
			aAdjacenceList[nDepth].push(oNode);
		};
	
		this._dfs(oData, fCreateAdjacenceList);
	
		return aAdjacenceList;
	};
	
	/**
	 * Removes the properties from the data model added, which were added when calling _createAdjacenceList
	 * 
	 * @param {object} oData The data from the JSON model
	 * @private
	 */
	DialogContent.prototype._destroyAdjacenceList = function(oData) {

		var fDestroyAdjacenceList;
	
		fDestroyAdjacenceList = function(oNode, oParent, nIndex, nDepth) {
			delete oNode.index;
			delete oNode.parent;
		};
	
		this._dfs(oData, fDestroyAdjacenceList);
	};
	
	/**
	 * DFS (depth first search) traverses the full graph an calls fn for each node. Method is recursive
	 * 
	 * @param {object} oData The data of the current node
	 * @param {function} fn Function to be called for each node
	 * @param {object} oParent The parent node
	 * @param {number} nIndex The index of the cirrent node within the parent's children collection
	 * @param {number} nDepth The depth within the tree of the current node
	 * @private
	 */
	DialogContent.prototype._dfs = function(oData, fn, oParent, nIndex, nDepth) {

		var i;
	
		if (!oData) {
			return;
		}
	
		nDepth = nDepth || 0;
		nIndex = nIndex || 0;
	
		fn(oData, oParent, nIndex, nDepth);
	
		if (oData && oData.children) {
			for (i = 0; i < oData.children.length; i++) {
				this._dfs(oData.children[i], fn, oData, i, nDepth + 1);
			}
		}
	};
	
	/**
	 * Searches for a node in the data tree and executes the funtion fn for this node
	 * 
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId oParent The parent node
	 * @param {function} fn Function to be executed for this node. Function will be called with these parameters: fn(oNode, nDepth, aAdjacenceList).
	 * @private
	 */
	DialogContent.prototype._findNodeInDataModel = function(oData, sId, fn) {

		var aAdjacenceList;
	
		aAdjacenceList = this._createAdjacenceList(oData);
	
		(function() {
			var nDepth, j, nMaxHierarchyDepth, length, oNode;
	
			nMaxHierarchyDepth = aAdjacenceList.length;
			for (nDepth = 0; nDepth < nMaxHierarchyDepth; nDepth++) {
				length = aAdjacenceList[nDepth].length;
				for (j = 0; j < length; j++) {
					oNode = aAdjacenceList[nDepth][j];
					if (oNode.id === sId) {
						fn(oNode, nDepth, aAdjacenceList);
						return;
					}
				}
			}
		}());
	
		this._destroyAdjacenceList(oData);
	};
	
	/**
	 * Moves a node down in the data model
	 * 
	 * @param {object} oNode The JSON node representing a FieldListNode to be moved down
	 * @param {number} nLevelInAdjacenceList Depth of the node in the tree
	 * @param {Array} aAdjacenceList Adjacence List
	 * @private
	 */
	DialogContent.prototype._moveDownNode = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

		var oNewParent, nOldParentIndex;
		if (oNode.index < oNode.parent.children.length - 1) { // node found --> move down (simple case)
			oNode.parent.children.splice(oNode.index, 1);
			oNode.parent.children.splice(oNode.index + 1, 0, oNode);
			return;
		} else if (oNode.index === oNode.parent.children.length - 1) { // move down (find new parent node)
			nOldParentIndex = aAdjacenceList[nLevelInAdjacenceList - 1].indexOf(oNode.parent);
			if (nOldParentIndex > -1) {
				oNewParent = aAdjacenceList[nLevelInAdjacenceList - 1][nOldParentIndex + 1];
				if (oNewParent) {
					oNode.parent.children.splice(oNode.index, 1);
					oNewParent.children = oNewParent.children || [];
					oNewParent.children.splice(0, 0, oNode);
					return;
				}
			}
		}
	};
	
	/**
	 * Moves a node up in the data model
	 * 
	 * @param {object} oNode The JSON node representing a FieldListNode to be moved up
	 * @param {number} nLevelInAdjacenceList Depth of the node in the tree
	 * @param {Array} aAdjacenceList Adjacence List
	 * @private
	 */
	DialogContent.prototype._moveUpNode = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

		var oNewParent, nOldParentIndex;
		if (oNode.index !== 0) { // node found --> move up (simple case)
			oNode.parent.children.splice(oNode.index, 1);
			oNode.parent.children.splice(oNode.index - 1, 0, oNode);
			return;
		} else if (oNode.index === 0) { // move up (find new parent node)
			nOldParentIndex = aAdjacenceList[nLevelInAdjacenceList - 1].indexOf(oNode.parent);
			if (nOldParentIndex >= 1) {
				oNewParent = aAdjacenceList[nLevelInAdjacenceList - 1][nOldParentIndex - 1];
				if (oNewParent) {
					oNode.parent.children.splice(oNode.index, 1);
					oNewParent.children = oNewParent.children || [];
					oNewParent.children.push(oNode);
					return;
				}
			}
		}
	};
	
	/**
	 * Moves a node down to the bottom in the data model
	 * 
	 * @param {object} oNode The JSON node representing a FieldListNode to be moved down to the bottom
	 * @param {number} nLevelInAdjacenceList Depth of the node in the tree
	 * @param {Array} aAdjacenceList Adjacence List
	 * @private
	 */
	DialogContent.prototype._moveBottomNode = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

	
		var oNewParent, nOldParentIndex;
		if (oNode.index < oNode.parent.children.length - 1) { // node found --> move bottom (simple case)
			oNode.parent.children.splice(oNode.index, 1);
			oNode.parent.children.push(oNode);
			return;
		} else if (oNode.index === oNode.parent.children.length - 1) { // move bottom (find new parent node)
			nOldParentIndex = aAdjacenceList[nLevelInAdjacenceList - 1].indexOf(oNode.parent);
			if (nOldParentIndex > -1) {
				oNewParent = aAdjacenceList[nLevelInAdjacenceList - 1][nOldParentIndex + 1];
				if (oNewParent) {
					oNode.parent.children.splice(oNode.index, 1);
					oNewParent.children = oNewParent.children || [];
					oNewParent.children.push(oNode);
					return;
				}
			}
		}
	};
	
	/**
	 * Moves a node up to the top in the data model
	 * 
	 * @param {object} oNode The JSON node representing a FieldListNode to be moved up to the top
	 * @param {number} nLevelInAdjacenceList Depth of the node in the tree
	 * @param {Array} aAdjacenceList Adjacence List
	 * @private
	 */
	DialogContent.prototype._moveTopNode = function(oNode, nLevelInAdjacenceList, aAdjacenceList) {

	
		var oNewParent, nOldParentIndex;
		if (oNode.index !== 0) { // node found --> move top (simple case)
			oNode.parent.children.splice(oNode.index, 1);
			oNode.parent.children.splice(0, 0, oNode);
			return;
		} else if (oNode.index === 0) { // move top (find new parent node)
			nOldParentIndex = aAdjacenceList[nLevelInAdjacenceList - 1].indexOf(oNode.parent);
			if (nOldParentIndex >= 1) {
				oNewParent = aAdjacenceList[nLevelInAdjacenceList - 1][nOldParentIndex - 1];
				if (oNewParent) {
					oNode.parent.children.splice(oNode.index, 1);
					oNewParent.children = oNewParent.children || [];
					oNewParent.children.splice(0, 0, oNode);
					return;
				}
			}
		}
	};
	
	/**
	 * Moves a node down in the data model
	 * 
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId The id of the node to be moved down
	 * @returns {object} Node in data model after move
	 * @private
	 */
	DialogContent.prototype._executeMoveDown = function(oData, sId) {

		return this._findNodeInDataModel(oData, sId, this._moveDownNode);
	};
	
	/**
	 * Moves a node up in the data model
	 * 
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId The id of the node to be moved up
	 * @returns {object} Node in the data model after the move
	 * @private
	 */
	DialogContent.prototype._executeMoveUp = function(oData, sId) {

		return this._findNodeInDataModel(oData, sId, this._moveUpNode);
	};
	
	/**
	 * Moves a node down to the bottom in the data model
	 * 
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId The id of the node to be moved down to the bottom
	 * @return {object} Bottom node in the data model
	 * @private
	 */
	DialogContent.prototype._executeMoveBottom = function(oData, sId) {

		return this._findNodeInDataModel(oData, sId, this._moveBottomNode);
	};
	
	/**
	 * Moves a node up to the top in the data model
	 * 
	 * @param {object} oData The data of the JSON model
	 * @param {String} sId The id of the node to be moved up to the top
	 * @returns {object} Top node in the data model
	 * @private
	 */
	DialogContent.prototype._executeMoveTop = function(oData, sId) {

		return this._findNodeInDataModel(oData, sId, this._moveTopNode);
	};
	
	/**
	 * Reads the selected field from the field selector and adds it to the data
	 * 
	 * @param {object} oData The data of the JSON model
	 * @private
	 */
	DialogContent.prototype._executeAddField = function(oData) {
		var oNewPosition, oNewNode;
		oNewPosition = this._getParentAndIndexNodeForNewField(oData);
	
		oNewNode = this._getNewNodeFromSelectedODataField(oData, this._getSelectedFieldFromFieldSelector());
		this._addField(oNewNode, oNewPosition.parent, oNewPosition.index);
	};
	
	/**
	 * Adds the new node to the specified position
	 * 
	 * @param {object} oNewNode The node to be added
	 * @param {object} oParentNode The new parent of the node
	 * @param {number} nIndex The position where the new node will be added into the parent's children collection. If undefined, the new node will be
	 *        appended as last node.
	 * @private
	 */
	DialogContent.prototype._addField = function(oNewNode, oParentNode, nIndex) {
	
		if (!oNewNode) {
			return;
		}
	
		// Add new field
		oParentNode.children = oParentNode.children || [];
		if (nIndex || nIndex === 0) {
			oParentNode.children.splice(nIndex, 0, oNewNode);
		} else {
			oParentNode.children.push(oNewNode);
		}
	};
	
	/**
	 * Gets the currently selected field from the OData Field Selector and creates and returns a new node which can be added to the model
	 * @param {object} oData	Data object
	 * @param {object} oSelectedField	Selected field instance
	 * @returns {object} The new node for the OData field
	 * @private
	 */
	DialogContent.prototype._getNewNodeFromSelectedODataField = function(oData, oSelectedField) {
		var bNodeAlreadyExists, oNewNode;
	
		if (!oSelectedField) {
			return null;
		}
	
	// create new entry
		oNewNode = {
			id: this._sViewId + oSelectedField.entityType + "_" + oSelectedField.name,
			entitySet: oSelectedField.entitySet,
			entityType: oSelectedField.entityType,
			label: oSelectedField.field, // "{" + oSelectedField.name + "/@sap:label}"
			valueProperty: "value",
			fieldValue: oSelectedField.name,
			jsType: "sap.ui.comp.smartfield.SmartField",
			isVisible: true,
			type: "field"
		};
	
	// check if the field was already created
		this._findNodeInDataModel(oData, oNewNode.id, function() {
			bNodeAlreadyExists = true;
		});
		if (bNodeAlreadyExists) {
			return null;
		}
	
		return oNewNode;
	};
	
	/**
	 * Gets the currently selected field from the OData Field Selector
	 * 
	 * @returns {object} Selected OData field as JSON object
	 * @private
	 */
	DialogContent.prototype._getSelectedFieldFromFieldSelector = function() {
		return this._oFieldSelector.getSelectedField();
	};
	
	/**
	 * Adds a new group as first element to the data
	 * 
	 * @param {object} oData The data of the JSON model
	 * @private
	 */
	DialogContent.prototype._executeAddGroup = function(oData) {
		var sText, oNewGroup;
		sText = this._textResources.getText("FORM_PERS_DIALOG_NEW_GROUP");
	
		// create new entry
		oNewGroup = {
			id: this._sViewId + jQuery.sap.uid(),
			label: sText,
			isVisible: true,
			type: "group",
			children: []
		};
	
		oData.children.splice(0, 0, oNewGroup); // Insert new group as first group
		this._changeSelection(oNewGroup);
	};
	
	DialogContent.prototype.exit = function() {
		if (this._oScrollView) {
			this._oScrollView.destroy();
			this._oScrollView = null;
		}
		if (this._oBtnMoveBottom) {
			this._oBtnMoveBottom.destroy();
			this._oBtnMoveBottom = null;
		}
		if (this._oBtnMoveDown) {
			this._oBtnMoveDown.destroy();
			this._oBtnMoveDown = null;
		}
		if (this._oBtnMoveUp) {
			this._oBtnMoveUp.destroy();
			this._oBtnMoveUp = null;
		}
		if (this._oBtnMoveTop) {
			this._oBtnMoveTop.destroy();
			this._oBtnMoveTop = null;
		}
		if (this._oBtnAddGroup) {
			this._oBtnAddGroup.destroy();
			this._oBtnAddGroup = null;
		}
		if (this._oBtnAddField) {
			this._oBtnAddField.destroy();
			this._oBtnAddField = null;
		}
	
		if (this._oFieldSelector) {
			this._oFieldSelector.destroy();
			this._oFieldSelector = null;
		}
		if (this.oLayoutRight) {
			this.oLayoutRight.destroy();
			this.oLayoutRight = null;
		}
		if (this.oLayoutMiddle) {
			this.oLayoutMiddle.destroy();
			this.oLayoutMiddle = null;
		}
		if (this.oLayoutTopLeft) {
			this.oLayoutTopLeft.destroy();
			this.oLayoutTopLeft = null;
		}
		if (this.oLayoutLeft) {
			this.oLayoutLeft.destroy();
			this.oLayoutLeft = null;
		}
		if (this.oLayout) {
			this.oLayout.destroy();
			this.oLayout = null;
		}
	
	};
	

	return DialogContent;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartform/flexibility/DialogContent.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.FormP13nHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
/*global Promise */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.FormP13nHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.XMLView'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/FormP13nHandler",[
	"jquery.sap.global", "sap/m/Dialog", "sap/m/FlexBox", "sap/m/FlexItemData", "sap/m/Text", "sap/m/Button", "sap/m/DialogType", "sap/ui/core/mvc/XMLView", "sap/ui/comp/smartform/SmartForm", "sap/ui/comp/smartform/Group", "sap/ui/comp/smartform/GroupElement", "sap/ui/comp/odata/FieldSelector", "sap/ui/fl/Utils", "sap/ui/model/json/JSONModel", "sap/ui/fl/FlexControllerFactory", "sap/m/MessageBox", "sap/ui/comp/transport/TransportSelection", "sap/ui/fl/Transports", "sap/ui/fl/registry/Settings"
], function(jQuery, Dialog, FlexBox, FlexItemData, Text, Button, DialogType, XMLView, SmartForm, SmartGroup, SmartField, FieldSelector, FlexUtils, JSONModel, FlexControllerFactory, MessageBox, TransportSelection, Transports, FlexSettings) {
	"use strict";

	/**
	 * @constructor
	 * @alias sap.ui.comp.smartform.flexibility.FormP13nHandler
	 * @author SAP SE
	 * @version 1.28.1
	 * @experimental Since 1.27.0
	 * @private
	 */
	var FormP13nHandler = function() {

		this._oOriginalDataModelForDialog = null;
	};

	/**
	 * Initialize the form personalization handler
	 * 
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm - smart form instance.
	 * @private
	 */
	FormP13nHandler.prototype.init = function(oSmartForm) {

		this._oSmartForm = oSmartForm;
		this._oDialogContent = null;
		this._textResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this._oDialog = this._createDialog();

		var tempMergeErrorFlag = false;
		if (tempMergeErrorFlag === false) {
			this._oDialog.setTitle(this._textResources.getText("FORM_PERS_DIALOG_TITLE"));
			this._oDialogContent = this._createDialogContent();
			this._oDialog.addContent(this._oDialogContent);

		} else {
			this._oDialog.setType(DialogType.Message);
			this._oDialog.setTitle(this._textResources.getText("FORM_PERS_DIALOG_ERR_TITLE"));
			this._showMergeErrorMessage();
		}
		// Buttons
		this._createButtons();
	};

	/**
	 * Creates an empty dialog
	 * 
	 * @returns {sap.m.Dialog} Dialog
	 * @private
	 */
	FormP13nHandler.prototype._createDialog = function() {
		var oDialog;
		oDialog = new Dialog("smartFormPersDialog", {
			contentWidth: "60%",
			contentHeight: "60%",
			verticalScrolling: false,
			horizontalScrolling: false
		});
		return oDialog;
	};

	/**
	 * Create the buttons for saving, canceling and reset
	 * 
	 * @private
	 */
	FormP13nHandler.prototype._createButtons = function() {
		// OK
		var oOkButton = new Button(this._oDialog.getId() + '-OkButton');
		oOkButton.setText(this._textResources.getText("FORM_PERS_DIALOG_OK"));
		oOkButton.attachPress(this._dialogOkClicked.bind(this));
		this._oDialog.addButton(oOkButton);

		// Cancel
		var oCancelButton = new Button(this._oDialog.getId() + '-CancelButton');
		oCancelButton.setText(this._textResources.getText("FORM_PERS_DIALOG_CANCEL"));
		oCancelButton.attachPress({
			sAction: "cancel"
		}, this._closeDialog, this);
		this._oDialog.addButton(oCancelButton);

		// Discard
		var oDiscardButton = new Button();
		oDiscardButton.setText(this._textResources.getText("FORM_PERS_DIALOG_RESET"));
		oDiscardButton.attachPress({
			sAction: "discard"
		}, this._confirmDiscardAllChanges, this);
		this._oDialog.addButton(oDiscardButton);

		var that = this;
		var oFlexController = this._getFlexController();
		FlexSettings.getInstance(oFlexController.getComponentName()).then(function(oSettings) {
			if (!oSettings.isProductiveSystem()) {
				// Transport
				var oTransportButton = new Button();
				oTransportButton.setText(that._textResources.getText("FORM_PERS_DIALOG_TRANSPORT"));
				oTransportButton.attachPress({
					sAction: "transport"
				}, that._confirmTransportAllChanges, that);
				if (that._oDialog){
					that._oDialog.addButton(oTransportButton);
				}
			}
		});
	};

	/**
	 * Shows a transport selection error message.
	 * 
	 * @param {object} oError - error object.
	 * @returns {Promise} promise that resolves with no parameters when the error message box is closed.
	 * @private
	 */
	FormP13nHandler.prototype._showTransportErrorMessage = function(oError) {
		return this._showErrorMessage(oError, "FORM_PERS_TRANSPORT_ERROR_TITLE", "FORM_PERS_TRANSPORT_ERROR_MESSAGE");
	};

	/**
	 * Opens the transport selection dialog
	 * 
	 * @param {sap.ui.fl.Change} [oChange] - the change for which the transport information should be retrieved
	 * @returns {Promise} promise that resolves
	 * @private
	 */
	FormP13nHandler.prototype._openTransportSelection = function(oChange) {
		var that = this;
		
		return new Promise(function(resolve, reject) {
			var fOkay = function(oResult) {
				if (oResult && oResult.getParameters) {
					var sTransport = oResult.getParameters().selectedTransport;
					var sPackage = oResult.getParameters().selectedPackage;
					var bFromDialog = oResult.getParameters().dialog;
					var oTransportInfo = {
						transport: sTransport,
						packageName: sPackage,
						fromDialog: bFromDialog
					};
					resolve(oTransportInfo);
				} else {
					resolve({});
				}
			};
			var fError = function(oError) {
				that._showTransportErrorMessage(oError).then(function() {
					reject(oError);
				});
			};
			var oObject = {}; // no restriction on package, name or name space
			if (oChange) {
				oObject["package"] = oChange.getPackage();
				oObject.namespace = oChange.getNamespace();
				oObject.name = oChange.getId();
				oObject.type = oChange.getDefinition().fileType;
			}
			var oTransports = new sap.ui.comp.transport.TransportSelection();
			oTransports.selectTransport(oObject, fOkay, fError, false, that._oSmartForm);
		});
	};

	/**
	 * Event handler - called when user has clicked the OK button in the personalization dialog. Creates change files and saves them to the backend.
	 * 
	 * @private
	 * @returns {Promise} promise that resolves with no parameters
	 */
	FormP13nHandler.prototype._dialogOkClicked = function() {
		var aChangeSpecificData = this._getChangeDataFromDialog();

		if (aChangeSpecificData.length === 0) {
			this._closeDialog();
			return new Promise(function(resolve, reject) {
				resolve({});
			});
		}

		var that = this;
		// Pass empty transport info object to save as LOCAL
		return that._createAndApplyChanges(aChangeSpecificData).then(function() {
			that._closeDialog();
		});
	};

	/**
	 * Create and apply changes.
	 * 
	 * @param {array} aChangeSpecificData array of objects with change specific data
	 * @returns {Promise} promise that resolves with no parameters
	 * @private
	 */
	FormP13nHandler.prototype._createAndApplyChanges = function(aChangeSpecificData) {
		// Looks strange, but is necessary to keep resolving and catching exceptions in right order
		return Promise.resolve().then(function() {

			var oFlexController;

			oFlexController = this._getFlexController();
			function fnValidChanges(oChangeSpecificData) {
				return oChangeSpecificData && oChangeSpecificData.selector && oChangeSpecificData.selector.id;
			}

			try {
				aChangeSpecificData.filter(fnValidChanges).forEach(function(oChangeSpecificData) {
					var oControl = this._getControlById(oChangeSpecificData.selector.id);
					oFlexController.createAndApplyChange(oChangeSpecificData, oControl);
				}.bind(this));
			} finally {
				return oFlexController.saveAll();
			}
		}.bind(this));
	};

	/**
	 * Gets the control for the control ID.
	 * 
	 * @param {string} sControlId control ID
	 * @returns {sap.ui.core.Control} control
	 * @private
	 */
	FormP13nHandler.prototype._getControlById = function(sControlId) {
		return sap.ui.getCore().byId(sControlId);
	};

	/**
	 * Returns an instance of the flex controller
	 * 
	 * @private
	 * @returns {sap.ui.fl.FlexController} flex controller instance
	 */
	FormP13nHandler.prototype._getFlexController = function() {
		return FlexControllerFactory.createForControl(this._oSmartForm);
	};

	/**
	 * Load the view which is required for form personalization and add it to the content
	 * 
	 * @private
	 * @returns {sap.ui.xmlview} view instance
	 */
	FormP13nHandler.prototype._createDialogContent = function() {
		var formView, oJSONData, sComponentName;

		if (!this._oSmartForm) {
			return undefined;
		}
		oJSONData = this._createModelFromSmartForm(this._oSmartForm);
		oJSONData.isMoveDownButtonEnabled = false;
		oJSONData.isMoveUpButtonEnabled = false;
		oJSONData.isMoveBottomButtonEnabled = false;
		oJSONData.isMoveTopButtonEnabled = false;

		this._oOriginalDataModelForDialog = JSON.parse(JSON.stringify(oJSONData)); // Clone data model and compare with modified data model later on,
		// to figure
		// out which changes have been performed

		this._oModel = new JSONModel();
		this._oModel.setData(oJSONData);

		formView = new sap.ui.comp.smartform.flexibility.DialogContent(this._oDialog.getId() + '-Content');
		// formView = new sap.ui.xmlview("sap.ui.comp.smartform.flexibility.DialogContent");
		formView.setModel(this._oModel);
		var oView = FlexUtils.getViewForControl(this._oSmartForm);
		formView.setViewId(oView.createId(""));

		sComponentName = FlexUtils.getComponentClassName(this._oSmartForm);
		// Initialise Field Selector for OData $metadata
		var aIgnoredFields = this._getIgnoredFields(this._oSmartForm);
		formView.initialiseODataFieldSelector(this._oSmartForm.getModel(), this._oSmartForm.getEntityType(), sComponentName, aIgnoredFields);

		return formView;
	};

	/**
	 * Read ignored fields from smart form and parse CSV into array
	 * 
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm smart form instance
	 * @private
	 * @returns {Array} Returns a list of ignored fields or empty.
	 */
	FormP13nHandler.prototype._getIgnoredFields = function(oSmartForm) {
		if (oSmartForm) {
			var sCsvIgnoredFields = oSmartForm.getIgnoredFields();
			if (sCsvIgnoredFields) {
				var aIgnoredFields = sCsvIgnoredFields.split(",");
				return aIgnoredFields;
			}
		}
		return [];
	};

	/**
	 * Takes the smart forms before- and after the changes as arrays of JSON nodes and deduces the changes from their delta.
	 * 
	 * @param {array} aJsonBefore - array of JSON nodes representing the smart forms before the changes.
	 * @param {array} aJsonAfter - array of JSON nodes representing the smart forms after the changes.
	 * @returns {array} list of change property bags (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @public
	 */
	FormP13nHandler.prototype._createChangeSpecificDataFromDialogModel = function(aJsonBefore, aJsonAfter) {

		/*
		 * node= { id:"abc", label:"zuzu", isVisible: true, type: "form", //form|group|field children: [node] }
		 */

		var aChanges = [], oChange;

		// map of Json nodes before the changes
		var oMapBefore = {};
		this._createNodeMap(aJsonBefore, oMapBefore);

		// map of Json nodes after the changes
		var oMapAfter = {};
		this._createNodeMap(aJsonAfter, oMapAfter);

		// determine label- and visibility changes
		var i, sId, oNodeBefore, oNodeAfter, bIsVisible;
		var aBefore = Object.keys(oMapBefore);
		for (i = 0; i < aBefore.length; i++) {
			sId = aBefore[i];
			if (oMapAfter[sId] && oMapAfter[sId].node) {
				oNodeBefore = oMapBefore[sId].node;
				oNodeAfter = oMapAfter[sId].node;
				// label change
				if (oNodeBefore.label && oNodeAfter.label && oNodeBefore.label !== oNodeAfter.label) {
					oChange = this._createLabelChange(sId, oNodeAfter.label, oNodeAfter.type);
					if (oChange && oChange.selector && oChange.selector.id) {
						aChanges.push(oChange);
					}
				}
				// visibility change
				if ((oNodeBefore.isVisible && !oNodeAfter.isVisible) || (!oNodeBefore.isVisible && oNodeAfter.isVisible)) {
					if (oNodeAfter.isVisible) {
						bIsVisible = true;
					} else {
						bIsVisible = false;
					}
					aChanges.push(this._createVisibilityChange(sId, bIsVisible));
				}
			}
		}
		
		// this map will hold the location of the children for node which has children
		// its purpose is to memorize all effects adding of fields/groups or moving of
		// fields between groups has on the locations of the children nodes
		// within method _check4AddChanges it is initialized on basis of oMapBefore
		// afterwards in method _check4AddChanges and _check4Inter/IntraMoveChanges
		// this map is updated for each add/move change
		var oParentChildIndex = {};

		// check for added fields/groups and add corresponding changes to the list
		// memorize effect of these changes on positions of children in oParentChildIndex
		for (i = 0; i < aJsonAfter.length; i++) {
			this._check4AddChanges(aJsonAfter[i], oMapBefore, aChanges, oParentChildIndex);
		}
		
		// check for moved groups/fields and add corresponding changes to the list
		// memorize effect of these changes on positions of children in oParentChildIndex
		for (i = 0; i < aJsonAfter.length; i++) {
			this._check4InterMoveChanges(aJsonAfter[i], oMapAfter, oMapBefore, aChanges, oParentChildIndex);
			this._check4IntraMoveChanges(aJsonAfter[i], oMapAfter, oMapBefore, aChanges, oParentChildIndex);
		}

		return aChanges;

	};

	/**
	 * Checks for added fields- and groups and adds corresponding changes to list
	 * 
	 * @param {object} oParent - parent JSON node after the changes.
	 * @param {object} oMapBefore - map of JSON nodes before the changes.
	 * @param {array} aChanges - list of change property bags (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @param {object} oParentChildIndex - map which holds an index of the parents children - key is the parent id
	 * @private
	 */
	FormP13nHandler.prototype._check4AddChanges = function(oParent, oMapBefore, aChanges, oParentChildIndex) {

		if (oParent && oParent.id && oParent.children) {

			var i, iShift = 0, sId, sParentId, oChild;
			sParentId = oParent.id;

			// initialize map which holds an index of the parents children - key is the parent id
			// this map will be used to memorize the effect of add/move between parents changes on the positions of the children
			if (oMapBefore[sParentId] && oMapBefore[sParentId].node) {
				var oParentOld = oMapBefore[sParentId].node;
				if (!oParentChildIndex) {
					oParentChildIndex = {};
				}
				oParentChildIndex[sParentId] = {};
				oParentChildIndex[sParentId].index = {};
				for (i = 0; i < oParentOld.children.length; i++) {
					oChild = oParentOld.children[i];
					sId = oChild.id;
					// memorize child position as it was before all changes
					oParentChildIndex[sParentId].index[sId] = i;
				}
			}

			for (i = 0; i < oParent.children.length; i++) {
				oChild = oParent.children[i];
				if (oChild.id) {
					sId = oChild.id;
					// does the child node exist in the JSON before the changes ?
					// if not it is an added field/group
					if (!oMapBefore[sId]) {
						var oChange = this._createAddChange(sParentId, oChild, i);
						if (oChange && oChange.selector && oChange.selector.id) {
							aChanges.push(oChange);
							// each add change shifts the position of children located at higher index by one
							iShift++;
							// if the added field/group is invisible we have to create a hide change in addition
							if (!oChild.isVisible) {
								aChanges.push(this._createVisibilityChange(sId, false));		
							}
						}
					} else if (iShift > 0 && oParentChildIndex[sParentId].index[sId] !== undefined) {
						oParentChildIndex[sParentId].index[sId] = oParentChildIndex[sParentId].index[sId] + iShift;
					}
					// recursive call - child is new parent node
					this._check4AddChanges(oChild, oMapBefore, aChanges, oParentChildIndex);
				}
			}
		}

	};

	/**
	 * Checks for fields- and groups moved between parents and adds corresponding changes to list
	 * 
	 * @param {object} oParent - parent JSON node after the changes.
	 * @param {object} oMapAfter - map of JSON nodes after the changes.
	 * @param {object} oMapBefore - map of JSON nodes before the changes.
	 * @param {array} aChanges - list of change property bags (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @param {object} oParentChildIndex - map which holds an index of the parents children - key is the parent id
	 * @private
	 */
	FormP13nHandler.prototype._check4InterMoveChanges = function(oParent, oMapAfter, oMapBefore, aChanges, oParentChildIndex) {

		if (oParent && oParent.id && oParent.children) {

			var i, sId, sParentId, sSourceParentId, aIndex = [], oIndex = {}, oChild, oChange = {};

			// id of parent node after the changes
			// in case of a move to a new parent this is the target parent Id
			sParentId = oParent.id;

			var iLength = oParent.children.length;

			// step 1 - search for moves between parents
			for (i = 0; i < iLength; i++) {
				oChild = oParent.children[i];
				if (oChild.id) {
					sId = oChild.id;
					// child existed before the changes - it is no added field
					if (oMapBefore[sId] && oMapBefore[sId].index !== undefined) {
						// check if the parent node of a field/group has changed
						// if yes this child has been moved between two parents
						if (!oMapBefore[sId].index[sParentId] && oMapBefore[sId].index[sParentId] !== 0) {
							// determine parent(s) before the move
							var j, aSourceParentId = [];
							aSourceParentId = Object.keys(oMapBefore[sId].index);
							for (j = 0; j < aSourceParentId.length; j++) {
								sSourceParentId = aSourceParentId[j];
								// memorize id of moved child and its new index - key is the id of the old parent
								// as the change will be created for the source parent of the move
								if (!oIndex[sSourceParentId]) {
									oIndex[sSourceParentId] = [];
								}
								oIndex[sSourceParentId].push({
									"id": sId,
									"index": oMapAfter[sId].index[sParentId]
								});
								// a move between two parents is handled by the change handler as removal of the child
								// from the source parent and insertion at the target parent
								// this means that for the effects of this operation on the positions of the children
								// at the source- and target parent no additional move changes are needed
								// to prevent that they are created we have to memorize the effect of this move on the
								// location of the children at the source- and target parent
								// like for the case of field adding we use map oParentChildIndex for this purpose
								// source parent of move - effect of child removal
								var sChildId, aChildIndex = [], iChildPosition, k;
								if (oParentChildIndex[sSourceParentId].index[sId] !== undefined) {
									// position of moved child at source parent before the move
									iChildPosition = oParentChildIndex[sSourceParentId].index[sId];
									delete oParentChildIndex[sSourceParentId].index[sId];
									aChildIndex = Object.keys(oParentChildIndex[sSourceParentId].index);
									for (k = 0; k < aChildIndex.length; k++) {
										sChildId = aChildIndex[k];
										// this child is located after the moved child
										// hence we have to lower its index by one to account for the removal
										if (oParentChildIndex[sSourceParentId].index[sChildId] > iChildPosition) {
											oParentChildIndex[sSourceParentId].index[sChildId]--;
										}
									}
								}
								// target parent - effect of child insertion
								if (oParentChildIndex[sParentId]) {
									// position of moved child at target parent after the move
									iChildPosition = oMapAfter[sId].index[sParentId];
									aChildIndex = Object.keys(oParentChildIndex[sParentId].index);
									for (k = 0; k < aChildIndex.length; k++) {
										sChildId = aChildIndex[k];
										// all children of target parent located at the same or higher index than the inserted child
										// have to have their index increased by one
										if (oParentChildIndex[sParentId].index[sChildId] >= iChildPosition) {
											oParentChildIndex[sParentId].index[sChildId]++;
										}
									}
									oParentChildIndex[sParentId].index[sId] = iChildPosition;
								}
							}
						}
					}
					// recursive call - child is new parent node
					this._check4InterMoveChanges(oChild, oMapAfter, oMapBefore, aChanges, oParentChildIndex);
				}
			}

			// step 2 - create moves with new parent control as target
			if (oIndex) {
				aIndex = Object.keys(oIndex);
				for (i = 0; i < aIndex.length; i++) {
					sSourceParentId = aIndex[i];
					oChange = this._createMoveChange(sSourceParentId, oParent.type, oIndex[sSourceParentId], oParent.id);
					if (oChange && oChange.selector && oChange.selector.id) {
						aChanges.push(oChange);
					}
				}
			}

		}

	};

	/**
	 * Checks for moved fields- and groups within the same parent and adds corresponding changes to list
	 * 
	 * @param {object} oParent - parent JSON node after the changes.
	 * @param {object} oMapAfter - map of JSON nodes after the changes.
	 * @param {object} oMapBefore - map of JSON nodes before the changes.
	 * @param {array} aChanges - list of change property bags (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @param {object} oParentChildIndex - map which holds an index of the parents children - key is the parent id
	 * @private
	 */
	FormP13nHandler.prototype._check4IntraMoveChanges = function(oParent, oMapAfter, oMapBefore, aChanges, oParentChildIndex) {

		if (oParent && oParent.id && oParent.children) {

			var i, sId, sParentId, aIndex = [], oChild, oChange = {};

			// id of parent node after the changes
			// in case of a move to a new parent this is the target parent Id
			sParentId = oParent.id;

			var iLength = oParent.children.length;

			// step 1 - search for moves within the same parent
			for (i = 0; i < iLength; i++) {
				oChild = oParent.children[i];
				if (oChild.id) {
					sId = oChild.id;
					// child existed before the changes - not an added field
					if (oMapBefore[sId] && oMapBefore[sId].index !== undefined) {
						// check that the parent node of the child has not changed
						// if yes - check if child was moved within the same parent
						// get the index of the child node in the parent node children array after the changes and
						// compare it with its index before the changes
						// if there is a difference this child node was moved within the same parent
						if (oMapBefore[sId].index[sParentId] !== undefined && oMapBefore[sId].index[sParentId] !== i) {
							// child position has changed - but was this due to a move within this parent
							// or just the effect of an add/move to a new parent ?
							// in the latter case the change handlers will take care of the position handling
							// and no move change is needed
							// to find out check the position of the child after application of all add/move to new parent changes
							// which have been memorized in oParentChildIndex
							// only when the child position memorized in oParentChildIndex also differs from
							// its current position a move change has to be created
							if (oParentChildIndex[sParentId].index[sId] !== undefined && oParentChildIndex[sParentId].index[sId] !== i) {
								// memorize id of moved field/group and new index
								aIndex.push({
									"id": sId,
									"index": oMapAfter[sId].index[sParentId]
								});
							}
						}
					}
					// recursive call - child is new parent node
					this._check4IntraMoveChanges(oChild, oMapAfter, oMapBefore, aChanges, oParentChildIndex);
				}
			}

			// step 2 - create changes for moves within the same parent control
			if (aIndex.length > 0) {
				// create move change for the parent node as child node(s) was/were moved
				// aIndex contains objects holding the id's of the moved child nodes and their new index
				oChange = this._createMoveChange(sParentId, oParent.type, aIndex, "");
				if (oChange && oChange.selector && oChange.selector.id) {
					aChanges.push(oChange);
				}
			}

		}

	};

	/**
	 * Creates a property bag for an add change
	 * 
	 * @param {string} sId - id of parent.
	 * @param {object} oNode - JSON node of field/group to add.
	 * @param {number} iIndex - position at which field/group has to be added
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	FormP13nHandler.prototype._createAddChange = function(sId, oNode, iIndex) {

		var oAddChange = {};

		oAddChange.selector = {};
		oAddChange.selector.id = sId;

		// index at which new control has to be inserted
		oAddChange.index = iIndex;

		// new Id of group/field
		oAddChange.newControlId = oNode.id; // oView.createId(jQuery.sap.uid());

		switch (oNode.type) {
			case "form":
				oAddChange = {};
				break;
			case "group":
				oAddChange.changeType = "addGroup";
				if (!oNode.label) {
					oAddChange.groupLabel = "";
				} else {
					oAddChange.groupLabel = oNode.label;
				}
				break;
			case "field":
				oAddChange.changeType = "addField";
				if (!oNode.label) {
					oAddChange.fieldLabel = "";
				} else {
					oAddChange.fieldLabel = oNode.label;
				}
				if (!oNode.fieldValue) {
					oAddChange.fieldValue = "";
				} else {
					oAddChange.fieldValue = oNode.fieldValue;
				}
				if (!oNode.valueProperty) {
					oAddChange.valueProperty = "";
				} else {
					oAddChange.valueProperty = oNode.valueProperty;
				}
				if (!oNode.jsType) {
					oAddChange.jsType = "";
				} else {
					oAddChange.jsType = oNode.jsType;
				}

				break;
			default:
				oAddChange = {};
				break;
		}

		return oAddChange;

	};

	/**
	 * Creates a property bag for a label change
	 * 
	 * @param {string} sId - control id.
	 * @param {string} sLabel - new label.
	 * @param {string} sType - node type (form|group|field).
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	FormP13nHandler.prototype._createLabelChange = function(sId, sLabel, sType) {

		var oLabelChange = {};

		oLabelChange.selector = {};
		oLabelChange.selector.id = sId;

		switch (sType) {
			case "form":
				oLabelChange = {};
				break;
			case "group":
				oLabelChange.changeType = "renameGroup";
				oLabelChange.groupLabel = sLabel;
				break;
			case "field":
				oLabelChange.changeType = "renameField";
				oLabelChange.fieldLabel = sLabel;
				break;
			default:
				oLabelChange = {};
				break;
		}

		return oLabelChange;

	};

	/**
	 * Creates a property bag for a move change
	 * 
	 * @param {string} sId - id of parent of fields/groups.
	 * @param {string} sType - type of parent of fields/groups.
	 * @param {array} aIndex - array with index of fields/groups after move.
	 * @param {string} sTargetId - target id of new parent (optional)
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	FormP13nHandler.prototype._createMoveChange = function(sId, sType, aIndex, sTargetId) {

		var oMoveChange = {};

		oMoveChange.selector = {};
		oMoveChange.selector.id = sId;

		switch (sType) {
			case "form":
				oMoveChange.changeType = "moveGroups";
				oMoveChange.moveGroups = aIndex;
				break;
			case "group":
				oMoveChange.changeType = "moveFields";
				oMoveChange.moveFields = aIndex;
				break;
			default:
				oMoveChange = {};
				break;
		}

		if (sTargetId) {
			oMoveChange.targetId = sTargetId;
		}

		return oMoveChange;

	};

	/**
	 * Creates a property bag for a visibility change
	 * 
	 * @param {string} sId - control id.
	 * @param {boolean} bIsVisible - control visibility.
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	FormP13nHandler.prototype._createVisibilityChange = function(sId, bIsVisible) {

		var oVisibilityChange = {};

		oVisibilityChange.selector = {};
		oVisibilityChange.selector.id = sId;

		if (bIsVisible === true) {
			oVisibilityChange.changeType = "unhideControl";
		} else {
			oVisibilityChange.changeType = "hideControl";
		}

		return oVisibilityChange;

	};

	/**
	 * Creates a map of JSON nodes - key is the node's id Each entry has attributes 'node' and 'index' 'node' stores the node instance 'index' stores
	 * a map which has the id of the parent node as key and the index of the node within the parent node's children array as value
	 * 
	 * @param {array} aJsonNodes - array of JSON nodes representing the smart forms.
	 * @param {object} oNodeMap - map of nodes.
	 * @param {object} oParent - parent JSON node.
	 * @private
	 */
	FormP13nHandler.prototype._createNodeMap = function(aJsonNodes, oNodeMap, oParent) {

		/*
		 * node= { id:"abc", label:"zuzu", isVisible: true, type: "form", //form|group|field children: [node] }
		 */

		if (!oNodeMap) {
			throw new Error("Node map instance must be provided");
		}

		if (!aJsonNodes || !aJsonNodes.length) {
			return;
		}

		var oNode, sId;

		var i, iLength = aJsonNodes.length;
		for (i = 0; i < iLength; i++) {

			oNode = aJsonNodes[i];

			if (oNode && oNode.id) {

				sId = oNode.id;

				if (!oNodeMap[sId]) {
					oNodeMap[sId] = {};
					oNodeMap[sId].node = oNode;
				}

				if (oParent && oParent.id) {
					if (!oNodeMap[sId].index) {
						oNodeMap[sId].index = {};
					}
					oNodeMap[sId].index[oParent.id] = i;
				}

				if (oNode.children) {
					this._createNodeMap(oNode.children, oNodeMap, oNode);
				}

			}

		}

	};

	/**
	 * Open the dialog and it's content
	 * 
	 * @public
	 */
	FormP13nHandler.prototype.show = function() {
		this._oDialog.open();
	};

	/**
	 * Create and show error message when merge failed
	 * 
	 * @private
	 */
	FormP13nHandler.prototype._showMergeErrorMessage = function() {
		var oFlexBoxLayout = new FlexBox();
		oFlexBoxLayout.setDirection("Column");
		oFlexBoxLayout.setAlignItems("Start");

		var messageDescriptionText = new Text();
		messageDescriptionText.setText(this._textResources.getText("FORM_PERS_DIALOG_ERR_DESC"));
		messageDescriptionText.setLayoutData(new FlexItemData({
			order: 1,
			growFactor: 1
		}));

		var messageResolveText = new Text();
		messageResolveText.setText(this._textResources.getText("FORM_PERS_DIALOG_ERR_HINT"));
		messageResolveText.setLayoutData(new FlexItemData({
			order: 1,
			growFactor: 1
		}));

		oFlexBoxLayout.addItem(messageDescriptionText);
		oFlexBoxLayout.addItem(messageResolveText);

		this._oDialog.addContent(oFlexBoxLayout);
	};

	/**
	 * Close the dialog
	 * 
	 * @private
	 */
	FormP13nHandler.prototype._closeDialog = function() {
		if (this._oDialogContent) {
			this._oDialogContent.destroy();
			this._oDialogContent = null;
		}
		if (this._oDialog) {
			this._oDialog.close();
			this._oDialog.destroy();
		}
		this._oDialog = null;
	};

	/**
	 * Extracts the form-, group- and group element controls of a smart form creates a map of control IDs and controls out of it.
	 * 
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm The smart form which should be analyzed
	 * @returns {object} Returns an object of the control IDs and their form-, group- and group element controls of the current smart form
	 * @private
	 */
	FormP13nHandler.prototype._createSmartFormControlMap = function(oSmartForm) {
		var mControlMap = [];
		var sControlId;
		if (oSmartForm) {
			sControlId = oSmartForm.getId();
			mControlMap[sControlId] = oSmartForm;
			var aGroups = oSmartForm.getGroups();
			if (aGroups) {
				for (var i = 0; i < aGroups.length; i++) {
					var oGroup = aGroups[i];
					if (oGroup) {
						sControlId = oGroup.getId();
						mControlMap[sControlId] = oGroup;
						var aGroupElements = oGroup.getGroupElements();
						if (aGroupElements) {
							for (var j = 0; j < aGroupElements.length; j++) {
								var oGroupElement = aGroupElements[j];
								if (oGroupElement) {
									sControlId = oGroupElement.getId();
									mControlMap[sControlId] = oGroupElement;
								}
							}
						}
					}
				}
			}
		}
		return mControlMap;
	};

	/**
	 * Shows a discard all form changes success message.
	 * 
	 * @private
	 */
	FormP13nHandler.prototype._showDiscardSuccessMessage = function() {
		var that = this;
		var fSuccessOk = function() {
			that._closeDialog();
		};
		var sMessage = this._textResources.getText("FORM_PERS_DISCARD_SUCCESS_MESSAGE");
		var sTitle = this._textResources.getText("FORM_PERS_DISCARD_SUCCESS_TITLE");
		MessageBox.show(sMessage, {
			icon: MessageBox.Icon.SUCCESS,
			title: sTitle,
			onClose: fSuccessOk
		});
	};

	/**
	 * Shows a transport success message saying that all form changes could be made transportable
	 * 
	 * @private
	 */
	FormP13nHandler.prototype._showTransportSuccessMessage = function() {
		var that = this;
		var fSuccessOk = function() {
			that._closeDialog();
		};
		var sMessage = this._textResources.getText("FORM_PERS_TRANSPORT_SUCCESS_MESSAGE");
		var sTitle = this._textResources.getText("FORM_PERS_TRANSPORT_SUCCESS_TITLE");
		MessageBox.show(sMessage, {
			icon: MessageBox.Icon.SUCCESS,
			title: sTitle,
			onClose: fSuccessOk
		});
	};

	/**
	 * Shows a transport inapplicable message, in case all form changes were already made transportable
	 * 
	 * @private
	 */
	FormP13nHandler.prototype._showTransportInapplicableMessage = function() {
		var that = this;
		var fSuccessOk = function() {
			that._closeDialog();
		};
		var sMessage = this._textResources.getText("FORM_PERS_TRANSPORT_INAPPLICABLE_MESSAGE");
		var sTitle = this._textResources.getText("FORM_PERS_TRANSPORT_INAPPLICABLE_TITLE");
		MessageBox.show(sMessage, {
			icon: MessageBox.Icon.INFORMATION,
			title: sTitle,
			onClose: fSuccessOk
		});
	};

	/**
	 * Shows a discard all form changes error message.
	 * 
	 * @param {object} oError - error object.
	 * @private
	 */
	FormP13nHandler.prototype._showDiscardErrorMessage = function(oError) {
		var aMessageArgs = [
			oError
		];
		if (oError.message) {
			aMessageArgs = [
				oError.message
			];
		}
		var sMessage = this._textResources.getText("FORM_PERS_DISCARD_ERROR_MESSAGE", aMessageArgs);
		var sTitle = this._textResources.getText("FORM_PERS_DISCARD_ERROR_TITLE");
		MessageBox.show(sMessage, {
			icon: MessageBox.Icon.ERROR,
			title: sTitle
		});
	};

	/**
	 * Shows a transport selection error message.
	 * 
	 * @param {object} oError - error object.
	 * @returns {Promise} promise that resolves with no parameters when the error message box is closed.
	 * @private
	 */
	FormP13nHandler.prototype._showApplySaveChangesErrorMessage = function(oError) {
		return this._showErrorMessage(oError, "FORM_PERS_APPLYSAVE_ERROR_TITLE", "FORM_PERS_APPLYSAVE_ERROR_MESSAGE");
	};

	/**
	 * Shows a discard all form changes error message.
	 * 
	 * @param {object} oError - error object.
	 * @param {string} sTitleKey - title key
	 * @param {string} sMessageKey - message key
	 * @returns {Promise} - promise
	 * @private
	 */
	FormP13nHandler.prototype._showErrorMessage = function(oError, sTitleKey, sMessageKey) {
		return new Promise(function(resolve) {
			if ( oError.sId === '' || oError.sId === 'cancel' ){
				//ignore: cancel button was pressed
				resolve();
			} else {
				var aMessageArgs = [
					oError.message || oError
				];
	
				var sMessage = this._textResources.getText(sMessageKey, aMessageArgs);
				var sTitle = this._textResources.getText(sTitleKey);
	
				MessageBox.show(sMessage, {
					icon: MessageBox.Icon.ERROR,
					title: sTitle,
					onClose: resolve
				});
			}
		}.bind(this));

	};

	/**
	 * Returns only the changes that are relevant within the smart form.
	 * 
	 * @param {array} aChanges - array of {sap.ui.fl.Change} instances
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm - smart form instance.
	 * @returns {array} - filtered array of {sap.ui.fl.Change} instances
	 * @private
	 */
	FormP13nHandler.prototype._filterChangesForSmartForm = function(aChanges, oSmartForm) {
		var aResultChanges = [];
		var mFormControls = this._createSmartFormControlMap(oSmartForm);
		for (var i = 0; i < aChanges.length; i++) {
			var oChange = aChanges[i];
			var sSelectorId = oChange.getSelector().id;
			if (mFormControls[sSelectorId]) {
				aResultChanges.push(oChange);
			}
		}
		return aResultChanges;
	};

	/**
	 * Sets the transports for all changes.
	 * 
	 * @param {array} aChanges array of {sap.ui.fl.Change}
	 * @param {integer} iChangeIdx array index of the change
	 * @param {string} sTransport optional: transport to set at the change if bFromDialog is true
	 * @param {boolean} bFromDialog optional: true if the transport has been set from the transport dialog
	 * @returns {Promise} promise that resolves without parameters
	 * @private
	 */
	FormP13nHandler.prototype._setTransports = function(aChanges, iChangeIdx, sTransport, bFromDialog) {
		// do a synchronous loop over all changes to fetch transport information per change each after the other
		// this is needed because only one transport popup should be shown to the user and not one per change
		var that = this;
		if (iChangeIdx >= 0) {
			var oCurrentChange = aChanges[iChangeIdx];
			if (bFromDialog === true) {
				// if the request has been set by the transport dialog already,
				// do not bring up the transport dialog a second time, but use this transport instead
				// if the change is locked on another transport, this will be resolved in the backend when the delete request is send
				oCurrentChange.setRequest(sTransport);
				iChangeIdx--;
				// set the transport for the next request
				return that._setTransports(aChanges, iChangeIdx, sTransport, bFromDialog);
			} else {
				// bring up the transport dialog to get the transport information for a change
				return that._openTransportSelection(oCurrentChange).then(function(oTransportInfo) {
					oCurrentChange.setRequest(oTransportInfo.transport);
					if (oTransportInfo.fromDialog === true) {
						sTransport = oTransportInfo.transport;
						bFromDialog = true;
					}
					iChangeIdx--;
					// set the transport for the next request
					return that._setTransports(aChanges, iChangeIdx, sTransport, bFromDialog);
				});
			}
		} else {
			return Promise.resolve(); // last change has been processed, continue with discarding the changes
		}
	};

	/**
	 * Returns only the changes that are relevant within the smart form.
	 * 
	 * @param {array} aChanges array {sap.ui.fl.Change} instances
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm smart form instance
	 * @returns {Promise} promise that resolves with no parameters
	 * @private
	 */
	FormP13nHandler.prototype._deleteChanges = function(aChanges, oSmartForm) {
		var that = this;
		var aSmartFormChanges = this._filterChangesForSmartForm(aChanges, oSmartForm);
		var oFlexController = that._getFlexController();

		var iChangeIdx = aSmartFormChanges.length - 1;
		return this._setTransports(aSmartFormChanges, iChangeIdx).then(function() {
			return oFlexController.discardChanges(aSmartFormChanges);
		}).then(function() {
			that._showDiscardSuccessMessage();
		})["catch"](function(oError) {
			that._showDiscardErrorMessage(oError);
		});
	};

	/**
	 * Show confirmation dialog about discarding all form changes.
	 * 
	 * @private
	 */
	FormP13nHandler.prototype._confirmDiscardAllChanges = function() {
		var that = this;

		var fConfirmDiscardAllChangesOk = function(sAction) {
			if (sAction === "OK") {
				var oFlexController = that._getFlexController();
				oFlexController.getComponentChanges().then(function(oChanges) {
					var aChanges = that._convertToChangeArray(oChanges);
					jQuery.proxy(that._deleteChanges, that, aChanges, that._oSmartForm).call();
				})["catch"](function(oError) {
					jQuery.proxy(that._showDiscardErrorMessage, that, oError).call();
				});
			}
		};
		var sMessage = this._textResources.getText("FORM_PERS_RESET_MESSAGE");
		var sTitle = this._textResources.getText("FORM_PERS_RESET_TITLE");
		MessageBox.confirm(sMessage, {
			title: sTitle,
			onClose: fConfirmDiscardAllChangesOk
		});
	};

	/**
	 * Show transport dialog to transport all changes.
	 * 
	 * @private
	 */
	FormP13nHandler.prototype._confirmTransportAllChanges = function() {

		var aChangeSpecificData = this._getChangeDataFromDialog();

		var that = this;
		// REVISE Clean this up and create tests (OPA & unit)
		// Don't handle dialog cancelations with rejections, it's normal control flow no exception
		that._getAllLocalChanges()
		.then(function (aAllLocalChanges) {
			if (aAllLocalChanges && aChangeSpecificData && 
				aAllLocalChanges.length + aChangeSpecificData.length === 0) {
				that._showTransportInapplicableMessage();
				return Promise.resolve();
			} else {
				// First save all current changes as local
				that._createAndApplyChanges(aChangeSpecificData)
				.then(function() {
					// Now open the transport popup, to let user select transport request
					return that._openTransportSelection();
				},function(oError) {
					that._closeDialog();
					FlexUtils.log.error("SmartForm changes could not be applied or saved: " + oError);
					that._showApplySaveChangesErrorMessage(oError);
				})
				.then(function(oTransportInfo) {
					if (oTransportInfo && oTransportInfo.transport && oTransportInfo.packageName !== "$TMP") {
						return that._transportAllLocalChanges(oTransportInfo);
					} else {
						return Promise.resolve();
					}
				}, function(oError) {
					//FlexUtils.log.error("transport selection error" + oError);" +
					that._showTransportErrorMessage(oError);
				});
			}
		});
	};

	/**
	 * Get data for changes done via the dialog
	 * 
	 * @returns {array}	Returns a list of changes done via the dialog.
	 */
	FormP13nHandler.prototype._getChangeDataFromDialog = function() {
		var oDataModelForDialog, aChangeSpecificData;
		oDataModelForDialog = this._oModel.getData();

		aChangeSpecificData = this._createChangeSpecificDataFromDialogModel([
			this._oOriginalDataModelForDialog
		], [
			oDataModelForDialog
		]);
		return aChangeSpecificData;
	};

	/**
	 * Get all local changes of the smart form
	 * 
	 * @returns {Promise} Promise which returns an array of all local changes of the smart form
	 */
	FormP13nHandler.prototype._getAllLocalChanges = function() {
		var that = this;
		return that._getFlexController().getComponentChanges().then(function(oChanges) {
			var aAllChanges = that._convertToChangeArray(oChanges);
			return that._filterChangesForSmartForm(aAllChanges, that._oSmartForm);
		});
	};
	
	/**
	 * Prepare all changes and assign them to an existing transport
	 * 
	 * @param {object} oTransportInfo Information about the selected transport
	 * @returns {Promise} Promise which resolves without parameters
	 */
	FormP13nHandler.prototype._transportAllLocalChanges = function(oTransportInfo) {
		var that = this;
		return that._getAllLocalChanges().then(function(aAllLocalChanges) {
			var aTransportData = that._convertToChangeTransportData(aAllLocalChanges);

			// Pass list of changes to be transported with transport request to backend
			var oTransports = new Transports();
			var oTransportParams = {};
			oTransportParams.transportId = oTransportInfo.transport;
			oTransportParams.changeIds = aTransportData;
			return oTransports.makeChangesTransportable(oTransportParams).then(function(){
				//remove the $TMP package from all changes; has been done on the server as well, 
				//but is not reflected in the client cache until the application is reloaded
				aAllLocalChanges.forEach(function(oChange){
					if ( oChange.getPackage() === '$TMP' ){
						var oDefinition = oChange.getDefinition();
						oDefinition.packageName = '';
						oChange.setResponse(oDefinition);
					}
				});
			}).then(function(){
				that._showTransportSuccessMessage();
				return Promise.resolve();
			});
		});
	};

	/**
	 * Get list of changes which should be added to a transport
	 * 
	 * @param {Array} aLocalChanges List of changes which data have to be extracted
	 * @returns {Array} Returns an array of object containing all required data to transport the existing local changes
	 */
	FormP13nHandler.prototype._convertToChangeTransportData = function(aLocalChanges) {
		var aTransportData = [];
		var len = aLocalChanges.length;
		for (var i = 0; i < len; i++) {
			var oCurrentChange = aLocalChanges[i];
			var oData = {};
			oData.namespace = oCurrentChange.getNamespace();
			oData.fileName = oCurrentChange.getId();
			oData.fileType = oCurrentChange.getDefinition().fileType;
			aTransportData.push(oData);
		}
		return aTransportData;
	};

	/**
	 * Convert map with changes to array with changes
	 * 
	 * @param {Object} oChanges Map of changes
	 * @returns {Array} Returns an array of changes generated from an object of changes
	 */
	FormP13nHandler.prototype._convertToChangeArray = function(oChanges) {
		// convert change map to change array
		// workaround until getComponentChanges returns always an array
		var aChanges = oChanges;
		if (!jQuery.isArray(oChanges)) {
			aChanges = [];
			var aKeys = Object.keys(oChanges);
			for (var i = 0; i < aKeys.length; i++) {
				aChanges.push(oChanges[aKeys[i]]);
			}
		}
		return aChanges;
	};

	/**
	 * Extract the groups and fields of a smartform and convert it to the schema required by the personalization dialog
	 * 
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm The smartform which should be analyzed
	 * @returns {Array} Returns an array containing the form(s), groups and fields metadata, which will be used as JSON model for the dialog
	 * @private
	 */
	FormP13nHandler.prototype._createModelFromSmartForm = function(oSmartForm) {
		var formDocument, groups, i, currentGroup, groupData, currentGroupItems, k, fieldData;

		if (oSmartForm) {
			formDocument = this._getModelNodeForSmartForm(oSmartForm);
			groups = oSmartForm.getGroups();
			if (groups) {
				for (i = 0; i < groups.length; i++) {
					currentGroup = groups[i];
					if (!FlexUtils.checkControlId(currentGroup)) {
						continue;
					}
					groupData = this._getModelNodeForSmartGroup(currentGroup);
					formDocument.children.push(groupData);

					if (currentGroup) {
						currentGroupItems = currentGroup.getGroupElements();
						if (currentGroupItems) {
							for (k = 0; k < currentGroupItems.length; k++) {
								if (!FlexUtils.checkControlId(currentGroupItems[k])) {
									continue;
								}
								fieldData = this._getModelNodeForSmartGroupElement(currentGroupItems[k]);
								groupData.children.push(fieldData);
							}
						}
					}
				}
			}

		}

		return formDocument;
	};

	/**
	 * Get the metadata from the SmartForm itself
	 * 
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm The smartform which should be analyzed
	 * @returns {Object} Object containing the metadata of the smartform
	 * @private
	 */
	FormP13nHandler.prototype._getModelNodeForSmartForm = function(oSmartForm) {
		var result = {};
		result.id = oSmartForm.getId();
		result.label = oSmartForm.getTitle();
		result.isVisible = oSmartForm.getVisible();
		result.type = "form";
		result.children = [];

		return result;
	};

	/**
	 * Get the metadata from the Group itself
	 * 
	 * @param {sap.ui.comp.smartform.Group} oSmartGroup The group which should be analyzed
	 * @returns {Object} Object containing the metadata of the group
	 * @private
	 */
	FormP13nHandler.prototype._getModelNodeForSmartGroup = function(oSmartGroup) {
		var result = {};
		result.id = oSmartGroup.getId();
		result.label = oSmartGroup.getLabel();
		result.isVisible = oSmartGroup.getVisible();
		result.type = "group";
		result.children = [];

		return result;
	};

	/**
	 * Builds a JSON object for a smart group element, which will be used for the JSON model for the dialog.
	 * 
	 * @param {sap.ui.comp.smartform.GroupElement} oGroupElement The field which should be analyzed
	 * @returns {Object} Object containing the metadata of the field
	 * @private
	 */
	FormP13nHandler.prototype._getModelNodeForSmartGroupElement = function(oGroupElement) {
		var result = {};
		result.id = oGroupElement.getId();
		result.label = oGroupElement.getLabelText();
		result.isVisible = oGroupElement.getVisible();
		result.type = "field";

		return result;
	};

	return FormP13nHandler;
}, true);

}; // end of sap/ui/comp/smartform/flexibility/FormP13nHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smarttable.SmartTable') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smarttable.SmartTable.
jQuery.sap.declare('sap.ui.comp.smarttable.SmartTable'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSeparator'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalColumn'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Column'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smarttable/SmartTable",[
	'jquery.sap.global', 'sap/m/Column', 'sap/m/Label', 'sap/m/MessageBox', 'sap/m/Table', 'sap/m/Text', 'sap/m/ToolbarSeparator', 'sap/m/VBox', 'sap/ui/comp/library', 'sap/ui/comp/providers/TableProvider', 'sap/ui/comp/smartfilterbar/FilterProvider', 'sap/ui/comp/smartvariants/SmartVariantManagement', 'sap/ui/model/FilterOperator', 'sap/ui/model/json/JSONModel', 'sap/ui/table/AnalyticalColumn', 'sap/ui/table/AnalyticalTable', 'sap/ui/table/Column', 'sap/ui/table/Table', 'sap/ui/table/TreeTable'
], function(jQuery, Column1, Label, MessageBox, Table1, Text, ToolbarSeparator, VBox, library, TableProvider, FilterProvider, SmartVariantManagement, FilterOperator, JSONModel, AnalyticalColumn, AnalyticalTable, Column, Table, TreeTable) {
	"use strict";

	/**
	 * Constructor for a new smarttable/SmartTable.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartTable control creates a table based on OData metadata and the configuration specified. The entitySet attribute must be
	 *        specified to use the control. This attribute is used to fetch fields from OData metadata, from which columns will be generated. Note
	 *        that this attribute is not dynamic and cannot be changed once the control has been initialized! It can also be used to fetch the actual
	 *        table data based on the tableType attribute. This control will render a standard, analytical, or responsive table.
	 * @extends sap.m.VBox
	 * @author Pavan Nayak, Benjamin Spieler
	 * @constructor
	 * @public
	 * @experimental Since version 1.25. The SmartTable will be productised soon.
	 * @alias sap.ui.comp.smarttable.SmartTable
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartTable = VBox.extend("sap.ui.comp.smarttable.SmartTable", /** @lends sap.ui.comp.smarttable.SmartTable.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic UI5 property
				 * 
				 * @since 1.26.0
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter (also in the closest
				 * parent View) and attaches to the relevant events of the SmartFilter; to fetch data, show overlay etc.
				 * 
				 * @since 1.26.0
				 */
				smartFilterId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata, by the SmartTable Note that No validation will be done here, please
				 * ensure you do not add spaces or special characters here!
				 * 
				 * @since 1.26.0
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * tableType attribute can be used to specify the type of table to create in the SmartFilter. For available options, see type. Note
				 * that if you add a table to the content of the SmartTable in the view; this property has no effect!
				 * 
				 * @since 1.26.0
				 */
				tableType: {
					type: "sap.ui.comp.smarttable.TableType",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants
				 * 
				 * @since 1.26.0
				 */
				useVariantManagement: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The useExportToExcel attribute can be set to true or false depending on whether you want to export data to MS Excel®.
				 * 
				 * @since 1.26.0
				 */
				useExportToExcel: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The useTablePersonalisation attribute can be set to true or false depending on whether you want to define personalized table
				 * settings.
				 * 
				 * @since 1.26.0
				 */
				useTablePersonalisation: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If the showRowCount attribute is set to true number of rows is shown along with the header text.
				 * 
				 * @since 1.26.0
				 */
				showRowCount: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies header text that is shown in table
				 * 
				 * @since 1.26.0
				 */
				header: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * a style class which is defined for the toolbar of the table
				 * 
				 * @since 1.26.0
				 */
				toolbarStyleClass: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Set this parameter to true to implement your own filter behaviour. Instead of the filter input box a button will be rendered for
				 * which' press event (customFilter) you can register an event handler.
				 * 
				 * @since 1.26.0
				 */
				enableCustomFilter: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Key used to save personalization data.
				 * 
				 * @since 1.26.0
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * if true, items of standard toolbar and custom toolbar will be merged into one toolbar. The combined toolbar will have a solid
				 * style.
				 * 
				 * @since 1.26.0
				 */
				useOnlyOneSolidToolbar: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * retrieve/set the current Variant.
				 * 
				 * @since 1.28.0
				 */
				currentVariantId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * this attribute can be used to specify if the controls created by the SmartTable are editable
				 * 
				 * @since 1.28.0
				 */
				editable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * When set to true, this enables automatic binding of the Table using the bindingPath (if it exists) or entitySet attribute. This
				 * happens just after the initialise event is fired.
				 * 
				 * @since 1.28.0
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * This attribute can be used to specify the path that is used during the binding of the Table. When not specified, the entitySet
				 * attribute is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
				 * 
				 * @since 1.28.0
				 */
				tableBindingPath: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle of controls works only
				 * for the SmartField scenario)
				 * 
				 * @since 1.28.0
				 */
				editTogglable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			aggregations: {

				/**
				 * An additional toolbar that can be added by the users, which can contain further custom buttons, controls, etc.
				 * 
				 * @since 1.26.0
				 */
				customToolbar: {
					type: "sap.m.Toolbar",
					multiple: false
				},

				/**
				 * The Semantic Object Controller allows to specify and overwrite several semantic object navigation functionalities.
				 * 
				 * @since 1.28.0
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				}
			},
			events: {

				/**
				 * Event fired once the control has been initialized.
				 * 
				 * @since 1.26.0
				 */
				initialise: {},

				/**
				 * Event fired just before the binding is being done Parameters:
				 * 
				 * @param {object} [bindingParams] the bindingParams object contains filters, sorters and other binding related information for the
				 *        table.
				 * @param {boolean} [bindingParams.preventTableBind] can be set to true by the listener to prevent binding from being done
				 * @param {object} [bindingParams.filters] the combined filter array containing a set of sap.ui.model.Filter instances from SmartTable
				 *        and SmartFilter - can be modified by users to influence filtering
				 * @param {object} [bindingParams.sorter] an array containing a set of sap.ui.model.Sorter instances from SmartTable (personalisation) -
				 *        can be modified by users to influence sorting
				 * @since 1.26.0
				 */
				beforeRebindTable: {},

				/**
				 * Event fired when display/edit button is clicked.
				 * 
				 * @since 1.28.0
				 */
				editToggled: {},

				/**
				 * Event fired when data is received after binding. This is fired when binding for the table is done by the SmartTable itself.
				 * 
				 * @since 1.28.0
				 */
				dataReceived: {},

				/**
				 * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
				 * 
				 * @param {string} [currentVariantId] id of the currently selected variant
				 */
				afterVariantSave: {},

				/**
				 * Fired after a variant is applied.
				 * 
				 * @param {string} [currentVariantId] id of the currently selected variant
				 */
				afterVariantApply: {}

			}
		}
	});

	// **
	// * This file defines behaviour for the control,
	// */
	SmartTable.prototype.init = function() {
		sap.m.FlexBox.prototype.init.call(this);
		this.addStyleClass("sapUiCompSmartTable");
		this.setFitContainer(true);
		this._bUpdateToolbar = true;
	};

	/**
	 * instantiates the SmartVariantManagementControl
	 * 
	 * @private
	 */
	SmartTable.prototype._createVariantManagementControl = function() {
		// Do not create variant management when it is not needed!
		if (this._oVariantManagement || (!this.getUseVariantManagement() && !this.getUseTablePersonalisation()) || !this.getPersistencyKey()) {
			return;
		}

		// always create VariantManagementControl, in case it is not used, it will take care of persisting the personalisation
		// without visualization

		var oPersInfo = new sap.ui.comp.smartvariants.PersonalizableInfo({
			type: "table",
			keyName: "persistencyKey",
			dataSource: "TODO"
		});

		oPersInfo.setControl(this);
		var that = this;
		this._oVariantManagement = new sap.ui.comp.smartvariants.SmartVariantManagement({ // FIXME workaround to make sinon stubs work with AMD
			personalizableControls: oPersInfo,
			initialise: function(oEvent) {
				that._oCurrentVariant = "STANDARD";
			},
			save: function(oEvent) {
				that._variantSaved();
			},
			afterSave: function() {
				that.fireAfterVariantSave({
					currentVariantId: that.getCurrentVariantId()
				});
			},
			showShare: false
		});

		this._oVariantManagement.initialise();
	};

	/**
	 * event handler for variantmanagement save event
	 * 
	 * @private
	 */
	SmartTable.prototype._variantSaved = function() {
		if (this._oPersController) {
			this._oPersController.setPersonalizationData(this._oCurrentVariant);
		}
	};

	SmartTable.prototype.setUseExportToExcel = function(bUseExportToExcel) {
		this.setProperty("useExportToExcel", bUseExportToExcel, true);
		this._bUpdateToolbar = true;
	};

	SmartTable.prototype.setUseTablePersonalisation = function(bUseTablePersonalisation) {
		this.setProperty("useTablePersonalisation", bUseTablePersonalisation, true);
		this._bUpdateToolbar = true;
	};

	SmartTable.prototype.setUseOnlyOneSolidToolbar = function(bOneToolbar) {
		this.setProperty("useOnlyOneSolidToolbar", bOneToolbar, true);
		this._bUpdateToolbar = true;
	};

	SmartTable.prototype.setUseVariantManagement = function(bUseVariantManagement) {
		this.setProperty("useVariantManagement", bUseVariantManagement, true);
		if (this._oPersController) {
			this._oPersController.setResetToInitialTableState(!bUseVariantManagement);
		}
		this._bUpdateToolbar = true;
	};

	SmartTable.prototype.setToolbarStyleClass = function(sStyleClass) {
		this.setProperty("toolbarStyleClass", sStyleClass, true);
		this._createToolbar();
		this._oToolbar.addStyleClass(sStyleClass);
	};

	SmartTable.prototype.setCustomToolbar = function(oCustomToolbar) {
		if (this._oCustomToolbar) {
			this.removeItem(this._oCustomToolbar);
		}

		this._oCustomToolbar = oCustomToolbar;

		if (this._oCustomToolbar) {
			this._oCustomToolbar.addStyleClass("sapUiCompSmartTableCustomToolbar");
			this._oCustomToolbar.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this.insertItem(this._oCustomToolbar, 1);
		}

		this._bUpdateToolbar = true;
	};

	SmartTable.prototype.getCustomToolbar = function() {
		return this._oCustomToolbar;
	};

	SmartTable.prototype.setHeader = function(sText) {
		this.setProperty("header", sText, true);
		this._refreshHeaderText();
	};

	SmartTable.prototype.setShowRowCount = function(bShow) {
		this.setProperty("showRowCount", bShow, true);
		this._refreshHeaderText();
	};

	SmartTable.prototype.setEditTogglable = function(bToggle) {
		this.setProperty("editTogglable", bToggle, true);
		this._bUpdateToolbar = true;
	};

	SmartTable.prototype.setEditable = function(bEdit) {
		this.setProperty("editable", bEdit, true);
	};

	/**
	 * sets the header text
	 * 
	 * @private
	 */
	SmartTable.prototype._refreshHeaderText = function() {
		if (!this._headerText) {
			this._bUpdateToolbar = true;
			return;
		}

		var sText = this.getHeader();
		if (this.getShowRowCount()) {
			var iRowCount = parseInt(this._getRowCount(), 10);
			jQuery.sap.require("sap.ui.core.format.NumberFormat");
			var sValue = sap.ui.core.format.NumberFormat.getFloatInstance().format(iRowCount);

			sText += " (" + sValue + ")";
		}

		this._headerText.setText(sText);
	};

	/**
	 * creates the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._createToolbar = function() {
		if (!this._oToolbar) {
			this._oToolbar = new sap.m.Toolbar();
			this._oToolbar.addStyleClass("sapUiCompSmartTableToolbar");
			if (this.getUseVariantManagement() || this.getHeader()) {
				this._oToolbar.setDesign(sap.m.ToolbarDesign.Transparent);
				this._oToolbar.setHeight("3rem");
			} else {
				this._oToolbar.setDesign(sap.m.ToolbarDesign.Solid);
			}
			this._oToolbar.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this.insertItem(this._oToolbar, 0);
		}
	};

	SmartTable.prototype.onBeforeRendering = function() {
		if (this._bUpdateToolbar && this.bIsInitialised) {

			if (this.getUseOnlyOneSolidToolbar() && this._oCustomToolbar) {
				// if useOnlyOneSolidToolbar is set, we insert the items in the custom toolbar => insert always at position 0,
				// reverse order
				this._addVariantManagementToToolbar(true);
				this._addSeparatorToToolbar(true);
				this._addHeaderToToolbar(true);
			} else {
				this._createToolbar();
				this._oToolbar.removeAllContent(); //clear toolbar to avoid wrong order
				this._addHeaderToToolbar();
				this._addSeparatorToToolbar();
				this._addVariantManagementToToolbar();
			}
			this._addSpacerToToolbar();
			// First show Display/Edit icon, then Personalisation and finally Excel Export
			this._addEditTogglableToToolbar();
			this._addTablePersonalisationToToolbar();
			this._addExportToExcelToToolbar();

			// seems like toolbar only contains spacer and is actually not needed - remove it
			if (this._oToolbar && (this._oToolbar.getContent().length === 0 || (this._oToolbar.getContent().length === 1 && this._oToolbar.getContent()[0] instanceof sap.m.ToolbarSpacer))) {
				this.removeItem(this._oToolbar);
				this._oToolbar.destroy();
				this._oToolbar = null;
			}

			this._bUpdateToolbar = false;
		}
	};

	/**
	 * Adds the button to change between edit and read only mode
	 * 
	 * @private
	 */
	SmartTable.prototype._addEditTogglableToToolbar = function() {
		var oToolbar = this._oCustomToolbar || this._oToolbar;
		if (this.getEditTogglable()) {
			if (!this._oEditButton) {
				this._oEditButton = new sap.m.Button({
					type: sap.m.ButtonType.Default,
					icon: this.getEditable() ? "sap-icon://display" : "sap-icon://edit",
					press: jQuery.proxy(function() {
						var bEditable = this.getEditable();
						// toggle property editable and set it on the smart table
						bEditable = !bEditable;
						this.setEditable(bEditable, true);
						this._oEditButton.setIcon(bEditable ? "sap-icon://display" : "sap-icon://edit");
						// notify any listeners
						this.fireEditToggled({
							editable: bEditable
						});
					}, this)
				});
			}
			if (this._oEditButton) {
				oToolbar.addContent(this._oEditButton);
			}
		} else if (this._oEditButton) {
			oToolbar.removeContent(this._oEditButton);
		}
	};

	/**
	 * adds the header line to the toolbar
	 * 
	 * @param {boolean} bInsertToCustomToolbar - true if item should be inserted to the custom toolbar
	 * @private
	 */
	SmartTable.prototype._addHeaderToToolbar = function(bInsertToCustomToolbar) {
		if (this.getHeader()) {
			if (!this._headerText) {
				this._headerText = new Text();
				this._headerText.addStyleClass("sapMH4Style");
				this._headerText.addStyleClass("sapUiCompSmartTableHeader");
			}

			this._refreshHeaderText();
			if (bInsertToCustomToolbar) {
				this._oCustomToolbar.insertContent(this._headerText, 0);
			} else {
				this._oToolbar.addContent(this._headerText);
			}
		}
	};

	/**
	 * adds a separator between header and variantmanagement to the toolbar
	 * 
	 * @param {boolean} bInsertToCustomToolbar - true if item should be inserted to the custom toolbar
	 * @private
	 */
	SmartTable.prototype._addSeparatorToToolbar = function(bInsertToCustomToolbar) {
		if (this.getHeader() && this.getUseVariantManagement()) {
			var oSeparator = new ToolbarSeparator();
			if (bInsertToCustomToolbar) {
				this._oCustomToolbar.insertContent(oSeparator, 0);
			} else {
				this._oToolbar.addContent(oSeparator);
			}
		}
	};

	/**
	 * returns the internally used table object
	 * 
	 * @public
	 * @returns {object} the table
	 */
	SmartTable.prototype.getTable = function() {
		return this._oTable;
	};

	/**
	 * adds the VarientManagement to the toolbar
	 * 
	 * @param {boolean} bInsertToCustomToolbar - true if item should be inserted to the custom toolbar
	 * @private
	 */
	SmartTable.prototype._addVariantManagementToToolbar = function(bInsertToCustomToolbar) {
		if (this.getUseVariantManagement()) {
			this._createVariantManagementControl();
			if (bInsertToCustomToolbar) {
				this._oCustomToolbar.insertContent(this._oVariantManagement, 0);
			} else {
				this._oToolbar.addContent(this._oVariantManagement);
			}
		}
	};

	/**
	 * adds the Export to Excel button to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addExportToExcelToToolbar = function() {
		if (this.getUseExportToExcel() && this._bTableSupportsExcelExport) {
			var that = this;
			if (!this._oUseExportToExcel) {
				this._oUseExportToExcel = new sap.m.Button({
					type: sap.m.ButtonType.Default,
					icon: "sap-icon://excel-attachment",
					tooltip: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("TABLE_EXPORT_TEXT"),
					press: function(oEvent) {

						var fDownloadXls = function() {
							var oRowBinding = that._getRowBinding();
							var sUrl = oRowBinding.getDownloadUrl("xlsx");
							window.open(sUrl);
						};

						var iRowCount = that._getRowCount();

						if (iRowCount > 10000) {
							MessageBox.confirm(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("DOWNLOAD_CONFIRMATION_TEXT", iRowCount), {
								actions: [
									MessageBox.Action.YES, MessageBox.Action.NO
								],
								onClose: function(oAction) {
									if (oAction === MessageBox.Action.YES) {
										fDownloadXls();
									}
								}
							});
						} else {
							fDownloadXls();
						}
					}
				});
				this._setExcelExportEnableState();
			}

			var oToolbar = this._oCustomToolbar || this._oToolbar;
			oToolbar.addContent(this._oUseExportToExcel);
		}
	};

	/**
	 * gets table's row count
	 * 
	 * @private
	 * @returns {integer} the row count
	 */
	SmartTable.prototype._getRowCount = function() {
		var oRowBinding = this._getRowBinding();

		if (!oRowBinding) {
			return 0;
		}

		var iRowCount = 0;
		if (oRowBinding.getTotalSize) {
			iRowCount = oRowBinding.getTotalSize();
		} else {
			iRowCount = oRowBinding.getLength();
		}

		if (iRowCount < 0 || iRowCount === "0") {
			iRowCount = 0;
		}

		return iRowCount;
	};

	/**
	 * disables the export to excel button if no data is present, otherwise enables it
	 * 
	 * @private
	 */
	SmartTable.prototype._setExcelExportEnableState = function() {
		if (this._oUseExportToExcel) {
			var iRowCount = this._getRowCount();
			if (iRowCount > 0) {
				this._oUseExportToExcel.setEnabled(true);
			} else {
				this._oUseExportToExcel.setEnabled(false);
			}
		}
	};

	/**
	 * adds a spacer to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addSpacerToToolbar = function() {
		var oToolbar = this._oCustomToolbar || this._oToolbar;
		var aItems = oToolbar.getContent();
		var bFoundSpacer = false;
		if (aItems) {
			var iLength = aItems.length;
			var i = 0;
			for (i; i < iLength; i++) {
				if (aItems[i] instanceof sap.m.ToolbarSpacer) {
					bFoundSpacer = true;
					break;
				}
			}
		}

		if (!bFoundSpacer) {
			oToolbar.addContent(new sap.m.ToolbarSpacer());
		}
	};

	/**
	 * adds the Table Personalisation button to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addTablePersonalisationToToolbar = function() {
		if (this.getUseTablePersonalisation()) {

			if (!this._oTablePersonalisationButton) {
				this._oTablePersonalisationButton = new sap.m.Button({
					type: sap.m.ButtonType.Default,
					icon: "sap-icon://action-settings",
					press: jQuery.proxy(function(oEvent) {
						this._oPersController.openDialog();
					}, this)
				});
			}
			var oToolbar = this._oCustomToolbar || this._oToolbar;
			oToolbar.addContent(this._oTablePersonalisationButton);
		}
	};

	/**
	 * creates the personalization controller if not yet done
	 * 
	 * @private
	 */
	SmartTable.prototype._createPersonalizationController = function() {
		if (this._oPersController || !this.getUseTablePersonalisation()) {
			return;
		}

		var oSettings = this.data("p13nDialogSettings");
		if (typeof oSettings === "string") {
			try {
				oSettings = JSON.parse(oSettings);
			} catch (e) {
				oSettings = null;
				// Invalid JSON!
			}
		}

		jQuery.sap.require("sap.ui.comp.personalization.Controller");
		this._oPersController = new sap.ui.comp.personalization.Controller({
			table: this._oTable,
			setting: oSettings,
			resetToInitialTableState: !this.getUseVariantManagement(),
			beforePotentialTableChange: jQuery.proxy(this._beforePersonalisationModelDataChange, this),
			afterPotentialTableChange: jQuery.proxy(this._afterPersonalisationModelDataChange, this),
			afterP13nModelDataChange: jQuery.proxy(this._personalisationModelDataChange, this)
		});
	};

	/**
	 * returns the row/items binding of the currently used internal table
	 * 
	 * @private
	 * @returns {sap.ui.model.Binding} the row/items binding
	 */
	SmartTable.prototype._getRowBinding = function() {
		if (this._oTable) {
			return this._oTable.getBinding(this._sAggregation);
		}
	};

	/**
	 * The entity set name from OData metadata, with which the table should be bound to
	 * 
	 * @param {string} sEntitySetName The entity set
	 * @public
	 */
	SmartTable.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._initialiseMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the table controls.
	 * 
	 * @private
	 */
	SmartTable.prototype.propagateProperties = function() {
		VBox.prototype.propagateProperties.apply(this, arguments);
		this._initialiseMetadata();
	};

	/**
	 * Initialises the OData metadata necessary to create the table
	 * 
	 * @private
	 */
	SmartTable.prototype._initialiseMetadata = function() {
		if (!this.bIsInitialised) {
			this._createTableProvider();
			if (this._oTableProvider) {
				this._aTableViewMetadata = this._oTableProvider.getTableViewMetadata();
				if (this._aTableViewMetadata) {
					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this.bIsInitialised = true;
					this._bTableSupportsExcelExport = this._oTableProvider.getSupportsExcelExport();
					this._listenToSmartFilter();
					this._createContent();
					this._createVariantManagementControl();
					this._createPersonalizationController();
					// Create a local JSONModel to handle editable switch
					this._oEditModel = new JSONModel({
						editable: this.getEditable()
					});
					this.bindProperty("editable", {
						path: "sm4rtM0d3l>/editable"
					});
					// Set the local model on the SmartTable
					this.setModel(this._oEditModel, "sm4rtM0d3l");
					if (this._bUpdateToolbar) {
						this.rerender();
					}
					this.fireInitialise();
					if (this.getEnableAutoBinding()) {
						this._reBindTable();
					}					
				}
			}
		}
	};

	/**
	 * Creates an instance of the table provider
	 * 
	 * @private
	 */
	SmartTable.prototype._createTableProvider = function() {
		var oModel, sEntitySetName, sIgnoredFields;
		sEntitySetName = this.getEntitySet();
		sIgnoredFields = this.getIgnoredFields();
		oModel = this.getModel();

		// The SmartTable apparently also needs to work for non ODataModel models; hence we now create the table independent
		// of ODataModel.
		// TODO: revisit this --> perhaps we can use applySettings or do this differently once we have better control
		// extension mechanism.
		if (oModel && !this._bTableCreated) {
			this._aExistingColumns = [];
			this._oTemplate = null;
			this._createTable();
			this._bTableCreated = true;
		}

		// Check if metadata has to be loaded asynchronously on the ODataModel
		// If so, delay the creation of TableProvider until metadata is loaded!
		if (oModel && oModel.bLoadMetadataAsync && !oModel.oMetadata.isLoaded()) {
			// Attach to metadataLoaded if no event was already attached
			if (!this._bMetadataLoadAttached) {
				oModel.attachMetadataLoaded(jQuery.proxy(this._initialiseMetadata, this));
				this._bMetadataLoadAttached = true;
			}
			return;
		}
		if (oModel && sEntitySetName) {
			// TODO: Instead of this consider doing this by explicitly adding these columns to ignored fields property!
			if (this._aExistingColumns.length) {
				if (sIgnoredFields) {
					sIgnoredFields += "," + this._aExistingColumns.toString();
				} else {
					sIgnoredFields = this._aExistingColumns.toString();
				}
			}
			this._oTableProvider = new sap.ui.comp.providers.TableProvider({ // FIXME workaround to make sinon stubs work with AMD
				entitySet: sEntitySetName,
				ignoredFields: sIgnoredFields,
				isEditableTable: this.getEditable(),
				dateFormatSettings: this.data("dateFormatSettings"),
				currencyFormatSettings: this.data("currencyFormatSettings"),
				defaultDropDownDisplayBehaviour: this.data("defaultDropDownDisplayBehaviour"),
				useSmartField: this.data("useSmartField"),
				model: oModel
			});
		}
	};

	/**
	 * Listen to changes on the corresponding SmartFilter (if any)
	 * 
	 * @private
	 */
	SmartTable.prototype._listenToSmartFilter = function() {
		var sSmartFilterId = null;
		// Register for SmartFilter Search
		sSmartFilterId = this.getSmartFilterId();

		this._oSmartFilter = this._findControl(sSmartFilterId);

		if (this._oSmartFilter) {
			this._oSmartFilter.attachSearch(jQuery.proxy(this._reBindTable, this));
			this._oSmartFilter.attachFilterChange(jQuery.proxy(function() {
				this._oTable.setShowOverlay(true);
			}, this));

			// Set initial empty text only if a valid SmartFilter is found
			if (this._oTable.setNoDataText) {
				this._oTable.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_DATA"));
			}
		}
	};

	/**
	 * searches for a certain control by its ID
	 * 
	 * @param {string} sId the control's ID
	 * @returns {sap.ui.core.Control} The control found by the given Id
	 * @private
	 */
	SmartTable.prototype._findControl = function(sId) {
		var oResultControl, oView;
		if (sId) {
			// Try to get SmartFilter from Id
			oResultControl = sap.ui.getCore().getControl(sId);

			// Try to get SmartFilter from parent View!
			if (!oResultControl) {
				oView = this._getView();

				if (oView) {
					oResultControl = oView.byId(sId);
				}
			}
		}

		return oResultControl;
	};

	/**
	 * searches for the controls view
	 * 
	 * @returns {sap.ui.core.mvc.View} The found parental View
	 * @private
	 */
	SmartTable.prototype._getView = function() {
		if (!this._oView) {
			var oObj = this.getParent();
			while (oObj) {
				if (oObj instanceof sap.ui.core.mvc.View) {
					this._oView = oObj;
					break;
				}
				oObj = oObj.getParent();
			}
		}
		return this._oView;
	};

	/**
	 * This can be used to trigger binding on the table used in the SmartTable
	 * 
	 * @protected
	 */
	SmartTable.prototype.rebindTable = function() {
		this._reBindTable();
	};

	/**
	 * Re-binds the table
	 * 
	 * @private
	 */
	SmartTable.prototype._reBindTable = function() {
		var mTablePersonalisationData, aFilters, aSelect, aSorters, mParameters = {}, mBindingParams = {
			preventTableBind: false
		};

		mTablePersonalisationData = this._getTablePersonalisationData() || {};
		aFilters = mTablePersonalisationData.filters;
		aSorters = mTablePersonalisationData.sorters;

		if (this._oSmartFilter) {
			var aSmartFilters = this._oSmartFilter.getFilters();

			if (aFilters) {
				aFilters = aSmartFilters.concat(aFilters);
			} else {
				aFilters = aSmartFilters;
			}
			mParameters = this._oSmartFilter.getParameters() || {};
		}

		aSelect = this._getVisibleColumnPaths();

		if (aSelect && aSelect.length) {
			mParameters["select"] = aSelect.toString();
		}
		// Enable batch requests (used by AnalyticalTable)
		mParameters["useBatchRequests"] = true;

		if (!aSorters) {
			aSorters = [];
		}

		mBindingParams.filters = aFilters;
		mBindingParams.sorter = aSorters;
		mBindingParams.parameters = mParameters;

		// fire event to enable user modification of certain binding options (Ex: Filters)
		this.fireBeforeRebindTable({
			bindingParams: mBindingParams
		});

		if (!mBindingParams.preventTableBind) {
			aSorters = mBindingParams.sorter;
			aFilters = mBindingParams.filters;
			aSelect = mBindingParams.parameters["select"];
			if (!aSelect || !aSelect.length) {
				MessageBox.show(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_COLS"), {
					icon: MessageBox.Icon.ERROR,
					title: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("EMPTY_MANDATORY_CHECK_TITLE"),
					styleClass: !!(this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
				});
				return;
			}

			this._oTable.setBusy(true);

			// All UI5 tables seem to be showing the no data text briefly before showing the actual results
			// Workaround by setting a space as the no data text (Empty string === default no data text!)
			// TODO: revisit this later
			if (this._oTable.setNoDataText) {
				this._oTable.setNoDataText(" ");
			}

			// Reset Suppress refresh
			if (this._oTable._setSuppressRefresh) {
				this._oTable._setSuppressRefresh(false);
			}

			this._oTable.bindRows({
				path: this.getTableBindingPath() || ("/" + this.getEntitySet()),
				filters: aFilters,
				sorter: aSorters,
				parameters: mParameters,
				template: this._oTemplate,
				events: {
					dataReceived: jQuery.proxy(function() {
						// Set No data text only if table has no results!
						if (!this._getRowCount()) {
							if (this._oTable.setNoDataText) {
								this._oTable.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_RESULTS"));
							}
						}
						this._oTable.setBusy(false);
						this.updateTableHeaderState();
						// notify any listeners
						this.fireDataReceived();

						this._disableSumRows();
					}, this)
				}
			});
			this._oTable.setShowOverlay(false);
			// Flag to indicate if table was bound (data fetch triggered) at least once
			this._bIsTableBound = true;
		}
	};

	/**
	 * This can be called once data is received to update table header (count) and toolbar buttons(e.g. Excel Export) enabled state
	 * 
	 * @public
	 */
	SmartTable.prototype.updateTableHeaderState = function() {
		this._refreshHeaderText();
		this._setExcelExportEnableState();
	};

	/**
	 * Creates the content based on the metadata/configuration
	 * 
	 * @private
	 */
	SmartTable.prototype._createContent = function() {
		var i, iLen = 0, oField, oColumn;
		iLen = this._aTableViewMetadata.length;
		for (i = 0; i < iLen; i++) {
			oField = this._aTableViewMetadata[i];
			this._registerContentTemplateEvents(oField.template);
			oColumn = this._createColumn(oField);

			// Set the persoData - relevant for personalisation
			oColumn.data("p13nData", {
				columnKey: oField.name,
				leadingProperty: oField.name, // used to fetch data, by adding this to $select param of OData request
				additionalProperty: (oField.isCurrencyField && oField.unit) ? oField.unit : undefined,
				sortProperty: oField.sortable ? oField.name : undefined,
				filterProperty: oField.filterable ? oField.name : undefined,
				type: oField.filterType,
				maxLength: oField.maxLength,
				precision: oField.precision,
				scale: oField.scale,
				aggregationRole: oField.aggregationRole
			});

			// Add the column to the table
			this._oTable.addColumn(oColumn);
		}
	};

	/**
	 * registers events on the template controls which are exposed by the SmartTable
	 * 
	 * @params {sap.ui.Control} oTemplateControl the control on which to register the events
	 * @private
	 */
	SmartTable.prototype._registerContentTemplateEvents = function(oTemplateControl) {
		if (oTemplateControl instanceof sap.ui.comp.navpopover.SmartLink) {
			var oSemanticObjectController = this.getSemanticObjectController();
			oTemplateControl.setSemanticObjectController(oSemanticObjectController);
		}
	};

	/**
	 * stores a list of initially created columns (if any)
	 * 
	 * @private
	 */
	SmartTable.prototype._updateInitialColumns = function() {
		var aColumns = this._oTable.getColumns(), iLen = aColumns ? aColumns.length : 0, oColumn, oColumnData, sLeadingProperty;
		while (iLen--) {
			sLeadingProperty = null;
			oColumn = aColumns[iLen];
			// Retrieve path from the property
			if (oColumn) {
				if (oColumn.getLeadingProperty) {
					sLeadingProperty = oColumn.getLeadingProperty();
				}

				oColumnData = oColumn.data("p13nData");
				if (typeof oColumnData === "string") {
					try {
						oColumnData = JSON.parse(oColumnData);
					} catch (e) {
						// Invalid JSON
					}
					// Set back the object for faster access later
					if (oColumnData) {
						oColumn.data("p13nData", oColumnData);
					}
				}
				if (!sLeadingProperty) {
					if (oColumnData) {
						sLeadingProperty = oColumnData["leadingProperty"];
					}
				}
				if (sLeadingProperty) {
					this._aExistingColumns.push(sLeadingProperty);
				}
			}
		}
	};

	/**
	 * gets the array of visible column path that is used to create the select query
	 * 
	 * @private
	 */
	SmartTable.prototype._getVisibleColumnPaths = function() {
		var aSelect = [], aColumns = this._oTable.getColumns(), i, iLen = aColumns ? aColumns.length : 0, oColumn, oColumnData, sPath, sAdditionalPath;

		for (i = 0; i < iLen; i++) {
			oColumn = aColumns[i];
			sPath = null;
			if (oColumn.getVisible()) {
				if (oColumn.getLeadingProperty) {
					sPath = oColumn.getLeadingProperty();
				}

				oColumnData = oColumn.data("p13nData");
				if (oColumnData) {
					if (!sPath) {
						sPath = oColumnData["leadingProperty"];
					}
					sAdditionalPath = oColumnData["additionalProperty"];
				}

				if (sPath && aSelect.indexOf(sPath) < 0) {
					aSelect.push(sPath);
				}
				if (sAdditionalPath && aSelect.indexOf(sAdditionalPath) < 0) {
					aSelect.push(sAdditionalPath);
				}
			}
		}

		return aSelect;
	};

	/**
	 * Creates a table based on the configuration, if necessary. This also prepares the methods to be used based on the table type.
	 * 
	 * @private
	 */
	SmartTable.prototype._createTable = function() {
		var aContent = this.getItems(), iLen = aContent ? aContent.length : 0, oTable;
		this._sAggregation = "rows";
		// Check if a Table already exists in the content (Ex: from view.xml)
		while (iLen--) {
			oTable = aContent[iLen];
			if (oTable instanceof Table || oTable instanceof Table1) {
				break;
			}
			oTable = null;
		}

		// If a Table exists determine its type else create one based on the tableType property!
		if (oTable) {
			this._oTable = oTable;
			if (oTable instanceof AnalyticalTable) {
				this._isAnalyticalTable = true;
			} else if (oTable instanceof Table1) {
				this._isMobileTable = true;
				// get the item template from the view
				this._oTemplate = (oTable.getItems() && oTable.getItems().length > 0) ? oTable.getItems()[0] : new sap.m.ColumnListItem();
				oTable.removeAllItems();
			} else if (oTable instanceof TreeTable) {
				this._isTreeTable = true;
			}
			// If a table already exists --> get the list of columns to ignore
			this._updateInitialColumns();
		} else {
			// Create table based on tableType
			if (this.getTableType() === "AnalyticalTable") {
				this._isAnalyticalTable = true;
				this._oTable = new AnalyticalTable({
					enableCustomFilter: true
				});
			} else if (this.getTableType() === "ResponsiveTable") {
				this._isMobileTable = true;
				this._oTable = new Table1({
					growing: true
				});
				this._oTemplate = new sap.m.ColumnListItem();
			} else if (this.getTableType() === "TreeTable") {
				this._isTreeTable = true;
				this._oTable = new TreeTable();
			} else {
				this._oTable = new Table();
			}

			if (this._oTable.setVisibleRowCountMode) {
				this._oTable.setVisibleRowCountMode(sap.ui.table.VisibleRowCountMode.Auto);
			}

			this.insertItem(this._oTable, 2);
		}

		this._oTable.setLayoutData(new sap.m.FlexItemData({
			growFactor: 1
		}));

		this._oTable.addStyleClass("sapUiCompSmartTableInnerTable");

		this._oTable.setEnableBusyIndicator(true);
		this._oTable.setBusyIndicatorDelay(0);

		if (this._oTable.setEnableCustomFilter) {
			this._oTable.setEnableCustomFilter(this.getEnableCustomFilter());
		}

		if (this._oTable.getEnableCustomFilter && this._oTable.getEnableCustomFilter()) {
			// disable the cell filter if custom filter is enabled
			if (this._oTable.setEnableCellFilter) {
				this._oTable.setEnableCellFilter(false);
			}
			if (this._oTable.attachCustomFilter) {
				this._oTable.attachCustomFilter(jQuery.proxy(this._showTableFilterDialog, this));
			}
		}

		// Replace the prototype methods to suit the table being used!
		if (this._isAnalyticalTable) {
			this._createColumn = this._createAnalyticalColumn;
		} else if (this._isMobileTable) {
			this._sAggregation = "items";
			this._createColumn = this._createMobileColumn;
			// map bindItems to bindRows for Mobile Table to enable reuse of rebind mechanism
			this._oTable.bindRows = this._oTable.bindItems;
		}
	};

	/**
	 * Shows the filter dialog via the Personalisation controller
	 * 
	 * @param {object} oEvent The event parameters
	 * @private
	 */
	SmartTable.prototype._showTableFilterDialog = function(oEvent) {
		if (this._oPersController) {
			this._oPersController.openDialog({
				filter: {
					visible: true,
					payload: {
						column: oEvent.getParameter("column")
					}
				}
			});
		}
	};

	/**
	 * sets the disable property on the DOM's input elements on existing sum rows
	 * 
	 * @private
	 */
	SmartTable.prototype._disableSumRows = function() {
		if (sap.ui.Device.browser.msie && sap.ui.Device.browser.version < 11) { // other browser work via pointer-events: none in CSS
			jQuery.sap.delayedCall(60, this, function() { // CSS classes are set in sap.ui.table.AnalyticalTable._updateTableContent ONLY if data is
				// available. Data gets set via sap.ui.table.Table.updateRows with a setDelay50 call, so
				// ensure this call is triggerd afterwards
				if (this.getEditable()) {
					this._oTable.$().find(".sapUiAnalyticalTableSum input").prop("disabled", true); // set the input elements on the sum line to
					// disabled
					this._oTable.$().find(".sapUiTableGroupHeader input").prop("disabled", true); // set the input elements on the group headers sum
					// line to disabled
				}
			});
		}
	};

	/**
	 * Creates and returns a Column that can be added to the table, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @private
	 * @returns {Object} the column that is created
	 */
	SmartTable.prototype._createColumn = function(oField) {
		var oColumn;
		oColumn = new Column({
			autoResizable: true,
			hAlign: oField.align,
			width: oField.width,
			visible: oField.isInitiallyVisible,
			label: new Label({
				textAlign: oField.align,
				text: oField.label
			}),
			tooltip: oField.quickInfo,
			showSortMenuEntry: oField.sortable,
			showFilterMenuEntry: oField.filterable,
			name: oField.fieldName,
			template: oField.template
		});
		return oColumn;
	};

	/**
	 * Creates and returns an AnalyticalColumn that can be added to the AnalyticalTable, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @private
	 * @returns {Object} the column that is created
	 */
	SmartTable.prototype._createAnalyticalColumn = function(oField) {
		var oColumn;
		oColumn = new AnalyticalColumn({
			autoResizable: true,
			hAlign: oField.align,
			width: oField.width,
			visible: oField.isInitiallyVisible,
			label: new Label({
				textAlign: oField.align,
				text: oField.label
			}),
			tooltip: oField.quickInfo,
			showSortMenuEntry: oField.sortable,
			showFilterMenuEntry: oField.filterable,
			summed: oField.summed,
			leadingProperty: oField.name,
			template: oField.template
		});
		return oColumn;
	};

	/**
	 * Creates and returns a MobileColumn that can be added to the mobile table, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @private
	 * @returns {Object} the column that is created
	 */
	SmartTable.prototype._createMobileColumn = function(oField) {
		var oColumn;
		oColumn = (new Column1({
			hAlign: oField.align,
			visible: oField.isInitiallyVisible,
			header: new Text({
				text: oField.label
			}),
			tooltip: oField.quickInfo
		}));
		// Mobile table needs the content control to be passed as a template with the items aggregation
		if (oField.template && oField.template.setWrapping) {
			oField.template.setWrapping(true);
		}
		if (this._oTemplate) {
			this._oTemplate.addCell(oField.template);
		}
		return oColumn;
	};

	/**
	 * Interface function for SmartVariantManagment control, returns the current used variant data
	 * 
	 * @public
	 * @returns {json} The currently set variant
	 */
	SmartTable.prototype.fetchVariant = function() {
		if (this._oCurrentVariant === "STANDARD" || this._oCurrentVariant === null) {
			return {};
		}

		return this._oCurrentVariant;
	};

	/**
	 * Interface function for SmartVariantManagment control, sets the current variant
	 * 
	 * @param {Object} oVariantJSON - the variants json
	 * @public
	 */
	SmartTable.prototype.applyVariant = function(oVariantJSON) {
		this._oCurrentVariant = oVariantJSON;
		if (this._oCurrentVariant === "STANDARD") {
			this._oCurrentVariant = null;
		}

		// Set instance flag to indicate that we are currently in the process of applying the changes
		this._bApplyingVariant = true;
		// Suppress refresh to prevent backend roundtrips
		if (this._oTable._setSuppressRefresh) {
			this._oTable._setSuppressRefresh(true);
		}

		if (this._oPersController) {
			if (this._oCurrentVariant === null) {
				this._oPersController.resetPersonalization();
			} else {
				this._oPersController.setPersonalizationData(this._oCurrentVariant);
			}
		}

		// Rebind Table only if data was set on it once or no smartFilter is attached!
		if (this._bIsTableBound || !this._oSmartFilter) {
			this._reBindTable();
		} else {
			this._oTable.setShowOverlay(true);
		}

		// Clear apply variant flag!
		this._bApplyingVariant = false;

		this.fireAfterVariantApply({
			currentVariantId: this.getCurrentVariantId()
		});
	};

	/**
	 * eventhandler fired before personalisation changes are applied to the table
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._beforePersonalisationModelDataChange = function(oEvent) {

		// we set busy indicator since operation on the table (like setting visible to true) can take longer and the table provides no visual feedback
		this._oTable.setBusy(true);

		// Suppress refresh to prevent backend roundtrips
		if (this._oTable._setSuppressRefresh) {
			this._oTable._setSuppressRefresh(true);
		}
	};

	/**
	 * eventhandler fired after personalisation changes are potentially applied to the table. Event will be fired before the event
	 * "afterP13nModelDataChange"
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._afterPersonalisationModelDataChange = function(oEvent) {

		// we remove the temporary busy indicator - see sap.ui.comp.smarttable.SmartTable.prototype._beforePersonalisationModelDataChange
		this._oTable.setBusy(false);
	};

	/**
	 * eventhandler for personalisation changed
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._personalisationModelDataChange = function(oEvent) {
		if (this._bApplyingVariant) {
			return;
		}
		var oChangeInfo = oEvent.getParameter("changeType");
		var changeStatus = this._getChangeStatus(oChangeInfo);

		if (changeStatus === sap.ui.comp.personalization.Controller.ChangeType.Unchanged) {
			return;
		}

		this._oCurrentVariant = oEvent.getParameter("persistentData");
		if (!this.getUseVariantManagement()) {
			this._persistPersonalisation();
		} else {
			this._oVariantManagement.currentVariantSetModified(true);
		}

		if (changeStatus === sap.ui.comp.personalization.Controller.ChangeType.ModelChanged) {
			// Rebind Table only if data was set on it once or no smartFilter is attached!
			if (this._bIsTableBound || !this._oSmartFilter) {
				this._reBindTable();
			} else {
				this._oTable.setShowOverlay(true);
			}
		}
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @param {object} oChangeInfo The change info given by the personalization controller
	 * @returns {sap.ui.comp.personalization.Controller.ChangeType} the merged change status
	 */
	SmartTable.prototype._getChangeStatus = function(oChangeInfo) {
		if (!oChangeInfo) {
			// change info not provided return ModelChanged to indicate that we need to update everything internally
			return sap.ui.comp.personalization.Controller.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.Controller.ChangeType.ModelChanged || oChangeInfo.filter === sap.ui.comp.personalization.Controller.ChangeType.ModelChanged || oChangeInfo.columns === sap.ui.comp.personalization.Controller.ChangeType.ModelChanged || oChangeInfo.group === sap.ui.comp.personalization.Controller.ChangeType.ModelChanged) {
			// model has changed and was not applied to table
			return sap.ui.comp.personalization.Controller.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.Controller.ChangeType.TableChanged || oChangeInfo.filter === sap.ui.comp.personalization.Controller.ChangeType.TableChanged || oChangeInfo.columns === sap.ui.comp.personalization.Controller.ChangeType.TableChanged || oChangeInfo.group === sap.ui.comp.personalization.Controller.ChangeType.TableChanged) {
			// change was already applied to table
			return sap.ui.comp.personalization.Controller.ChangeType.TableChanged;
		}

		return sap.ui.comp.personalization.Controller.ChangeType.Unchanged;
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @returns {object} current variant's filter and sorting options
	 */
	SmartTable.prototype._getTablePersonalisationData = function() {
		if (!this._oCurrentVariant) {
			return null;
		}

		var aSorters = [], aFilters = [], aExcludeFilters = [], oGroupItem, oGroupSorter;

		// group handling
		if (this._isMobileTable && this._oCurrentVariant.group && this._oCurrentVariant.group.groupItems) {
			oGroupItem = this._oCurrentVariant.group.groupItems[0];

			var oColumn, sColumnsText = "";
			oColumn = this._getColumnByKey(oGroupItem.columnKey);
			if (oColumn) {
				sColumnsText = oColumn.getHeader().getText();
			}

			var sGroupPath = this._getPathFromColumnKeyAndProperty(oGroupItem.columnKey, "sortProperty");
			oGroupSorter = new sap.ui.model.Sorter(sGroupPath, oGroupItem.operation === sap.m.P13nConditionOperation.GroupDescending, function(oContext) {
				var sKey = oContext.getProperty(sGroupPath);
				return {
					key: sKey,
					text: sColumnsText ? sColumnsText + " : " + sKey : sKey
				};
			});

			aSorters.push(oGroupSorter);
		}

		// sort handling
		if (this._oCurrentVariant.sort) {
			this._oCurrentVariant.sort.sortItems.forEach(function(oModelItem) {
				var bDescending = oModelItem.operation === sap.m.P13nConditionOperation.Descending;
				var sPath = this._getPathFromColumnKeyAndProperty(oModelItem.columnKey, "sortProperty");
				if (oGroupSorter && oGroupSorter.sPath === sPath) {
					oGroupSorter.bDescending = bDescending;
				} else {
					aSorters.push(new sap.ui.model.Sorter(sPath, bDescending));
				}
			}, this);

		}
		// Filter Handling
		if (this._oCurrentVariant.filter) {
			this._oCurrentVariant.filter.filterItems.forEach(function(oModelItem) {
				var oValue1 = oModelItem.value1, oValue2 = oModelItem.value2;
				var sPath = this._getPathFromColumnKeyAndProperty(oModelItem.columnKey, "filterProperty");
				if (oValue1 instanceof Date && this._oTableProvider && this._oTableProvider.getIsUTCDateHandlingEnabled()) {
					oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
					oValue2 = oValue2 ? FilterProvider.getDateInUTCOffset(oValue2) : oValue2;
				}
				if (oModelItem.exclude) {
					aExcludeFilters.push(new sap.ui.model.Filter(sPath, FilterOperator.NE, oValue1));
				} else {
					aFilters.push(new sap.ui.model.Filter(sPath, oModelItem.operation, oValue1, oValue2));
				}
			}, this);

			if (aExcludeFilters.length) {
				aFilters.push(new sap.ui.model.Filter(aExcludeFilters, true));
			}
		}

		return {
			filters: aFilters,
			sorters: aSorters
		};
	};

	/**
	 * Returns the column for the given column key
	 * 
	 * @param {string} sColumnKey - the column key for the required column
	 * @returns {object} The found column or null
	 * @private
	 */
	SmartTable.prototype._getColumnByKey = function(sColumnKey) {
		var aColumns, oColumn, iLength, i, oCustomData;
		if (this._oTable) {
			aColumns = this._oTable.getColumns();
			iLength = aColumns.length;
			for (i = 0; i < iLength; i++) {
				oColumn = aColumns[i];
				oCustomData = oColumn.data("p13nData");
				if (oCustomData && oCustomData.columnKey === sColumnKey) {
					return oColumn;
				}
			}
		}

		return null;
	};

	/**
	 * Retrieves the path for the specified property and column key from the array of table columns
	 * 
	 * @param {string} sColumnKey - the column key specified on the table
	 * @param {string} sProperty - the property path that needs to be retrieved from the column
	 * @returns {string} The path that can be used by sorters, filters etc.
	 * @private
	 */
	SmartTable.prototype._getPathFromColumnKeyAndProperty = function(sColumnKey, sProperty) {
		var sPath = null, oColumn, oColumnData;
		oColumn = this._getColumnByKey(sColumnKey);

		// Retrieve path from the property
		if (oColumn) {
			if (sProperty == "sortProperty" && oColumn.getSortProperty) {
				sPath = oColumn.getSortProperty();
			} else if (sProperty == "filterProperty" && oColumn.getFilterProperty) {
				sPath = oColumn.getFilterProperty();
			} else if (sProperty == "leadingProperty" && oColumn.getLeadingProperty) {
				sPath = oColumn.getLeadingProperty();
			}

			if (!sPath) {
				oColumnData = oColumn.data("p13nData");
				if (oColumnData) {
					sPath = oColumnData[sProperty];
				}
			}
		}

		return sPath;
	};

	/**
	 * triggers (hidden) VariantManagementControl to persist personalisation this function is called in case no VariantManagementControl is used
	 * 
	 * @private
	 */
	SmartTable.prototype._persistPersonalisation = function() {
		var that = this;
		if (this._oVariantManagement) {
			this._oVariantManagement.getVariantsInfo(function(aVariants) {
				var sPersonalisationVariantKey = null;
				if (aVariants && aVariants.length > 0) {
					sPersonalisationVariantKey = aVariants[0].key;
				}

				var bOverwrite = sPersonalisationVariantKey !== null;

				var oParams = {
					name: "Personalisation",
					global: false,
					overwrite: bOverwrite,
					key: sPersonalisationVariantKey,
					def: true
				};
				that._oVariantManagement.fireSave(oParams);
			});
		}
	};

	/**
	 * returns the id of the currently selected variant.
	 * 
	 * @public
	 * @returns {string} id of the currently selected variant
	 */
	SmartTable.prototype.getCurrentVariantId = function() {
		var sKey = "";

		if (this._oVariantManagement) {
			sKey = this._oVariantManagement.getCurrentVariantId();
		}

		return sKey;
	};

	/**
	 * Set the current variant according to the sVariantId. In case an empty string or null or undefined was passed the STANDARD will be set. STANDARD
	 * will also be set, in case the passed sVariantId could not be found. In case neither a flexibility variant, nor the content for the standard
	 * variant could not be obtained, nor the personalisable control obtained nothing will be executed/changed
	 * 
	 * @public
	 * @params {string} sVariantId id of the currently selected variant
	 */
	SmartTable.prototype.setCurrentVariantId = function(sVariantId) {
		if (this._oVariantManagement) {
			this._oVariantManagement.setCurrentVariantId(sVariantId);
		} else {
			jQuery.sap.log.error("sap.ui.comp.smarttable.SmartTable.prototype.setCurrentVariantId: VariantManagement does not exist");
		}
	};

	/**
	 * Cleans up the control
	 * 
	 * @public
	 */
	SmartTable.prototype.exit = function() {
		if (this._oTableProvider && this._oTableProvider.destroy) {
			this._oTableProvider.destroy();
		}
		this._oTableProvider = null;
		if (this._oPersController && this._oPersController.destroy) {
			this._oPersController.destroy();
		}
		this._oPersController = null;
		if (this._oVariantManagement && this._oVariantManagement.destroy) {
			this._oVariantManagement.destroy();
		}
		if (this._oEditModel) {
			this._oEditModel.destroy();
		}
		this._oEditModel = null;

		this._oVariantManagement = null;
		this._oCurrentVariant = null;

		this._aTableViewMetadata = null;
		this._aExistingColumns = null;

		this._oSmartFilter = null;
		this._oCustomToolbar = null;
		this._oToolbar = null;
		this._oUseExportToExcel = null;
		this._oTablePersonalisationButton = null;
		this._oTemplate = null;
		this._oView = null;
		this._oTable = null;
	};

	return SmartTable;

}, /* bExport= */true);

}; // end of sap/ui/comp/smarttable/SmartTable.js
